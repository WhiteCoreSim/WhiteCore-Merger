using System;using Tools;
namespace OpenSim.Region.ScriptEngine.Shared.CodeTools {
//%+LSLProgramRoot+96
public class LSLProgramRoot : SYMBOL{
 public  LSLProgramRoot (Parser yyp, States  s ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}
 public  LSLProgramRoot (Parser yyp, GlobalDefinitions  gd , States  s ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}

public override string yyname { get { return "LSLProgramRoot"; }}
public override int yynum { get { return 96; }}
public LSLProgramRoot(Parser yyp):base(yyp){}}
//%+GlobalDefinitions+97
public class GlobalDefinitions : SYMBOL{
 public  GlobalDefinitions (Parser yyp, GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ kids . Add ( gfd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gfd );
}

public override string yyname { get { return "GlobalDefinitions"; }}
public override int yynum { get { return 97; }}
public GlobalDefinitions(Parser yyp):base(yyp){}}
//%+GlobalVariableDeclaration+98
public class GlobalVariableDeclaration : SYMBOL{
 public  GlobalVariableDeclaration (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  GlobalVariableDeclaration (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}

public override string yyname { get { return "GlobalVariableDeclaration"; }}
public override int yynum { get { return 98; }}
public GlobalVariableDeclaration(Parser yyp):base(yyp){}}
//%+GlobalFunctionDefinition+99
public class GlobalFunctionDefinition : SYMBOL{
 private  string  m_returnType ;
 private  string  m_name ;
 public  GlobalFunctionDefinition (Parser yyp, string  returnType , string  name , ArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_returnType = returnType ;
 m_name = name ;
 kids . Add ( adl );
 kids . Add ( cs );
}
 public  string  ReturnType { get { return  m_returnType ;
}
 set { m_returnType = value ;
}
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "GlobalFunctionDefinition"; }}
public override int yynum { get { return 99; }}
public GlobalFunctionDefinition(Parser yyp):base(yyp){}}
//%+States+100
public class States : SYMBOL{
 public  States (Parser yyp, State  ds ):base(((LSLSyntax
)yyp)){ kids . Add ( ds );
}
 public  States (Parser yyp, States  s , State  us ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
 kids . Add ( us );
}

public override string yyname { get { return "States"; }}
public override int yynum { get { return 100; }}
public States(Parser yyp):base(yyp){}}
//%+State+101
public class State : SYMBOL{
 private  string  m_name ;
 public  State (Parser yyp, string  name , StateBody  sb ):base(((LSLSyntax
)yyp)){ m_name = name ;
 while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
}
 public  override  string  ToString (){ return "STATE<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "State"; }}
public override int yynum { get { return 101; }}
public State(Parser yyp):base(yyp){}}
//%+StateBody+102
public class StateBody : SYMBOL{
 public  StateBody (Parser yyp, StateBody  sb , StateEvent  se ):base(((LSLSyntax
)yyp)){ while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
 kids . Add ( se );
}
 public  StateBody (Parser yyp, StateEvent  se ):base(((LSLSyntax
)yyp)){ kids . Add ( se );
}

public override string yyname { get { return "StateBody"; }}
public override int yynum { get { return 102; }}
public StateBody(Parser yyp):base(yyp){}}
//%+StateEvent+103
public class StateEvent : SYMBOL{
 private  string  m_name ;
 public  StateEvent (Parser yyp, string  name , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 kids . Add ( cs );
}
 public  StateEvent (Parser yyp, string  name , ArgumentDeclarationList  dal , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 if (0< dal . kids . Count ) kids . Add ( dal );
 kids . Add ( cs );
}
 public  override  string  ToString (){ return "EVENT<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "StateEvent"; }}
public override int yynum { get { return 103; }}
public StateEvent(Parser yyp):base(yyp){}}
//%+ArgumentDeclarationList+104
public class ArgumentDeclarationList : SYMBOL{
 public  ArgumentDeclarationList (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  ArgumentDeclarationList (Parser yyp, ArgumentDeclarationList  adl , Declaration  d ):base(((LSLSyntax
)yyp)){ while (0< adl . kids . Count ) kids . Add ( adl . kids . Pop ());
 kids . Add ( d );
}

public override string yyname { get { return "ArgumentDeclarationList"; }}
public override int yynum { get { return 104; }}
public ArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+Declaration+105
public class Declaration : SYMBOL{
 private  string  m_datatype ;
 private  string  m_id ;
 public  Declaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp)){ m_datatype = type ;
 m_id = id ;
}
 public  override  string  ToString (){ return "Declaration<"+ m_datatype +":"+ m_id +">";
}
 public  string  Datatype { get { return  m_datatype ;
}
 set { m_datatype = value ;
}
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "Declaration"; }}
public override int yynum { get { return 105; }}
public Declaration(Parser yyp):base(yyp){}}
//%+Typename+106
public class Typename : SYMBOL{
 public  string  yytext ;
 public  Typename (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Typename"; }}
public override int yynum { get { return 106; }}
public Typename(Parser yyp):base(yyp){}}
//%+Event+107
public class Event : SYMBOL{
 public  string  yytext ;
 public  Event (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Event"; }}
public override int yynum { get { return 107; }}
public Event(Parser yyp):base(yyp){}}
//%+CompoundStatement+108
public class CompoundStatement : SYMBOL{
 public  CompoundStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  CompoundStatement (Parser yyp, StatementList  sl ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
}

public override string yyname { get { return "CompoundStatement"; }}
public override int yynum { get { return 108; }}
}
//%+StatementList+109
public class StatementList : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if ( s . kids . Top  is  IfStatement || s . kids . Top  is  WhileStatement || s . kids . Top  is  DoWhileStatement || s . kids . Top  is  ForLoop ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  StatementList (Parser yyp, Statement  s ):base(((LSLSyntax
)yyp)){ AddStatement ( s );
}
 public  StatementList (Parser yyp, StatementList  sl , Statement  s ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
 AddStatement ( s );
}

public override string yyname { get { return "StatementList"; }}
public override int yynum { get { return 109; }}
public StatementList(Parser yyp):base(yyp){}}
//%+Statement+110
public class Statement : SYMBOL{
 public  Statement (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  Statement (Parser yyp, CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ kids . Add ( cs );
}
 public  Statement (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}
 public  Statement (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}
 public  Statement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  Statement (Parser yyp, ReturnStatement  rs ):base(((LSLSyntax
)yyp)){ kids . Add ( rs );
}
 public  Statement (Parser yyp, StateChange  sc ):base(((LSLSyntax
)yyp)){ kids . Add ( sc );
}
 public  Statement (Parser yyp, IfStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, WhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, DoWhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, ForLoop  fl ):base(((LSLSyntax
)yyp)){ kids . Add ( fl );
}
 public  Statement (Parser yyp, JumpLabel  jl ):base(((LSLSyntax
)yyp)){ kids . Add ( jl );
}
 public  Statement (Parser yyp, JumpStatement  js ):base(((LSLSyntax
)yyp)){ kids . Add ( js );
}
 public  Statement (Parser yyp, EmptyStatement  es ):base(((LSLSyntax
)yyp)){ kids . Add ( es );
}

public override string yyname { get { return "Statement"; }}
public override int yynum { get { return 110; }}
public Statement(Parser yyp):base(yyp){}}
//%+EmptyStatement+111
public class EmptyStatement : SYMBOL{
 public  EmptyStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  override  string  ToString (){ return  base . ToString ();
}

public override string yyname { get { return "EmptyStatement"; }}
public override int yynum { get { return 111; }}
}
//%+Assignment+112
public class Assignment : SYMBOL{
 protected  string  m_assignmentType ;
 public  Assignment (Parser yyp, SYMBOL  lhs , SYMBOL  rhs , string  assignmentType ):base(((LSLSyntax
)yyp)){ m_assignmentType = assignmentType ;
 kids . Add ( lhs );
 if ( rhs  is  ConstantExpression ) while (0< rhs . kids . Count ) kids . Add ( rhs . kids . Pop ());
 else  kids . Add ( rhs );
}
 public  Assignment (Parser yyp, SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ m_assignmentType = sa . AssignmentType ;
 while (0< sa . kids . Count ) kids . Add ( sa . kids . Pop ());
}
 public  string  AssignmentType { get { return  m_assignmentType ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_assignmentType +">";
}

public override string yyname { get { return "Assignment"; }}
public override int yynum { get { return 112; }}
public Assignment(Parser yyp):base(yyp){}}
//%+SimpleAssignment+113
public class SimpleAssignment : Assignment{
 public  SimpleAssignment (Parser yyp, SYMBOL  lhs , SYMBOL  rhs , string  assignmentType ):base(((LSLSyntax
)yyp)){ m_assignmentType = assignmentType ;
 kids . Add ( lhs );
 if ( rhs  is  ConstantExpression ) while (0< rhs . kids . Count ) kids . Add ( rhs . kids . Pop ());
 else  kids . Add ( rhs );
}

public override string yyname { get { return "SimpleAssignment"; }}
public override int yynum { get { return 113; }}
public SimpleAssignment(Parser yyp):base(yyp){}}
//%+ReturnStatement+114
public class ReturnStatement : SYMBOL{
 public  ReturnStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  ReturnStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ReturnStatement"; }}
public override int yynum { get { return 114; }}
}
//%+JumpLabel+115
public class JumpLabel : SYMBOL{
 private  string  m_labelName ;
 public  JumpLabel (Parser yyp, string  labelName ):base(((LSLSyntax
)yyp)){ m_labelName = labelName ;
}
 public  string  LabelName { get { return  m_labelName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_labelName +">";
}

public override string yyname { get { return "JumpLabel"; }}
public override int yynum { get { return 115; }}
public JumpLabel(Parser yyp):base(yyp){}}
//%+JumpStatement+116
public class JumpStatement : SYMBOL{
 private  string  m_targetName ;
 public  JumpStatement (Parser yyp, string  targetName ):base(((LSLSyntax
)yyp)){ m_targetName = targetName ;
}
 public  string  TargetName { get { return  m_targetName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_targetName +">";
}

public override string yyname { get { return "JumpStatement"; }}
public override int yynum { get { return 116; }}
public JumpStatement(Parser yyp):base(yyp){}}
//%+StateChange+117
public class StateChange : SYMBOL{
 private  string  m_newState ;
 public  StateChange (Parser yyp, string  newState ):base(((LSLSyntax
)yyp)){ m_newState = newState ;
}
 public  string  NewState { get { return  m_newState ;
}
}

public override string yyname { get { return "StateChange"; }}
public override int yynum { get { return 117; }}
public StateChange(Parser yyp):base(yyp){}}
//%+IfStatement+118
public class IfStatement : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if (0< s . kids . Count && s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  IfStatement (Parser yyp, SYMBOL  s , Statement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 AddStatement ( ifs );
}
 public  IfStatement (Parser yyp, SYMBOL  s , Statement  ifs , Statement  es ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 AddStatement ( ifs );
 if (0< es . kids . Count && es . kids . Top  is  IfStatement ) kids . Add ( es . kids . Pop ());
 else  AddStatement ( es );
}

public override string yyname { get { return "IfStatement"; }}
public override int yynum { get { return 118; }}
public IfStatement(Parser yyp):base(yyp){}}
//%+WhileStatement+119
public class WhileStatement : SYMBOL{
 public  WhileStatement (Parser yyp, SYMBOL  s , Statement  st ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 if (0< st . kids . Count && st . kids . Top  is  CompoundStatement ) kids . Add ( st . kids . Pop ());
 else  kids . Add ( st );
}

public override string yyname { get { return "WhileStatement"; }}
public override int yynum { get { return 119; }}
public WhileStatement(Parser yyp):base(yyp){}}
//%+DoWhileStatement+120
public class DoWhileStatement : SYMBOL{
 public  DoWhileStatement (Parser yyp, SYMBOL  s , Statement  st ):base(((LSLSyntax
)yyp)){ if (0< st . kids . Count && st . kids . Top  is  CompoundStatement ) kids . Add ( st . kids . Pop ());
 else  kids . Add ( st );
 kids . Add ( s );
}

public override string yyname { get { return "DoWhileStatement"; }}
public override int yynum { get { return 120; }}
public DoWhileStatement(Parser yyp):base(yyp){}}
//%+ForLoop+121
public class ForLoop : SYMBOL{
 public  ForLoop (Parser yyp, ForLoopStatement  flsa , Expression  e , ForLoopStatement  flsb , Statement  s ):base(((LSLSyntax
)yyp)){ kids . Add ( flsa );
 kids . Add ( e );
 kids . Add ( flsb );
 if (0< s . kids . Count && s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}

public override string yyname { get { return "ForLoop"; }}
public override int yynum { get { return 121; }}
public ForLoop(Parser yyp):base(yyp){}}
//%+ForLoopStatement+122
public class ForLoopStatement : SYMBOL{
 public  ForLoopStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ kids . Add ( sa );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , Expression  e ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( sa );
}

public override string yyname { get { return "ForLoopStatement"; }}
public override int yynum { get { return 122; }}
public ForLoopStatement(Parser yyp):base(yyp){}}
//%+FunctionCall+123
public class FunctionCall : SYMBOL{
 private  string  m_id ;
 public  FunctionCall (Parser yyp, string  id , ArgumentList  al ):base(((LSLSyntax
)yyp)){ m_id = id ;
 kids . Add ( al );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_id +">";
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "FunctionCall"; }}
public override int yynum { get { return 123; }}
public FunctionCall(Parser yyp):base(yyp){}}
//%+ArgumentList+124
public class ArgumentList : SYMBOL{
 public  ArgumentList (Parser yyp, Argument  a ):base(((LSLSyntax
)yyp)){ AddArgument ( a );
}
 public  ArgumentList (Parser yyp, ArgumentList  al , Argument  a ):base(((LSLSyntax
)yyp)){ while (0< al . kids . Count ) kids . Add ( al . kids . Pop ());
 AddArgument ( a );
}
 private  void  AddArgument ( Argument  a ){ if ( a  is  ExpressionArgument ) while (0< a . kids . Count ) kids . Add ( a . kids . Pop ());
 else  kids . Add ( a );
}

public override string yyname { get { return "ArgumentList"; }}
public override int yynum { get { return 124; }}
public ArgumentList(Parser yyp):base(yyp){}}
//%+Argument+125
public class Argument : SYMBOL{
public override string yyname { get { return "Argument"; }}
public override int yynum { get { return 125; }}
public Argument(Parser yyp):base(yyp){}}
//%+ExpressionArgument+126
public class ExpressionArgument : Argument{
 public  ExpressionArgument (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ExpressionArgument"; }}
public override int yynum { get { return 126; }}
public ExpressionArgument(Parser yyp):base(yyp){}}
//%+Constant+127
public class Constant : SYMBOL{
 private  string  m_type ;
 private  string  m_val ;
 public  Constant (Parser yyp, string  type , string  val ):base(((LSLSyntax
)yyp)){ m_type = type ;
 m_val = val ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_type +":"+ m_val +">";
}
 public  string  Value { get { return  m_val ;
}
 set { m_val = value ;
}
}
 public  string  Type { get { return  m_type ;
}
 set { m_type = value ;
}
}

public override string yyname { get { return "Constant"; }}
public override int yynum { get { return 127; }}
public Constant(Parser yyp):base(yyp){}}
//%+VectorConstant+128
public class VectorConstant : Constant{
 public  VectorConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ ):base(((LSLSyntax
)yyp),"vector", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
}

public override string yyname { get { return "VectorConstant"; }}
public override int yynum { get { return 128; }}
public VectorConstant(Parser yyp):base(yyp){}}
//%+RotationConstant+129
public class RotationConstant : Constant{
 public  RotationConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ , Expression  valS ):base(((LSLSyntax
)yyp),"rotation", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
 kids . Add ( valS );
}

public override string yyname { get { return "RotationConstant"; }}
public override int yynum { get { return 129; }}
public RotationConstant(Parser yyp):base(yyp){}}
//%+ListConstant+130
public class ListConstant : Constant{
 public  ListConstant (Parser yyp, ArgumentList  al ):base(((LSLSyntax
)yyp),"list", null ){ kids . Add ( al );
}

public override string yyname { get { return "ListConstant"; }}
public override int yynum { get { return 130; }}
public ListConstant(Parser yyp):base(yyp){}}
//%+Expression+131
public class Expression : SYMBOL{
 protected  void  AddExpression ( Expression  e ){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "Expression"; }}
public override int yynum { get { return 131; }}
public Expression(Parser yyp):base(yyp){}}
//%+ConstantExpression+132
public class ConstantExpression : Expression{
 public  ConstantExpression (Parser yyp, Constant  c ):base(((LSLSyntax
)yyp)){ kids . Add ( c );
}

public override string yyname { get { return "ConstantExpression"; }}
public override int yynum { get { return 132; }}
public ConstantExpression(Parser yyp):base(yyp){}}
//%+IdentExpression+133
public class IdentExpression : Expression{
 protected  string  m_name ;
 public  IdentExpression (Parser yyp, string  name ):base(((LSLSyntax
)yyp)){ m_name = name ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "IdentExpression"; }}
public override int yynum { get { return 133; }}
public IdentExpression(Parser yyp):base(yyp){}}
//%+IdentDotExpression+134
public class IdentDotExpression : IdentExpression{
 private  string  m_member ;
 public  IdentDotExpression (Parser yyp, string  name , string  member ):base(((LSLSyntax
)yyp), name ){ m_member = member ;
}
 public  override  string  ToString (){ string  baseToString = base . ToString ();
 return  baseToString . Substring (0, baseToString . Length -1)+"."+ m_member +">";
}
 public  string  Member { get { return  m_member ;
}
}

public override string yyname { get { return "IdentDotExpression"; }}
public override int yynum { get { return 134; }}
public IdentDotExpression(Parser yyp):base(yyp){}}
//%+FunctionCallExpression+135
public class FunctionCallExpression : Expression{
 public  FunctionCallExpression (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}

public override string yyname { get { return "FunctionCallExpression"; }}
public override int yynum { get { return 135; }}
public FunctionCallExpression(Parser yyp):base(yyp){}}
//%+BinaryExpression+136
public class BinaryExpression : Expression{
 private  string  m_expressionSymbol ;
 public  BinaryExpression (Parser yyp, Expression  lhs , Expression  rhs , string  expressionSymbol ):base(((LSLSyntax
)yyp)){ m_expressionSymbol = expressionSymbol ;
 AddExpression ( lhs );
 AddExpression ( rhs );
}
 public  string  ExpressionSymbol { get { return  m_expressionSymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_expressionSymbol +">";
}

public override string yyname { get { return "BinaryExpression"; }}
public override int yynum { get { return 136; }}
public BinaryExpression(Parser yyp):base(yyp){}}
//%+UnaryExpression+137
public class UnaryExpression : Expression{
 private  string  m_unarySymbol ;
 public  UnaryExpression (Parser yyp, string  unarySymbol , Expression  e ):base(((LSLSyntax
)yyp)){ m_unarySymbol = unarySymbol ;
 AddExpression ( e );
}
 public  string  UnarySymbol { get { return  m_unarySymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_unarySymbol +">";
}

public override string yyname { get { return "UnaryExpression"; }}
public override int yynum { get { return 137; }}
public UnaryExpression(Parser yyp):base(yyp){}}
//%+TypecastExpression+138
public class TypecastExpression : Expression{
 private  string  m_typecastType ;
 public  TypecastExpression (Parser yyp, string  typecastType , SYMBOL  rhs ):base(((LSLSyntax
)yyp)){ m_typecastType = typecastType ;
 kids . Add ( rhs );
}
 public  string  TypecastType { get { return  m_typecastType ;
}
 set { m_typecastType = value ;
}
}

public override string yyname { get { return "TypecastExpression"; }}
public override int yynum { get { return 138; }}
public TypecastExpression(Parser yyp):base(yyp){}}
//%+ParenthesisExpression+139
public class ParenthesisExpression : Expression{
 public  ParenthesisExpression (Parser yyp, SYMBOL  s ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
}

public override string yyname { get { return "ParenthesisExpression"; }}
public override int yynum { get { return 139; }}
public ParenthesisExpression(Parser yyp):base(yyp){}}
//%+IncrementDecrementExpression+140
public class IncrementDecrementExpression : Expression{
 private  string  m_name ;
 private  string  m_operation ;
 private  bool  m_postOperation ;
 public  IncrementDecrementExpression (Parser yyp, string  name , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_name = name ;
 m_operation = operation ;
 m_postOperation = postOperation ;
}
 public  IncrementDecrementExpression (Parser yyp, IdentDotExpression  ide , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_operation = operation ;
 m_postOperation = postOperation ;
 kids . Add ( ide );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+( m_postOperation ? m_name + m_operation : m_operation + m_name )+">";
}
 public  string  Name { get { return  m_name ;
}
}
 public  string  Operation { get { return  m_operation ;
}
}
 public  bool  PostOperation { get { return  m_postOperation ;
}
}

public override string yyname { get { return "IncrementDecrementExpression"; }}
public override int yynum { get { return 140; }}
public IncrementDecrementExpression(Parser yyp):base(yyp){}}

public class LSLProgramRoot_1 : LSLProgramRoot {
  public LSLProgramRoot_1(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((States)(yyq.StackAt(0).m_value))
	){}}

public class LSLProgramRoot_2 : LSLProgramRoot {
  public LSLProgramRoot_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_1 : GlobalDefinitions {
  public GlobalDefinitions_1(Parser yyq):base(yyq,
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_2 : GlobalDefinitions {
  public GlobalDefinitions_2(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_3 : GlobalDefinitions {
  public GlobalDefinitions_3(Parser yyq):base(yyq,
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_4 : GlobalDefinitions {
  public GlobalDefinitions_4(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalVariableDeclaration_1 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class GlobalVariableDeclaration_2 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_2(Parser yyq):base(yyq,new Assignment(((LSLSyntax
)yyq), 
	((Declaration)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	, 
	((EQUALS)(yyq.StackAt(2).m_value))
	.yytext)){}}

public class GlobalFunctionDefinition_1 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_1(Parser yyq):base(yyq,"void", 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class GlobalFunctionDefinition_2 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class States_1 : States {
  public States_1(Parser yyq):base(yyq,
	((State)(yyq.StackAt(0).m_value))
	){}}

public class States_2 : States {
  public States_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(1).m_value))
	, 
	((State)(yyq.StackAt(0).m_value))
	){}}

public class State_1 : State {
  public State_1(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class State_2 : State {
  public State_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class StateBody_1 : StateBody {
  public StateBody_1(Parser yyq):base(yyq,
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_2 : StateBody {
  public StateBody_2(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateEvent_1 : StateEvent {
  public StateEvent_1(Parser yyq):base(yyq,
	((Event)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_1 : ArgumentDeclarationList {
  public ArgumentDeclarationList_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_2 : ArgumentDeclarationList {
  public ArgumentDeclarationList_2(Parser yyq):base(yyq,
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class Declaration_1 : Declaration {
  public Declaration_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class CompoundStatement_1 : CompoundStatement {
  public CompoundStatement_1(Parser yyq):base(yyq){}}

public class CompoundStatement_2 : CompoundStatement {
  public CompoundStatement_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	){}}

public class StatementList_1 : StatementList {
  public StatementList_1(Parser yyq):base(yyq,
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class StatementList_2 : StatementList {
  public StatementList_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class EmptyStatement_1 : EmptyStatement {
  public EmptyStatement_1(Parser yyq):base(yyq){}}

public class Statement_1 : Statement {
  public Statement_1(Parser yyq):base(yyq,
	((EmptyStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_2 : Statement {
  public Statement_2(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class Statement_3 : Statement {
  public Statement_3(Parser yyq):base(yyq,
	((Assignment)(yyq.StackAt(1).m_value))
	){}}

public class Statement_4 : Statement {
  public Statement_4(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class Statement_5 : Statement {
  public Statement_5(Parser yyq):base(yyq,
	((ReturnStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_6 : Statement {
  public Statement_6(Parser yyq):base(yyq,
	((JumpLabel)(yyq.StackAt(1).m_value))
	){}}

public class Statement_7 : Statement {
  public Statement_7(Parser yyq):base(yyq,
	((JumpStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_8 : Statement {
  public Statement_8(Parser yyq):base(yyq,
	((StateChange)(yyq.StackAt(1).m_value))
	){}}

public class Statement_9 : Statement {
  public Statement_9(Parser yyq):base(yyq,
	((IfStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_10 : Statement {
  public Statement_10(Parser yyq):base(yyq,
	((WhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_11 : Statement {
  public Statement_11(Parser yyq):base(yyq,
	((DoWhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_12 : Statement {
  public Statement_12(Parser yyq):base(yyq,
	((ForLoop)(yyq.StackAt(0).m_value))
	){}}

public class Statement_13 : Statement {
  public Statement_13(Parser yyq):base(yyq,
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class JumpLabel_1 : JumpLabel {
  public JumpLabel_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class JumpStatement_1 : JumpStatement {
  public JumpStatement_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_1 : StateChange {
  public StateChange_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_2 : StateChange {
  public StateChange_2(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IfStatement_1 : IfStatement {
  public IfStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_2 : IfStatement {
  public IfStatement_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((Statement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_3 : IfStatement {
  public IfStatement_3(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_4 : IfStatement {
  public IfStatement_4(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(4).m_value))
	, 
	((Statement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class WhileStatement_1 : WhileStatement {
  public WhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class WhileStatement_2 : WhileStatement {
  public WhileStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class DoWhileStatement_1 : DoWhileStatement {
  public DoWhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(5).m_value))
	){}}

public class DoWhileStatement_2 : DoWhileStatement {
  public DoWhileStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(5).m_value))
	){}}

public class ForLoop_1 : ForLoop {
  public ForLoop_1(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(6).m_value))
	, 
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_1 : ForLoopStatement {
  public ForLoopStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_2 : ForLoopStatement {
  public ForLoopStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_3 : ForLoopStatement {
  public ForLoopStatement_3(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_4 : ForLoopStatement {
  public ForLoopStatement_4(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class Assignment_1 : Assignment {
  public Assignment_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_2 : Assignment {
  public Assignment_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class SimpleAssignment_1 : SimpleAssignment {
  public SimpleAssignment_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_2 : SimpleAssignment {
  public SimpleAssignment_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_3 : SimpleAssignment {
  public SimpleAssignment_3(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_4 : SimpleAssignment {
  public SimpleAssignment_4(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_5 : SimpleAssignment {
  public SimpleAssignment_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_6 : SimpleAssignment {
  public SimpleAssignment_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_7 : SimpleAssignment {
  public SimpleAssignment_7(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_8 : SimpleAssignment {
  public SimpleAssignment_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_9 : SimpleAssignment {
  public SimpleAssignment_9(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_10 : SimpleAssignment {
  public SimpleAssignment_10(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_11 : SimpleAssignment {
  public SimpleAssignment_11(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_12 : SimpleAssignment {
  public SimpleAssignment_12(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_13 : SimpleAssignment {
  public SimpleAssignment_13(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_14 : SimpleAssignment {
  public SimpleAssignment_14(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_15 : SimpleAssignment {
  public SimpleAssignment_15(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_16 : SimpleAssignment {
  public SimpleAssignment_16(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_17 : SimpleAssignment {
  public SimpleAssignment_17(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_18 : SimpleAssignment {
  public SimpleAssignment_18(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_19 : SimpleAssignment {
  public SimpleAssignment_19(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_20 : SimpleAssignment {
  public SimpleAssignment_20(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_21 : SimpleAssignment {
  public SimpleAssignment_21(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_22 : SimpleAssignment {
  public SimpleAssignment_22(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_23 : SimpleAssignment {
  public SimpleAssignment_23(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_24 : SimpleAssignment {
  public SimpleAssignment_24(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class ReturnStatement_1 : ReturnStatement {
  public ReturnStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ReturnStatement_2 : ReturnStatement {
  public ReturnStatement_2(Parser yyq):base(yyq){}}

public class Constant_1 : Constant {
  public Constant_1(Parser yyq):base(yyq,"integer", 
	((INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_2 : Constant {
  public Constant_2(Parser yyq):base(yyq,"integer", 
	((HEX_INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_3 : Constant {
  public Constant_3(Parser yyq):base(yyq,"float", 
	((FLOAT_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_4 : Constant {
  public Constant_4(Parser yyq):base(yyq,"string", 
	((STRING_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class ListConstant_1 : ListConstant {
  public ListConstant_1(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class VectorConstant_1 : VectorConstant {
  public VectorConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class RotationConstant_1 : RotationConstant {
  public RotationConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(7).m_value))
	, 
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class ConstantExpression_1 : ConstantExpression {
  public ConstantExpression_1(Parser yyq):base(yyq,
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class IdentExpression_1 : IdentExpression {
  public IdentExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IdentDotExpression_1 : IdentDotExpression {
  public IdentDotExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IncrementDecrementExpression_1 : IncrementDecrementExpression {
  public IncrementDecrementExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_2 : IncrementDecrementExpression {
  public IncrementDecrementExpression_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_3 : IncrementDecrementExpression {
  public IncrementDecrementExpression_3(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_4 : IncrementDecrementExpression {
  public IncrementDecrementExpression_4(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_5 : IncrementDecrementExpression {
  public IncrementDecrementExpression_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_6 : IncrementDecrementExpression {
  public IncrementDecrementExpression_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_7 : IncrementDecrementExpression {
  public IncrementDecrementExpression_7(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_8 : IncrementDecrementExpression {
  public IncrementDecrementExpression_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class FunctionCallExpression_1 : FunctionCallExpression {
  public FunctionCallExpression_1(Parser yyq):base(yyq,
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class BinaryExpression_1 : BinaryExpression {
  public BinaryExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_2 : BinaryExpression {
  public BinaryExpression_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_3 : BinaryExpression {
  public BinaryExpression_3(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_4 : BinaryExpression {
  public BinaryExpression_4(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_5 : BinaryExpression {
  public BinaryExpression_5(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_6 : BinaryExpression {
  public BinaryExpression_6(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_7 : BinaryExpression {
  public BinaryExpression_7(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_8 : BinaryExpression {
  public BinaryExpression_8(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((CARET)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_9 : BinaryExpression {
  public BinaryExpression_9(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_10 : BinaryExpression {
  public BinaryExpression_10(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_11 : BinaryExpression {
  public BinaryExpression_11(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_12 : BinaryExpression {
  public BinaryExpression_12(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EXCLAMATION_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_13 : BinaryExpression {
  public BinaryExpression_13(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LESS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_14 : BinaryExpression {
  public BinaryExpression_14(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((GREATER_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_15 : BinaryExpression {
  public BinaryExpression_15(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP_AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_16 : BinaryExpression {
  public BinaryExpression_16(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE_STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_17 : BinaryExpression {
  public BinaryExpression_17(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_18 : BinaryExpression {
  public BinaryExpression_18(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class UnaryExpression_1 : UnaryExpression {
  public UnaryExpression_1(Parser yyq):base(yyq,
	((EXCLAMATION)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_2 : UnaryExpression {
  public UnaryExpression_2(Parser yyq):base(yyq,
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_3 : UnaryExpression {
  public UnaryExpression_3(Parser yyq):base(yyq,
	((TILDE)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ParenthesisExpression_1 : ParenthesisExpression {
  public ParenthesisExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class ParenthesisExpression_2 : ParenthesisExpression {
  public ParenthesisExpression_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(1).m_value))
	){}}

public class TypecastExpression_1 : TypecastExpression {
  public TypecastExpression_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_2 : TypecastExpression {
  public TypecastExpression_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, new IdentExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_3 : TypecastExpression {
  public TypecastExpression_3(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_4 : TypecastExpression {
  public TypecastExpression_4(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_5 : TypecastExpression {
  public TypecastExpression_5(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_6 : TypecastExpression {
  public TypecastExpression_6(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_7 : TypecastExpression {
  public TypecastExpression_7(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_8 : TypecastExpression {
  public TypecastExpression_8(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_9 : TypecastExpression {
  public TypecastExpression_9(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class FunctionCall_1 : FunctionCall {
  public FunctionCall_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class ArgumentList_1 : ArgumentList {
  public ArgumentList_1(Parser yyq):base(yyq,
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentList_2 : ArgumentList {
  public ArgumentList_2(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(2).m_value))
	, 
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ExpressionArgument_1 : ExpressionArgument {
  public ExpressionArgument_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class Typename_1 : Typename {
  public Typename_1(Parser yyq):base(yyq,
	((INTEGER_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_2 : Typename {
  public Typename_2(Parser yyq):base(yyq,
	((FLOAT_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_3 : Typename {
  public Typename_3(Parser yyq):base(yyq,
	((STRING_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_4 : Typename {
  public Typename_4(Parser yyq):base(yyq,
	((KEY_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_5 : Typename {
  public Typename_5(Parser yyq):base(yyq,
	((VECTOR_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_6 : Typename {
  public Typename_6(Parser yyq):base(yyq,
	((ROTATION_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_7 : Typename {
  public Typename_7(Parser yyq):base(yyq,
	((LIST_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_1 : Event {
  public Event_1(Parser yyq):base(yyq,
	((AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_2 : Event {
  public Event_2(Parser yyq):base(yyq,
	((AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_3 : Event {
  public Event_3(Parser yyq):base(yyq,
	((ATTACH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_4 : Event {
  public Event_4(Parser yyq):base(yyq,
	((CHANGED_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_5 : Event {
  public Event_5(Parser yyq):base(yyq,
	((COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_6 : Event {
  public Event_6(Parser yyq):base(yyq,
	((COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_7 : Event {
  public Event_7(Parser yyq):base(yyq,
	((COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_8 : Event {
  public Event_8(Parser yyq):base(yyq,
	((CONTROL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_9 : Event {
  public Event_9(Parser yyq):base(yyq,
	((DATASERVER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_10 : Event {
  public Event_10(Parser yyq):base(yyq,
	((EMAIL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_11 : Event {
  public Event_11(Parser yyq):base(yyq,
	((HTTP_RESPONSE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_12 : Event {
  public Event_12(Parser yyq):base(yyq,
	((LAND_COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_13 : Event {
  public Event_13(Parser yyq):base(yyq,
	((LAND_COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_14 : Event {
  public Event_14(Parser yyq):base(yyq,
	((LAND_COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_15 : Event {
  public Event_15(Parser yyq):base(yyq,
	((LINK_MESSAGE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_16 : Event {
  public Event_16(Parser yyq):base(yyq,
	((LISTEN_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_17 : Event {
  public Event_17(Parser yyq):base(yyq,
	((MONEY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_18 : Event {
  public Event_18(Parser yyq):base(yyq,
	((MOVING_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_19 : Event {
  public Event_19(Parser yyq):base(yyq,
	((MOVING_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_20 : Event {
  public Event_20(Parser yyq):base(yyq,
	((NO_SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_21 : Event {
  public Event_21(Parser yyq):base(yyq,
	((NOT_AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_22 : Event {
  public Event_22(Parser yyq):base(yyq,
	((NOT_AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_23 : Event {
  public Event_23(Parser yyq):base(yyq,
	((OBJECT_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_24 : Event {
  public Event_24(Parser yyq):base(yyq,
	((ON_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_25 : Event {
  public Event_25(Parser yyq):base(yyq,
	((REMOTE_DATA_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_26 : Event {
  public Event_26(Parser yyq):base(yyq,
	((RUN_TIME_PERMISSIONS_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_27 : Event {
  public Event_27(Parser yyq):base(yyq,
	((SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_28 : Event {
  public Event_28(Parser yyq):base(yyq,
	((STATE_ENTRY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_29 : Event {
  public Event_29(Parser yyq):base(yyq,
	((STATE_EXIT_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_30 : Event {
  public Event_30(Parser yyq):base(yyq,
	((TIMER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_31 : Event {
  public Event_31(Parser yyq):base(yyq,
	((TOUCH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_32 : Event {
  public Event_32(Parser yyq):base(yyq,
	((TOUCH_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_33 : Event {
  public Event_33(Parser yyq):base(yyq,
	((TOUCH_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_34 : Event {
  public Event_34(Parser yyq):base(yyq,
	((HTTP_REQUEST_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}
public class yyLSLSyntax
: YyParser {
  public override object Action(Parser yyq,SYMBOL yysym, int yyact) {
    switch(yyact) {
	 case -1: break; //// keep compiler happy
}  return null; }

public class ArgumentDeclarationList_3 : ArgumentDeclarationList {
  public ArgumentDeclarationList_3(Parser yyq):base(yyq){}}

public class ArgumentList_3 : ArgumentList {
  public ArgumentList_3(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_4 : ArgumentDeclarationList {
  public ArgumentDeclarationList_4(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_5 : ArgumentDeclarationList {
  public ArgumentDeclarationList_5(Parser yyq):base(yyq){}}

public class ArgumentList_4 : ArgumentList {
  public ArgumentList_4(Parser yyq):base(yyq){}}
public yyLSLSyntax
():base() { arr = new int[] { 
101,4,6,52,0,
46,0,53,0,102,
20,103,4,28,76,
0,83,0,76,0,
80,0,114,0,111,
0,103,0,114,0,
97,0,109,0,82,
0,111,0,111,0,
116,0,1,96,1,
2,104,18,1,2614,
102,2,0,105,5,
314,1,0,106,18,
1,0,0,2,0,
1,1,107,18,1,
1,108,20,109,4,
18,76,0,73,0,
83,0,84,0,95,
0,84,0,89,0,
80,0,69,0,1,
57,1,1,2,0,
1,2,110,18,1,
2,111,20,112,4,
26,82,0,79,0,
84,0,65,0,84,
0,73,0,79,0,
78,0,95,0,84,
0,89,0,80,0,
69,0,1,56,1,
1,2,0,1,3,
113,18,1,3,114,
20,115,4,22,86,
0,69,0,67,0,
84,0,79,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,55,1,1,
2,0,1,4,116,
18,1,4,117,20,
118,4,16,75,0,
69,0,89,0,95,
0,84,0,89,0,
80,0,69,0,1,
54,1,1,2,0,
1,5,119,18,1,
5,120,20,121,4,
22,83,0,84,0,
82,0,73,0,78,
0,71,0,95,0,
84,0,89,0,80,
0,69,0,1,53,
1,1,2,0,1,
6,122,18,1,6,
123,20,124,4,20,
70,0,76,0,79,
0,65,0,84,0,
95,0,84,0,89,
0,80,0,69,0,
1,52,1,1,2,
0,1,7,125,18,
1,7,126,20,127,
4,24,73,0,78,
0,84,0,69,0,
71,0,69,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,51,1,1,
2,0,1,8,128,
18,1,8,129,20,
130,4,16,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,1,
106,1,2,2,0,
1,9,131,18,1,
9,132,20,133,4,
10,73,0,68,0,
69,0,78,0,84,
0,1,92,1,1,
2,0,1,10,134,
18,1,10,135,20,
136,4,20,76,0,
69,0,70,0,84,
0,95,0,80,0,
65,0,82,0,69,
0,78,0,1,16,
1,1,2,0,1,
18,137,18,1,18,
129,2,0,1,19,
138,18,1,19,132,
2,0,1,20,139,
18,1,20,140,20,
141,4,46,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,1,
104,1,2,2,0,
1,21,142,18,1,
21,143,20,144,4,
10,67,0,79,0,
77,0,77,0,65,
0,1,14,1,1,
2,0,1,1694,145,
18,1,1694,146,20,
147,4,32,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,122,1,2,2,
0,1,1695,148,18,
1,1695,143,2,0,
1,30,149,18,1,
30,150,20,151,4,
22,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,1,105,
1,2,2,0,1,
31,152,18,1,31,
153,20,154,4,22,
82,0,73,0,71,
0,72,0,84,0,
95,0,80,0,65,
0,82,0,69,0,
78,0,1,17,1,
1,2,0,1,32,
155,18,1,32,156,
20,157,4,20,76,
0,69,0,70,0,
84,0,95,0,66,
0,82,0,65,0,
67,0,69,0,1,
12,1,1,2,0,
1,1114,158,18,1,
1114,132,2,0,1,
1152,159,18,1,1152,
160,20,161,4,32,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,1,113,1,
2,2,0,1,1117,
162,18,1,1117,163,
20,164,4,28,80,
0,69,0,82,0,
67,0,69,0,78,
0,84,0,95,0,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,10,1,
1,2,0,1,40,
165,18,1,40,132,
2,0,1,41,166,
18,1,41,135,2,
0,1,42,167,18,
1,42,168,20,169,
4,20,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,131,1,
2,2,0,1,43,
170,18,1,43,171,
20,172,4,22,82,
0,73,0,71,0,
72,0,84,0,95,
0,83,0,72,0,
73,0,70,0,84,
0,1,41,1,1,
2,0,1,44,173,
18,1,44,132,2,
0,1,1159,174,18,
1,1159,168,2,0,
1,46,175,18,1,
46,176,20,177,4,
12,80,0,69,0,
82,0,73,0,79,
0,68,0,1,24,
1,1,2,0,1,
47,178,18,1,47,
132,2,0,1,48,
179,18,1,48,180,
20,181,4,18,68,
0,69,0,67,0,
82,0,69,0,77,
0,69,0,78,0,
84,0,1,5,1,
1,2,0,1,49,
182,18,1,49,183,
20,184,4,18,73,
0,78,0,67,0,
82,0,69,0,77,
0,69,0,78,0,
84,0,1,4,1,
1,2,0,1,50,
185,18,1,50,180,
2,0,1,51,186,
18,1,51,183,2,
0,1,52,187,18,
1,52,135,2,0,
1,2281,188,18,1,
2281,160,2,0,1,
1730,189,18,1,1730,
160,2,0,1,1731,
190,18,1,1731,191,
20,192,4,18,83,
0,69,0,77,0,
73,0,67,0,79,
0,76,0,79,0,
78,0,1,11,1,
1,2,0,1,61,
193,18,1,61,129,
2,0,1,62,194,
18,1,62,153,2,
0,1,63,195,18,
1,63,132,2,0,
1,65,196,18,1,
65,176,2,0,1,
66,197,18,1,66,
132,2,0,1,67,
198,18,1,67,180,
2,0,1,68,199,
18,1,68,183,2,
0,1,69,200,18,
1,69,180,2,0,
1,70,201,18,1,
70,183,2,0,1,
71,202,18,1,71,
135,2,0,1,73,
203,18,1,73,168,
2,0,1,74,204,
18,1,74,153,2,
0,1,1189,205,18,
1,1189,206,20,207,
4,22,83,0,84,
0,65,0,82,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
8,1,1,2,0,
1,76,208,18,1,
76,209,20,210,4,
20,76,0,69,0,
70,0,84,0,95,
0,83,0,72,0,
73,0,70,0,84,
0,1,40,1,1,
2,0,1,1153,211,
18,1,1153,212,20,
213,4,24,83,0,
76,0,65,0,83,
0,72,0,95,0,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,9,1,
1,2,0,1,79,
214,18,1,79,215,
20,216,4,10,84,
0,73,0,76,0,
68,0,69,0,1,
36,1,1,2,0,
1,1195,217,18,1,
1195,168,2,0,1,
82,218,18,1,82,
168,2,0,1,1123,
219,18,1,1123,168,
2,0,1,85,220,
18,1,85,221,20,
222,4,26,83,0,
84,0,82,0,79,
0,75,0,69,0,
95,0,83,0,84,
0,82,0,79,0,
75,0,69,0,1,
39,1,1,2,0,
1,89,223,18,1,
89,224,20,225,4,
10,77,0,73,0,
78,0,85,0,83,
0,1,19,1,1,
2,0,1,93,226,
18,1,93,168,2,
0,1,97,227,18,
1,97,228,20,229,
4,14,65,0,77,
0,80,0,95,0,
65,0,77,0,80,
0,1,38,1,1,
2,0,1,102,230,
18,1,102,231,20,
232,4,22,69,0,
88,0,67,0,76,
0,65,0,77,0,
65,0,84,0,73,
0,79,0,78,0,
1,37,1,1,2,
0,1,1775,233,18,
1,1775,153,2,0,
1,107,234,18,1,
107,168,2,0,1,
1224,235,18,1,1224,
160,2,0,1,1225,
236,18,1,1225,237,
20,238,4,24,77,
0,73,0,78,0,
85,0,83,0,95,
0,69,0,81,0,
85,0,65,0,76,
0,83,0,1,7,
1,1,2,0,1,
112,239,18,1,112,
240,20,241,4,28,
71,0,82,0,69,
0,65,0,84,0,
69,0,82,0,95,
0,69,0,81,0,
85,0,65,0,76,
0,83,0,1,32,
1,1,2,0,1,
1188,242,18,1,1188,
160,2,0,1,1231,
243,18,1,1231,168,
2,0,1,118,244,
18,1,118,168,2,
0,1,1737,245,18,
1,1737,168,2,0,
1,124,246,18,1,
124,247,20,248,4,
22,76,0,69,0,
83,0,83,0,95,
0,69,0,81,0,
85,0,65,0,76,
0,83,0,1,31,
1,1,2,0,1,
2355,249,18,1,2355,
250,20,251,4,18,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,110,
1,2,2,0,1,
2356,252,18,1,2356,
253,20,254,4,22,
82,0,73,0,71,
0,72,0,84,0,
95,0,66,0,82,
0,65,0,67,0,
69,0,1,13,1,
1,2,0,1,130,
255,18,1,130,168,
2,0,1,1802,256,
18,1,1802,250,2,
0,1,1804,257,18,
1,1804,258,20,259,
4,4,68,0,79,
0,1,44,1,1,
2,0,1,2591,260,
18,1,2591,191,2,
0,1,2363,261,18,
1,2363,262,20,263,
4,34,67,0,111,
0,109,0,112,0,
111,0,117,0,110,
0,100,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,108,1,2,
2,0,1,2364,264,
18,1,2364,150,2,
0,1,137,265,18,
1,137,266,20,267,
4,36,69,0,88,
0,67,0,76,0,
65,0,77,0,65,
0,84,0,73,0,
79,0,78,0,95,
0,69,0,81,0,
85,0,65,0,76,
0,83,0,1,30,
1,1,2,0,1,
2366,268,18,1,2366,
132,2,0,1,2367,
269,18,1,2367,156,
2,0,1,1701,270,
18,1,1701,168,2,
0,1,1756,271,18,
1,1756,191,2,0,
1,2370,272,18,1,
2370,273,20,274,4,
30,84,0,79,0,
85,0,67,0,72,
0,95,0,69,0,
78,0,68,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,90,1,1,
2,0,1,143,275,
18,1,143,168,2,
0,1,2372,276,18,
1,2372,277,20,278,
4,22,84,0,73,
0,77,0,69,0,
82,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
87,1,1,2,0,
1,2373,279,18,1,
2373,280,20,281,4,
32,83,0,84,0,
65,0,84,0,69,
0,95,0,69,0,
88,0,73,0,84,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,86,
1,1,2,0,1,
1260,282,18,1,1260,
160,2,0,1,1261,
283,18,1,1261,284,
20,285,4,22,80,
0,76,0,85,0,
83,0,95,0,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,6,1,1,
2,0,1,2376,286,
18,1,2376,287,20,
288,4,52,82,0,
85,0,78,0,95,
0,84,0,73,0,
77,0,69,0,95,
0,80,0,69,0,
82,0,77,0,73,
0,83,0,83,0,
73,0,79,0,78,
0,83,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,83,1,1,2,
0,1,2377,289,18,
1,2377,290,20,291,
4,34,82,0,69,
0,77,0,79,0,
84,0,69,0,95,
0,68,0,65,0,
84,0,65,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,82,1,1,
2,0,1,2378,292,
18,1,2378,293,20,
294,4,24,79,0,
78,0,95,0,82,
0,69,0,90,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,81,1,
1,2,0,1,151,
295,18,1,151,296,
20,297,4,26,69,
0,81,0,85,0,
65,0,76,0,83,
0,95,0,69,0,
81,0,85,0,65,
0,76,0,83,0,
1,29,1,1,2,
0,1,2380,298,18,
1,2380,299,20,300,
4,38,78,0,79,
0,84,0,95,0,
65,0,84,0,95,
0,84,0,65,0,
82,0,71,0,69,
0,84,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,79,1,1,2,
0,1,1267,301,18,
1,1267,168,2,0,
1,2382,302,18,1,
2382,303,20,304,4,
30,78,0,79,0,
95,0,83,0,69,
0,78,0,83,0,
79,0,82,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,77,1,1,
2,0,1,2383,305,
18,1,2383,306,20,
307,4,36,77,0,
79,0,86,0,73,
0,78,0,71,0,
95,0,83,0,84,
0,65,0,82,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
76,1,1,2,0,
1,2310,308,18,1,
2310,309,20,310,4,
26,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,76,
0,105,0,115,0,
116,0,1,109,1,
2,2,0,1,157,
311,18,1,157,168,
2,0,1,2386,312,
18,1,2386,313,20,
314,4,24,76,0,
73,0,83,0,84,
0,69,0,78,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,73,1,
1,2,0,1,1773,
315,18,1,1773,146,
2,0,1,2388,316,
18,1,2388,317,20,
318,4,52,76,0,
65,0,78,0,68,
0,95,0,67,0,
79,0,76,0,76,
0,73,0,83,0,
73,0,79,0,78,
0,95,0,83,0,
84,0,65,0,82,
0,84,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,71,1,1,2,
0,1,1832,319,18,
1,1832,250,2,0,
1,1833,320,18,1,
1833,321,20,322,4,
10,87,0,72,0,
73,0,76,0,69,
0,1,45,1,1,
2,0,1,1834,323,
18,1,1834,135,2,
0,1,2392,324,18,
1,2392,325,20,326,
4,22,69,0,77,
0,65,0,73,0,
76,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
67,1,1,2,0,
1,2393,327,18,1,
2393,328,20,329,4,
32,68,0,65,0,
84,0,65,0,83,
0,69,0,82,0,
86,0,69,0,82,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,66,
1,1,2,0,1,
166,330,18,1,166,
331,20,332,4,20,
76,0,69,0,70,
0,84,0,95,0,
65,0,78,0,71,
0,76,0,69,0,
1,25,1,1,2,
0,1,2395,333,18,
1,2395,334,20,335,
4,42,67,0,79,
0,76,0,76,0,
73,0,83,0,73,
0,79,0,78,0,
95,0,83,0,84,
0,65,0,82,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
64,1,1,2,0,
1,2396,336,18,1,
2396,337,20,338,4,
38,67,0,79,0,
76,0,76,0,73,
0,83,0,73,0,
79,0,78,0,95,
0,69,0,78,0,
68,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
63,1,1,2,0,
1,1840,339,18,1,
1840,168,2,0,1,
2398,340,18,1,2398,
341,20,342,4,26,
67,0,72,0,65,
0,78,0,71,0,
69,0,68,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,61,1,1,
2,0,1,2399,343,
18,1,2399,344,20,
345,4,24,65,0,
84,0,84,0,65,
0,67,0,72,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,60,1,
1,2,0,1,172,
346,18,1,172,168,
2,0,1,2401,347,
18,1,2401,348,20,
349,4,38,65,0,
84,0,95,0,82,
0,79,0,84,0,
95,0,84,0,65,
0,82,0,71,0,
69,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,58,1,1,
2,0,1,2402,350,
18,1,2402,351,20,
352,4,10,69,0,
118,0,101,0,110,
0,116,0,1,107,
1,2,2,0,1,
2403,353,18,1,2403,
135,2,0,1,1296,
354,18,1,1296,160,
2,0,1,1297,355,
18,1,1297,356,20,
357,4,12,69,0,
81,0,85,0,65,
0,76,0,83,0,
1,15,1,1,2,
0,1,2412,358,18,
1,2412,140,2,0,
1,2414,359,18,1,
2414,153,2,0,1,
1859,360,18,1,1859,
153,2,0,1,1860,
361,18,1,1860,191,
2,0,1,2418,362,
18,1,2418,363,20,
364,4,18,83,0,
116,0,97,0,116,
0,101,0,66,0,
111,0,100,0,121,
0,1,102,1,2,
2,0,1,188,365,
18,1,188,168,2,
0,1,182,366,18,
1,182,367,20,368,
4,22,82,0,73,
0,71,0,72,0,
84,0,95,0,65,
0,78,0,71,0,
76,0,69,0,1,
26,1,1,2,0,
1,199,369,18,1,
199,370,20,371,4,
10,67,0,65,0,
82,0,69,0,84,
0,1,35,1,1,
2,0,1,1871,372,
18,1,1871,160,2,
0,1,1872,373,18,
1,1872,153,2,0,
1,1873,374,18,1,
1873,191,2,0,1,
1875,375,18,1,1875,
321,2,0,1,205,
376,18,1,205,168,
2,0,1,2359,377,
18,1,2359,250,2,
0,1,2361,378,18,
1,2361,253,2,0,
1,1882,379,18,1,
1882,168,2,0,1,
2227,380,18,1,2227,
250,2,0,1,2368,
381,18,1,2368,382,
20,383,4,36,72,
0,84,0,84,0,
80,0,95,0,82,
0,69,0,81,0,
85,0,69,0,83,
0,84,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,91,1,1,2,
0,1,217,384,18,
1,217,385,20,386,
4,12,83,0,84,
0,82,0,79,0,
75,0,69,0,1,
34,1,1,2,0,
1,1332,387,18,1,
1332,160,2,0,1,
2371,388,18,1,2371,
389,20,390,4,22,
84,0,79,0,85,
0,67,0,72,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,88,1,
1,2,0,1,1335,
391,18,1,1335,163,
2,0,1,2374,392,
18,1,2374,393,20,
394,4,34,83,0,
84,0,65,0,84,
0,69,0,95,0,
69,0,78,0,84,
0,82,0,89,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,85,1,
1,2,0,1,223,
395,18,1,223,168,
2,0,1,2454,396,
18,1,2454,397,20,
398,4,20,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,1,103,
1,2,2,0,1,
1341,399,18,1,1341,
168,2,0,1,2456,
400,18,1,2456,397,
2,0,1,2381,401,
18,1,2381,402,20,
403,4,46,78,0,
79,0,84,0,95,
0,65,0,84,0,
95,0,82,0,79,
0,84,0,95,0,
84,0,65,0,82,
0,71,0,69,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
78,1,1,2,0,
1,1901,404,18,1,
1901,153,2,0,1,
1303,405,18,1,1303,
168,2,0,1,2384,
406,18,1,2384,407,
20,408,4,32,77,
0,79,0,86,0,
73,0,78,0,71,
0,95,0,69,0,
78,0,68,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,75,1,1,
2,0,1,2385,409,
18,1,2385,410,20,
411,4,22,77,0,
79,0,78,0,69,
0,89,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,74,1,1,2,
0,1,2387,412,18,
1,2387,413,20,414,
4,36,76,0,73,
0,78,0,75,0,
95,0,77,0,69,
0,83,0,83,0,
65,0,71,0,69,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,72,
1,1,2,0,1,
236,415,18,1,236,
416,20,417,4,6,
65,0,77,0,80,
0,1,33,1,1,
2,0,1,2389,418,
18,1,2389,419,20,
420,4,48,76,0,
65,0,78,0,68,
0,95,0,67,0,
79,0,76,0,76,
0,73,0,83,0,
73,0,79,0,78,
0,95,0,69,0,
78,0,68,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,70,1,1,
2,0,1,2390,421,
18,1,2390,422,20,
423,4,40,76,0,
65,0,78,0,68,
0,95,0,67,0,
79,0,76,0,76,
0,73,0,83,0,
73,0,79,0,78,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,69,
1,1,2,0,1,
2391,424,18,1,2391,
425,20,426,4,38,
72,0,84,0,84,
0,80,0,95,0,
82,0,69,0,83,
0,80,0,79,0,
78,0,83,0,69,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,68,
1,1,2,0,1,
242,427,18,1,242,
168,2,0,1,2397,
428,18,1,2397,429,
20,430,4,30,67,
0,79,0,76,0,
76,0,73,0,83,
0,73,0,79,0,
78,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
62,1,1,2,0,
1,2400,431,18,1,
2400,432,20,433,4,
30,65,0,84,0,
95,0,84,0,65,
0,82,0,71,0,
69,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,59,1,1,
2,0,1,256,434,
18,1,256,435,20,
436,4,14,80,0,
69,0,82,0,67,
0,69,0,78,0,
84,0,1,22,1,
1,2,0,1,1371,
437,18,1,1371,212,
2,0,1,1931,438,
18,1,1931,250,2,
0,1,1932,439,18,
1,1932,440,20,441,
4,4,73,0,70,
0,1,42,1,1,
2,0,1,262,442,
18,1,262,168,2,
0,1,1377,443,18,
1,1377,168,2,0,
1,1876,444,18,1,
1876,135,2,0,1,
2494,445,18,1,2494,
363,2,0,1,1939,
446,18,1,1939,168,
2,0,1,827,447,
18,1,827,168,2,
0,1,277,448,18,
1,277,449,20,450,
4,10,83,0,76,
0,65,0,83,0,
72,0,1,21,1,
1,2,0,1,283,
451,18,1,283,168,
2,0,1,1958,452,
18,1,1958,153,2,
0,1,1406,453,18,
1,1406,160,2,0,
1,1407,454,18,1,
1407,206,2,0,1,
299,455,18,1,299,
456,20,457,4,8,
83,0,84,0,65,
0,82,0,1,20,
1,1,2,0,1,
1370,458,18,1,1370,
160,2,0,1,2379,
459,18,1,2379,460,
20,461,4,32,79,
0,66,0,74,0,
69,0,67,0,84,
0,95,0,82,0,
69,0,90,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,80,1,1,
2,0,1,305,462,
18,1,305,168,2,
0,1,2457,463,18,
1,2457,464,20,465,
4,26,68,0,69,
0,70,0,65,0,
85,0,76,0,84,
0,95,0,83,0,
84,0,65,0,84,
0,69,0,1,47,
1,1,2,0,1,
2458,466,18,1,2458,
156,2,0,1,2537,
467,18,1,2537,468,
20,469,4,10,83,
0,116,0,97,0,
116,0,101,0,1,
101,1,2,2,0,
1,2538,470,18,1,
2538,132,2,0,1,
2539,471,18,1,2539,
135,2,0,1,1989,
472,18,1,1989,250,
2,0,1,1990,473,
18,1,1990,474,20,
475,4,8,69,0,
76,0,83,0,69,
0,1,43,1,1,
2,0,1,2548,476,
18,1,2548,140,2,
0,1,322,477,18,
1,322,224,2,0,
1,1933,478,18,1,
1933,135,2,0,1,
883,479,18,1,883,
168,2,0,1,2555,
480,18,1,2555,356,
2,0,1,328,481,
18,1,328,168,2,
0,1,1443,482,18,
1,1443,237,2,0,
1,2561,483,18,1,
2561,168,2,0,1,
1449,484,18,1,1449,
168,2,0,1,2416,
485,18,1,2416,262,
2,0,1,1413,486,
18,1,1413,168,2,
0,1,346,487,18,
1,346,488,20,489,
4,8,80,0,76,
0,85,0,83,0,
1,18,1,1,2,
0,1,2021,490,18,
1,2021,250,2,0,
1,2022,491,18,1,
2022,492,20,493,4,
10,83,0,84,0,
65,0,84,0,69,
0,1,48,1,1,
2,0,1,352,494,
18,1,352,168,2,
0,1,2024,495,18,
1,2024,132,2,0,
1,2025,496,18,1,
2025,497,20,498,4,
8,74,0,85,0,
77,0,80,0,1,
49,1,1,2,0,
1,2026,499,18,1,
2026,132,2,0,1,
2027,500,18,1,2027,
501,20,502,4,4,
65,0,84,0,1,
23,1,1,2,0,
1,2028,503,18,1,
2028,132,2,0,1,
2029,504,18,1,2029,
262,2,0,1,2030,
505,18,1,2030,506,
20,507,4,14,70,
0,111,0,114,0,
76,0,111,0,111,
0,112,0,1,121,
1,2,2,0,1,
2031,508,18,1,2031,
509,20,510,4,32,
68,0,111,0,87,
0,104,0,105,0,
108,0,101,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,120,1,
2,2,0,1,2032,
511,18,1,2032,512,
20,513,4,28,87,
0,104,0,105,0,
108,0,101,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,119,1,
2,2,0,1,2033,
514,18,1,2033,515,
20,516,4,22,73,
0,102,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,118,1,2,
2,0,1,2034,517,
18,1,2034,518,20,
519,4,22,83,0,
116,0,97,0,116,
0,101,0,67,0,
104,0,97,0,110,
0,103,0,101,0,
1,117,1,2,2,
0,1,1478,520,18,
1,1478,160,2,0,
1,1479,521,18,1,
1479,284,2,0,1,
2037,522,18,1,2037,
191,2,0,1,2038,
523,18,1,2038,524,
20,525,4,18,74,
0,117,0,109,0,
112,0,76,0,97,
0,98,0,101,0,
108,0,1,115,1,
2,2,0,1,2039,
526,18,1,2039,191,
2,0,1,2040,527,
18,1,2040,528,20,
529,4,30,82,0,
101,0,116,0,117,
0,114,0,110,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,114,
1,2,2,0,1,
2041,530,18,1,2041,
191,2,0,1,1485,
531,18,1,1485,168,
2,0,1,372,532,
18,1,372,180,2,
0,1,373,533,18,
1,373,132,2,0,
1,374,534,18,1,
374,176,2,0,1,
375,535,18,1,375,
132,2,0,1,376,
536,18,1,376,183,
2,0,1,377,537,
18,1,377,132,2,
0,1,378,538,18,
1,378,176,2,0,
1,379,539,18,1,
379,132,2,0,1,
380,540,18,1,380,
541,20,542,4,16,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,1,127,1,2,
2,0,1,381,543,
18,1,381,331,2,
0,1,2610,544,18,
1,2610,545,20,546,
4,48,71,0,108,
0,111,0,98,0,
97,0,108,0,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
1,99,1,2,2,
0,1,2455,547,18,
1,2455,253,2,0,
1,371,548,18,1,
371,549,20,550,4,
24,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,67,0,97,
0,108,0,108,0,
1,123,1,2,2,
0,1,942,551,18,
1,942,168,2,0,
1,2533,552,18,1,
2533,553,20,554,4,
12,83,0,116,0,
97,0,116,0,101,
0,115,0,1,100,
1,2,2,0,1,
387,555,18,1,387,
168,2,0,1,2536,
556,18,1,2536,468,
2,0,1,2394,557,
18,1,2394,558,20,
559,4,26,67,0,
79,0,78,0,84,
0,82,0,79,0,
76,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
65,1,1,2,0,
1,1514,560,18,1,
1514,160,2,0,1,
1515,561,18,1,1515,
356,2,0,1,2074,
562,18,1,2074,160,
2,0,1,2075,563,
18,1,2075,153,2,
0,1,2552,564,18,
1,2552,262,2,0,
1,406,565,18,1,
406,143,2,0,1,
1521,566,18,1,1521,
168,2,0,1,412,
567,18,1,412,168,
2,0,1,2023,568,
18,1,2023,464,2,
0,1,1442,569,18,
1,1442,160,2,0,
1,2035,570,18,1,
2035,191,2,0,1,
2036,571,18,1,2036,
572,20,573,4,26,
74,0,117,0,109,
0,112,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,116,1,2,
2,0,1,431,574,
18,1,431,143,2,
0,1,2105,575,18,
1,2105,250,2,0,
1,2106,576,18,1,
2106,474,2,0,1,
1550,577,18,1,1550,
160,2,0,1,437,
578,18,1,437,168,
2,0,1,2044,579,
18,1,2044,580,20,
581,4,28,69,0,
109,0,112,0,116,
0,121,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,111,1,2,
2,0,1,2045,582,
18,1,2045,191,2,
0,1,1555,583,18,
1,1555,168,2,0,
1,1001,584,18,1,
1001,549,2,0,1,
1002,585,18,1,1002,
541,2,0,1,447,
586,18,1,447,367,
2,0,1,2375,587,
18,1,2375,588,20,
589,4,24,83,0,
69,0,78,0,83,
0,79,0,82,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,84,1,
1,2,0,1,1010,
590,18,1,1010,160,
2,0,1,1011,591,
18,1,1011,153,2,
0,1,1012,592,18,
1,1012,168,2,0,
1,1013,593,18,1,
1013,153,2,0,1,
2603,594,18,1,2603,
553,2,0,1,459,
595,18,1,459,596,
20,597,4,24,76,
0,69,0,70,0,
84,0,95,0,66,
0,82,0,65,0,
67,0,75,0,69,
0,84,0,1,27,
1,1,2,0,1,
1574,598,18,1,1574,
191,2,0,1,461,
599,18,1,461,600,
20,601,4,24,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
76,0,105,0,115,
0,116,0,1,124,
1,2,2,0,1,
462,602,18,1,462,
143,2,0,1,464,
603,18,1,464,604,
20,605,4,16,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
1,125,1,2,2,
0,1,2136,606,18,
1,2136,250,2,0,
1,2611,607,18,1,
2611,608,20,609,4,
50,71,0,108,0,
111,0,98,0,97,
0,108,0,86,0,
97,0,114,0,105,
0,97,0,98,0,
108,0,101,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,1,98,1,2,
2,0,1,2612,610,
18,1,2612,545,2,
0,1,2613,611,18,
1,2613,608,2,0,
1,2614,104,1,2615,
612,18,1,2615,613,
23,614,4,6,69,
0,79,0,70,0,
1,2,1,6,2,
0,1,1585,615,18,
1,1585,616,20,617,
4,12,82,0,69,
0,84,0,85,0,
82,0,78,0,1,
50,1,1,2,0,
1,476,618,18,1,
476,619,20,620,4,
30,83,0,84,0,
82,0,73,0,78,
0,71,0,95,0,
67,0,79,0,78,
0,83,0,84,0,
65,0,78,0,84,
0,1,3,1,1,
2,0,1,477,621,
18,1,477,622,20,
623,4,28,70,0,
76,0,79,0,65,
0,84,0,95,0,
67,0,79,0,78,
0,83,0,84,0,
65,0,78,0,84,
0,1,95,1,1,
2,0,1,478,624,
18,1,478,625,20,
626,4,40,72,0,
69,0,88,0,95,
0,73,0,78,0,
84,0,69,0,71,
0,69,0,82,0,
95,0,67,0,79,
0,78,0,83,0,
84,0,65,0,78,
0,84,0,1,94,
1,1,2,0,1,
479,627,18,1,479,
628,20,629,4,32,
73,0,78,0,84,
0,69,0,71,0,
69,0,82,0,95,
0,67,0,79,0,
78,0,83,0,84,
0,65,0,78,0,
84,0,1,93,1,
1,2,0,1,480,
630,18,1,480,631,
20,632,4,26,82,
0,73,0,71,0,
72,0,84,0,95,
0,66,0,82,0,
65,0,67,0,75,
0,69,0,84,0,
1,28,1,1,2,
0,1,481,633,18,
1,481,604,2,0,
1,2550,634,18,1,
2550,153,2,0,1,
2554,635,18,1,2554,
150,2,0,1,1048,
636,18,1,1048,168,
2,0,1,2042,637,
18,1,2042,638,20,
639,4,20,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,1,112,
1,2,2,0,1,
2043,640,18,1,2043,
191,2,0,1,1620,
641,18,1,1620,160,
2,0,1,1621,642,
18,1,1621,150,2,
0,1,1622,643,18,
1,1622,356,2,0,
1,509,644,18,1,
509,143,2,0,1,
2365,645,18,1,2365,
492,2,0,1,1628,
646,18,1,1628,168,
2,0,1,515,647,
18,1,515,168,2,
0,1,2580,648,18,
1,2580,191,2,0,
1,2369,649,18,1,
2369,650,20,651,4,
34,84,0,79,0,
85,0,67,0,72,
0,95,0,83,0,
84,0,65,0,82,
0,84,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,89,1,1,2,
0,1,525,652,18,
1,525,367,2,0,
1,2197,653,18,1,
2197,160,2,0,1,
2198,654,18,1,2198,
153,2,0,1,1591,
655,18,1,1591,168,
2,0,1,2592,656,
18,1,2592,657,20,
658,4,34,71,0,
108,0,111,0,98,
0,97,0,108,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
115,0,1,97,1,
2,2,0,1,1094,
659,18,1,1094,600,
2,0,1,1096,660,
18,1,1096,153,2,
0,1,1657,661,18,
1,1657,191,2,0,
1,1658,662,18,1,
1658,663,20,664,4,
6,70,0,79,0,
82,0,1,46,1,
1,2,0,1,1659,
665,18,1,1659,135,
2,0,1,2531,666,
18,1,2531,253,2,
0,1,1665,667,18,
1,1665,168,2,0,
1,1113,668,18,1,
1113,176,2,0,669,
5,0,670,5,323,
1,2,671,19,614,
1,2,672,5,6,
1,2531,673,17,674,
15,675,4,12,37,
0,83,0,116,0,
97,0,116,0,101,
0,1,-1,1,5,
676,20,677,4,14,
83,0,116,0,97,
0,116,0,101,0,
95,0,49,0,1,
154,1,3,1,5,
1,4,678,22,1,
13,1,2455,679,17,
680,15,675,1,-1,
1,5,681,20,682,
4,14,83,0,116,
0,97,0,116,0,
101,0,95,0,50,
0,1,155,1,3,
1,6,1,5,683,
22,1,14,1,2533,
684,17,685,15,686,
4,30,37,0,76,
0,83,0,76,0,
80,0,114,0,111,
0,103,0,114,0,
97,0,109,0,82,
0,111,0,111,0,
116,0,1,-1,1,
5,687,20,688,4,
32,76,0,83,0,
76,0,80,0,114,
0,111,0,103,0,
114,0,97,0,109,
0,82,0,111,0,
111,0,116,0,95,
0,50,0,1,143,
1,3,1,2,1,
1,689,22,1,2,
1,2536,690,17,691,
15,692,4,14,37,
0,83,0,116,0,
97,0,116,0,101,
0,115,0,1,-1,
1,5,693,20,694,
4,16,83,0,116,
0,97,0,116,0,
101,0,115,0,95,
0,50,0,1,153,
1,3,1,3,1,
2,695,22,1,12,
1,2537,696,17,697,
15,692,1,-1,1,
5,698,20,699,4,
16,83,0,116,0,
97,0,116,0,101,
0,115,0,95,0,
49,0,1,152,1,
3,1,2,1,1,
700,22,1,11,1,
2603,701,17,702,15,
686,1,-1,1,5,
703,20,704,4,32,
76,0,83,0,76,
0,80,0,114,0,
111,0,103,0,114,
0,97,0,109,0,
82,0,111,0,111,
0,116,0,95,0,
49,0,1,142,1,
3,1,3,1,2,
705,22,1,1,1,
3,706,19,620,1,
3,707,5,91,1,
256,708,16,0,618,
1,1261,709,16,0,
618,1,509,710,16,
0,618,1,1515,711,
16,0,618,1,2021,
712,17,713,15,714,
4,24,37,0,73,
0,102,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
715,20,716,4,26,
73,0,102,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,1,185,1,3,
1,8,1,7,717,
22,1,45,1,1775,
718,16,0,618,1,
2029,719,17,720,15,
721,4,20,37,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,722,20,723,
4,24,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,51,
0,1,179,1,3,
1,2,1,1,724,
22,1,39,1,2030,
725,17,726,15,721,
1,-1,1,5,727,
20,728,4,24,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,50,0,1,178,
1,3,1,2,1,
1,729,22,1,38,
1,2031,730,17,731,
15,721,1,-1,1,
5,732,20,733,4,
24,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,49,0,
1,177,1,3,1,
2,1,1,734,22,
1,37,1,2032,735,
17,736,15,721,1,
-1,1,5,737,20,
738,4,24,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
48,0,1,176,1,
3,1,2,1,1,
739,22,1,36,1,
2033,740,17,741,15,
721,1,-1,1,5,
742,20,743,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
57,0,1,175,1,
3,1,2,1,1,
744,22,1,35,1,
277,745,16,0,618,
1,2035,746,17,747,
15,721,1,-1,1,
5,748,20,749,4,
22,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,56,0,1,174,
1,3,1,3,1,
2,750,22,1,34,
1,2037,751,17,752,
15,721,1,-1,1,
5,753,20,754,4,
22,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,55,0,1,173,
1,3,1,3,1,
2,755,22,1,33,
1,2039,756,17,757,
15,721,1,-1,1,
5,758,20,759,4,
22,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,54,0,1,172,
1,3,1,3,1,
2,760,22,1,32,
1,32,761,16,0,
618,1,2041,762,17,
763,15,721,1,-1,
1,5,764,20,765,
4,22,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,53,0,1,
171,1,3,1,3,
1,2,766,22,1,
31,1,2043,767,17,
768,15,721,1,-1,
1,5,769,20,770,
4,22,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,51,0,1,
169,1,3,1,3,
1,2,771,22,1,
29,1,2045,772,17,
773,15,721,1,-1,
1,5,774,20,775,
4,22,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
167,1,3,1,3,
1,2,776,22,1,
27,1,41,777,16,
0,618,1,1297,778,
16,0,618,1,43,
779,16,0,618,1,
1802,780,17,781,15,
782,4,16,37,0,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,1,
-1,1,5,783,20,
784,4,18,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,95,0,49,
0,1,192,1,3,
1,10,1,9,785,
22,1,52,1,1804,
786,16,0,618,1,
299,787,16,0,618,
1,2310,788,16,0,
618,1,52,789,16,
0,618,1,525,790,
16,0,618,1,62,
791,16,0,618,1,
2075,792,16,0,618,
1,1574,793,17,794,
15,721,1,-1,1,
5,795,20,796,4,
22,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,52,0,1,170,
1,3,1,3,1,
2,797,22,1,30,
1,71,798,16,0,
618,1,76,799,16,
0,618,1,1834,800,
16,0,618,1,79,
801,16,0,618,1,
1335,802,16,0,618,
1,322,803,16,0,
618,1,85,804,16,
0,618,1,89,805,
16,0,618,1,346,
806,16,0,618,1,
2355,807,17,808,15,
809,4,28,37,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,1,-1,1,5,
810,20,811,4,30,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,95,0,50,0,
1,165,1,3,1,
3,1,2,812,22,
1,25,1,2105,813,
17,814,15,714,1,
-1,1,5,815,20,
816,4,26,73,0,
102,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,51,0,1,
186,1,3,1,6,
1,5,817,22,1,
46,1,2106,818,16,
0,618,1,2359,819,
17,820,15,809,1,
-1,1,5,821,20,
822,4,30,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,95,
0,49,0,1,164,
1,3,1,2,1,
1,823,22,1,24,
1,2361,824,17,825,
15,826,4,36,37,
0,67,0,111,0,
109,0,112,0,111,
0,117,0,110,0,
100,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,827,
20,828,4,38,67,
0,111,0,109,0,
112,0,111,0,117,
0,110,0,100,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,162,1,
3,1,3,1,2,
829,22,1,22,1,
1860,830,17,831,15,
832,4,34,37,0,
68,0,111,0,87,
0,104,0,105,0,
108,0,101,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,833,20,834,4,
36,68,0,111,0,
87,0,104,0,105,
0,108,0,101,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,190,1,
3,1,8,1,7,
835,22,1,50,1,
97,836,16,0,618,
1,112,837,16,0,
618,1,1117,838,16,
0,618,1,1873,839,
17,840,15,832,1,
-1,1,5,841,20,
842,4,36,68,0,
111,0,87,0,104,
0,105,0,108,0,
101,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
191,1,3,1,8,
1,7,843,22,1,
51,1,102,844,16,
0,618,1,1876,845,
16,0,618,1,124,
846,16,0,618,1,
2555,847,16,0,618,
1,2136,848,17,849,
15,714,1,-1,1,
5,850,20,851,4,
26,73,0,102,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
52,0,1,187,1,
3,1,8,1,7,
852,22,1,47,1,
381,853,16,0,618,
1,137,854,16,0,
618,1,1901,855,16,
0,618,1,1153,856,
16,0,618,1,151,
857,16,0,618,1,
1407,858,16,0,618,
1,1659,859,16,0,
618,1,406,860,16,
0,618,1,1371,861,
16,0,618,1,166,
862,16,0,618,1,
1622,863,16,0,618,
1,2356,864,17,865,
15,826,1,-1,1,
5,866,20,867,4,
38,67,0,111,0,
109,0,112,0,111,
0,117,0,110,0,
100,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
163,1,3,1,4,
1,3,868,22,1,
23,1,1931,869,17,
870,15,871,4,30,
37,0,87,0,104,
0,105,0,108,0,
101,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,872,
20,873,4,32,87,
0,104,0,105,0,
108,0,101,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,1,188,1,3,
1,6,1,5,874,
22,1,48,1,1933,
875,16,0,618,1,
431,876,16,0,618,
1,1585,877,16,0,
618,1,182,878,16,
0,618,1,1189,879,
16,0,618,1,1443,
880,16,0,618,1,
1695,881,16,0,618,
1,2198,882,16,0,
618,1,447,883,16,
0,618,1,199,884,
16,0,618,1,1958,
885,16,0,618,1,
1657,886,17,887,15,
721,1,-1,1,5,
888,20,889,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,1,168,1,
3,1,3,1,2,
890,22,1,28,1,
459,891,16,0,618,
1,462,892,16,0,
618,1,217,893,16,
0,618,1,2227,894,
17,895,15,871,1,
-1,1,5,896,20,
897,4,32,87,0,
104,0,105,0,108,
0,101,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,189,1,3,1,
6,1,5,898,22,
1,49,1,1225,899,
16,0,618,1,1479,
900,16,0,618,1,
1731,901,16,0,618,
1,1989,902,17,903,
15,714,1,-1,1,
5,904,20,905,4,
26,73,0,102,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,184,1,
3,1,6,1,5,
906,22,1,44,1,
1990,907,16,0,618,
1,236,908,16,0,
618,1,1756,909,16,
0,618,1,4,910,
19,184,1,4,911,
5,96,1,256,912,
16,0,536,1,1261,
913,16,0,536,1,
509,914,16,0,536,
1,1515,915,16,0,
536,1,2021,712,1,
1775,916,16,0,536,
1,2029,719,1,2030,
725,1,2031,730,1,
2032,735,1,2033,740,
1,277,917,16,0,
536,1,2035,746,1,
2037,751,1,2039,756,
1,32,918,16,0,
536,1,2041,762,1,
2043,767,1,2045,772,
1,40,919,16,0,
186,1,41,920,16,
0,536,1,1297,921,
16,0,536,1,43,
922,16,0,536,1,
44,923,16,0,186,
1,1802,780,1,1804,
924,16,0,536,1,
299,925,16,0,536,
1,47,926,16,0,
182,1,2310,927,16,
0,536,1,52,928,
16,0,536,1,525,
929,16,0,536,1,
63,930,16,0,201,
1,66,931,16,0,
199,1,2075,932,16,
0,536,1,1574,793,
1,71,933,16,0,
536,1,76,934,16,
0,536,1,1834,935,
16,0,536,1,79,
936,16,0,536,1,
1335,937,16,0,536,
1,322,938,16,0,
536,1,85,939,16,
0,536,1,89,940,
16,0,536,1,346,
941,16,0,536,1,
2355,807,1,2105,813,
1,2106,942,16,0,
536,1,2359,819,1,
2361,824,1,1860,830,
1,97,943,16,0,
536,1,1114,944,16,
0,182,1,112,945,
16,0,536,1,1117,
946,16,0,536,1,
1873,839,1,102,947,
16,0,536,1,1876,
948,16,0,536,1,
124,949,16,0,536,
1,2555,950,16,0,
536,1,2136,848,1,
381,951,16,0,536,
1,137,952,16,0,
536,1,1901,953,16,
0,536,1,1153,954,
16,0,536,1,151,
955,16,0,536,1,
1407,956,16,0,536,
1,1659,957,16,0,
536,1,406,958,16,
0,536,1,1371,959,
16,0,536,1,166,
960,16,0,536,1,
1622,961,16,0,536,
1,2356,864,1,1931,
869,1,1933,962,16,
0,536,1,431,963,
16,0,536,1,1585,
964,16,0,536,1,
182,965,16,0,536,
1,1189,966,16,0,
536,1,1443,967,16,
0,536,1,1695,968,
16,0,536,1,2198,
969,16,0,536,1,
447,970,16,0,536,
1,199,971,16,0,
536,1,1958,972,16,
0,536,1,1657,886,
1,459,973,16,0,
536,1,462,974,16,
0,536,1,217,975,
16,0,536,1,2227,
894,1,1225,976,16,
0,536,1,1479,977,
16,0,536,1,1731,
978,16,0,536,1,
1989,902,1,1990,979,
16,0,536,1,236,
980,16,0,536,1,
1756,981,16,0,536,
1,5,982,19,181,
1,5,983,5,96,
1,256,984,16,0,
532,1,1261,985,16,
0,532,1,509,986,
16,0,532,1,1515,
987,16,0,532,1,
2021,712,1,1775,988,
16,0,532,1,2029,
719,1,2030,725,1,
2031,730,1,2032,735,
1,2033,740,1,277,
989,16,0,532,1,
2035,746,1,2037,751,
1,2039,756,1,32,
990,16,0,532,1,
2041,762,1,2043,767,
1,2045,772,1,40,
991,16,0,185,1,
41,992,16,0,532,
1,1297,993,16,0,
532,1,43,994,16,
0,532,1,44,995,
16,0,185,1,1802,
780,1,1804,996,16,
0,532,1,299,997,
16,0,532,1,47,
998,16,0,179,1,
2310,999,16,0,532,
1,52,1000,16,0,
532,1,525,1001,16,
0,532,1,63,1002,
16,0,200,1,66,
1003,16,0,198,1,
2075,1004,16,0,532,
1,1574,793,1,71,
1005,16,0,532,1,
76,1006,16,0,532,
1,1834,1007,16,0,
532,1,79,1008,16,
0,532,1,1335,1009,
16,0,532,1,322,
1010,16,0,532,1,
85,1011,16,0,532,
1,89,1012,16,0,
532,1,346,1013,16,
0,532,1,2355,807,
1,2105,813,1,2106,
1014,16,0,532,1,
2359,819,1,2361,824,
1,1860,830,1,97,
1015,16,0,532,1,
1114,1016,16,0,179,
1,112,1017,16,0,
532,1,1117,1018,16,
0,532,1,1873,839,
1,102,1019,16,0,
532,1,1876,1020,16,
0,532,1,124,1021,
16,0,532,1,2555,
1022,16,0,532,1,
2136,848,1,381,1023,
16,0,532,1,137,
1024,16,0,532,1,
1901,1025,16,0,532,
1,1153,1026,16,0,
532,1,151,1027,16,
0,532,1,1407,1028,
16,0,532,1,1659,
1029,16,0,532,1,
406,1030,16,0,532,
1,1371,1031,16,0,
532,1,166,1032,16,
0,532,1,1622,1033,
16,0,532,1,2356,
864,1,1931,869,1,
1933,1034,16,0,532,
1,431,1035,16,0,
532,1,1585,1036,16,
0,532,1,182,1037,
16,0,532,1,1189,
1038,16,0,532,1,
1443,1039,16,0,532,
1,1695,1040,16,0,
532,1,2198,1041,16,
0,532,1,447,1042,
16,0,532,1,199,
1043,16,0,532,1,
1958,1044,16,0,532,
1,1657,886,1,459,
1045,16,0,532,1,
462,1046,16,0,532,
1,217,1047,16,0,
532,1,2227,894,1,
1225,1048,16,0,532,
1,1479,1049,16,0,
532,1,1731,1050,16,
0,532,1,1989,902,
1,1990,1051,16,0,
532,1,236,1052,16,
0,532,1,1756,1053,
16,0,532,1,6,
1054,19,285,1,6,
1055,5,2,1,1114,
1056,16,0,283,1,
40,1057,16,0,521,
1,7,1058,19,238,
1,7,1059,5,2,
1,1114,1060,16,0,
236,1,40,1061,16,
0,482,1,8,1062,
19,207,1,8,1063,
5,2,1,1114,1064,
16,0,205,1,40,
1065,16,0,454,1,
9,1066,19,213,1,
9,1067,5,2,1,
1114,1068,16,0,211,
1,40,1069,16,0,
437,1,10,1070,19,
164,1,10,1071,5,
2,1,1114,1072,16,
0,162,1,40,1073,
16,0,391,1,11,
1074,19,192,1,11,
1075,5,142,1,1260,
1076,17,1077,15,1078,
4,34,37,0,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
1079,20,1080,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,49,0,1,219,
1,3,1,6,1,
5,1081,22,1,79,
1,1011,1082,17,1083,
15,1084,4,44,37,
0,80,0,97,0,
114,0,101,0,110,
0,116,0,104,0,
101,0,115,0,105,
0,115,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1085,20,1086,
4,46,80,0,97,
0,114,0,101,0,
110,0,116,0,104,
0,101,0,115,0,
105,0,115,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,50,0,1,266,
1,3,1,4,1,
3,1087,22,1,126,
1,1514,1088,17,1089,
15,1078,1,-1,1,
5,1090,20,1091,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,52,0,1,
212,1,3,1,4,
1,3,1092,22,1,
72,1,9,1093,17,
1094,15,1095,4,24,
37,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,1,
-1,1,5,1096,20,
1097,4,26,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
95,0,49,0,1,
161,1,3,1,3,
1,2,1098,22,1,
21,1,262,1099,17,
1100,15,1101,4,34,
37,0,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1102,20,
1103,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,53,0,1,
248,1,3,1,4,
1,3,1104,22,1,
108,1,1267,1105,17,
1106,15,1078,1,-1,
1,5,1107,20,1108,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,56,0,1,206,
1,3,1,6,1,
5,1109,22,1,66,
1,2021,712,1,1521,
1110,17,1111,15,1078,
1,-1,1,5,1112,
20,1113,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
1,199,1,3,1,
4,1,3,1114,22,
1,59,1,2024,1115,
17,1116,15,1117,4,
24,37,0,83,0,
116,0,97,0,116,
0,101,0,67,0,
104,0,97,0,110,
0,103,0,101,0,
1,-1,1,5,1118,
20,1119,4,26,83,
0,116,0,97,0,
116,0,101,0,67,
0,104,0,97,0,
110,0,103,0,101,
0,95,0,49,0,
1,182,1,3,1,
3,1,2,1120,22,
1,42,1,1775,1121,
17,1122,15,1123,4,
30,37,0,69,0,
109,0,112,0,116,
0,121,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
1124,20,1125,4,32,
69,0,109,0,112,
0,116,0,121,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,166,1,
3,1,1,1,0,
1126,22,1,26,1,
19,1127,17,1094,1,
2,1098,1,2028,1128,
17,1129,15,1130,4,
20,37,0,74,0,
117,0,109,0,112,
0,76,0,97,0,
98,0,101,0,108,
0,1,-1,1,5,
1131,20,1132,4,22,
74,0,117,0,109,
0,112,0,76,0,
97,0,98,0,101,
0,108,0,95,0,
49,0,1,180,1,
3,1,3,1,2,
1133,22,1,40,1,
2029,719,1,2281,1134,
17,1135,15,1136,4,
34,37,0,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,1137,
20,1138,4,36,70,
0,111,0,114,0,
76,0,111,0,111,
0,112,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,194,1,3,1,
2,1,1,1139,22,
1,54,1,2031,730,
1,2032,735,1,2033,
740,1,2034,1140,16,
0,570,1,2035,746,
1,2036,1141,16,0,
522,1,2037,751,1,
2038,1142,16,0,526,
1,2039,756,1,32,
1143,17,1122,1,0,
1126,1,2041,762,1,
2042,1144,16,0,640,
1,2043,767,1,2044,
1145,16,0,582,1,
2045,772,1,40,1146,
17,1147,15,1148,4,
32,37,0,73,0,
100,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1149,20,1150,
4,34,73,0,100,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,233,1,3,
1,2,1,1,1151,
22,1,93,1,1296,
1152,17,1153,15,1078,
1,-1,1,5,1154,
20,1155,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
48,0,1,218,1,
3,1,6,1,5,
1156,22,1,78,1,
283,1157,17,1158,15,
1101,1,-1,1,5,
1159,20,1160,4,36,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,52,
0,1,247,1,3,
1,4,1,3,1161,
22,1,107,1,44,
1162,17,1147,1,1,
1151,1,1802,780,1,
47,1163,17,1164,15,
1165,4,38,37,0,
73,0,100,0,101,
0,110,0,116,0,
68,0,111,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,-1,1,5,
1166,20,1167,4,40,
73,0,100,0,101,
0,110,0,116,0,
68,0,111,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,234,1,3,1,
4,1,3,1168,22,
1,94,1,48,1169,
17,1170,15,1171,4,
58,37,0,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1172,20,
1173,4,60,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,52,0,1,238,
1,3,1,5,1,
4,1174,22,1,98,
1,49,1175,17,1176,
15,1171,1,-1,1,
5,1177,20,1178,4,
60,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,51,
0,1,237,1,3,
1,5,1,4,1179,
22,1,97,1,50,
1180,17,1181,15,1171,
1,-1,1,5,1182,
20,1183,4,60,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,50,0,1,
236,1,3,1,3,
1,2,1184,22,1,
96,1,51,1185,17,
1186,15,1171,1,-1,
1,5,1187,20,1188,
4,60,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,1,235,1,
3,1,3,1,2,
1189,22,1,95,1,
305,1190,17,1191,15,
1101,1,-1,1,5,
1192,20,1193,4,36,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,51,
0,1,246,1,3,
1,4,1,3,1194,
22,1,106,1,525,
1195,17,1196,15,1197,
4,34,37,0,82,
0,111,0,116,0,
97,0,116,0,105,
0,111,0,110,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,1,-1,1,5,
1198,20,1199,4,36,
82,0,111,0,116,
0,97,0,116,0,
105,0,111,0,110,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,95,0,49,
0,1,231,1,3,
1,10,1,9,1200,
22,1,91,1,63,
1201,17,1202,15,1203,
4,38,37,0,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,-1,1,5,1204,
20,1205,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,50,0,1,
268,1,3,1,5,
1,4,1206,22,1,
128,1,66,1207,17,
1208,15,1203,1,-1,
1,5,1209,20,1210,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
51,0,1,269,1,
3,1,7,1,6,
1211,22,1,129,1,
67,1212,17,1213,15,
1203,1,-1,1,5,
1214,20,1215,4,40,
84,0,121,0,112,
0,101,0,99,0,
97,0,115,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,55,0,
1,273,1,3,1,
8,1,7,1216,22,
1,133,1,68,1217,
17,1218,15,1203,1,
-1,1,5,1219,20,
1220,4,40,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,53,0,1,271,
1,3,1,8,1,
7,1221,22,1,131,
1,69,1222,17,1223,
15,1203,1,-1,1,
5,1224,20,1225,4,
40,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,54,
0,1,272,1,3,
1,6,1,5,1226,
22,1,132,1,70,
1227,17,1228,15,1203,
1,-1,1,5,1229,
20,1230,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,52,0,1,
270,1,3,1,6,
1,5,1231,22,1,
130,1,74,1232,17,
1233,15,1203,1,-1,
1,5,1234,20,1235,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
57,0,1,275,1,
3,1,7,1,6,
1236,22,1,135,1,
1013,1237,17,1238,15,
1084,1,-1,1,5,
1239,20,1240,4,46,
80,0,97,0,114,
0,101,0,110,0,
116,0,104,0,101,
0,115,0,105,0,
115,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,265,1,3,
1,4,1,3,1241,
22,1,125,1,1332,
1242,17,1243,15,1078,
1,-1,1,5,1244,
20,1245,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
57,0,1,217,1,
3,1,6,1,5,
1246,22,1,77,1,
1048,1247,17,1248,15,
1101,1,-1,1,5,
1249,20,1250,4,38,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,56,0,1,261,
1,3,1,4,1,
3,1251,22,1,121,
1,1585,1252,17,1253,
15,1254,4,32,37,
0,82,0,101,0,
116,0,117,0,114,
0,110,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
1255,20,1256,4,34,
82,0,101,0,116,
0,117,0,114,0,
110,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
224,1,3,1,2,
1,1,1257,22,1,
84,1,2023,1258,17,
1259,15,1117,1,-1,
1,5,1260,20,1261,
4,26,83,0,116,
0,97,0,116,0,
101,0,67,0,104,
0,97,0,110,0,
103,0,101,0,95,
0,50,0,1,183,
1,3,1,3,1,
2,1262,22,1,43,
1,2136,848,1,82,
1263,17,1264,15,1265,
4,32,37,0,85,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1266,20,
1267,4,34,85,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
51,0,1,264,1,
3,1,3,1,2,
1268,22,1,124,1,
2026,1269,17,1270,15,
1271,4,28,37,0,
74,0,117,0,109,
0,112,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
1272,20,1273,4,30,
74,0,117,0,109,
0,112,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
1,181,1,3,1,
3,1,2,1274,22,
1,41,1,1591,1275,
17,1276,15,1254,1,
-1,1,5,1277,20,
1278,4,34,82,0,
101,0,116,0,117,
0,114,0,110,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,223,1,
3,1,3,1,2,
1279,22,1,83,1,
1341,1280,17,1281,15,
1078,1,-1,1,5,
1282,20,1283,4,36,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,54,
0,1,204,1,3,
1,4,1,3,1284,
22,1,64,1,2030,
725,1,328,1285,17,
1286,15,1101,1,-1,
1,5,1287,20,1288,
4,36,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,50,0,1,245,
1,3,1,4,1,
3,1289,22,1,105,
1,1303,1290,17,1291,
15,1078,1,-1,1,
5,1292,20,1293,4,
36,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
55,0,1,205,1,
3,1,6,1,5,
1294,22,1,65,1,
1096,1295,17,1296,15,
1297,4,26,37,0,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,67,0,97,0,
108,0,108,0,1,
-1,1,5,1298,20,
1299,4,28,70,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,67,
0,97,0,108,0,
108,0,95,0,49,
0,1,276,1,3,
1,5,1,4,1300,
22,1,136,1,93,
1301,17,1302,15,1265,
1,-1,1,5,1303,
20,1304,4,34,85,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,50,0,1,263,
1,3,1,3,1,
2,1305,22,1,123,
1,1550,1306,17,1307,
15,1078,1,-1,1,
5,1308,20,1309,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,51,0,1,
211,1,3,1,4,
1,3,1310,22,1,
71,1,2355,807,1,
2356,864,1,2106,1311,
17,1122,1,0,1126,
1,1555,1312,16,0,
598,1,2359,819,1,
352,1313,17,1314,15,
1101,1,-1,1,5,
1315,20,1316,4,36,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,244,1,3,
1,4,1,3,1317,
22,1,104,1,1859,
1318,16,0,361,1,
1860,830,1,1804,1319,
17,1122,1,0,1126,
1,107,1320,17,1321,
15,1265,1,-1,1,
5,1322,20,1323,4,
34,85,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,262,1,3,1,
3,1,2,1324,22,
1,122,1,1114,1325,
17,1164,1,3,1168,
1,2105,813,1,1872,
1326,16,0,374,1,
1873,839,1,118,1327,
17,1328,15,1101,1,
-1,1,5,1329,20,
1330,4,38,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,52,
0,1,257,1,3,
1,4,1,3,1331,
22,1,117,1,1123,
1332,17,1333,15,1078,
1,-1,1,5,1334,
20,1335,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
50,0,1,210,1,
3,1,6,1,5,
1336,22,1,70,1,
371,1337,17,1338,15,
1339,4,46,37,0,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,67,0,97,0,
108,0,108,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1340,20,
1341,4,48,70,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,67,
0,97,0,108,0,
108,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,243,1,3,
1,2,1,1,1342,
22,1,103,1,1377,
1343,17,1344,15,1078,
1,-1,1,5,1345,
20,1346,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,53,0,
1,203,1,3,1,
4,1,3,1347,22,
1,63,1,375,1348,
17,1349,15,1171,1,
-1,1,5,1350,20,
1351,4,60,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,56,0,1,242,
1,3,1,5,1,
4,1352,22,1,102,
1,2310,1353,17,1122,
1,0,1126,1,377,
1354,17,1355,15,1171,
1,-1,1,5,1356,
20,1357,4,60,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,53,0,1,
239,1,3,1,3,
1,2,1358,22,1,
99,1,827,1359,17,
1360,15,1101,1,-1,
1,5,1361,20,1362,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,53,0,
1,258,1,3,1,
4,1,3,1363,22,
1,118,1,380,1364,
17,1365,15,1366,4,
38,37,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1367,20,
1368,4,40,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,1,232,
1,3,1,2,1,
1,1369,22,1,92,
1,883,1370,17,1371,
15,1101,1,-1,1,
5,1372,20,1373,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,54,0,1,
259,1,3,1,4,
1,3,1374,22,1,
119,1,1628,1375,17,
1376,15,1377,4,22,
37,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,1378,20,1379,4,
24,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
1,197,1,3,1,
4,1,3,1380,22,
1,57,1,2561,1381,
16,0,648,1,373,
1382,17,1383,15,1171,
1,-1,1,5,1384,
20,1385,4,60,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,54,0,1,
240,1,3,1,3,
1,2,1386,22,1,
100,1,130,1387,17,
1388,15,1101,1,-1,
1,5,1389,20,1390,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,51,0,
1,256,1,3,1,
4,1,3,1391,22,
1,116,1,379,1392,
17,1393,15,1171,1,
-1,1,5,1394,20,
1395,4,60,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,55,0,1,241,
1,3,1,5,1,
4,1396,22,1,101,
1,143,1397,17,1398,
15,1101,1,-1,1,
5,1399,20,1400,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,50,0,1,
255,1,3,1,4,
1,3,1401,22,1,
115,1,1901,1402,17,
1122,1,0,1126,1,
1152,1403,17,1404,15,
1078,1,-1,1,5,
1405,20,1406,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,52,0,1,222,
1,3,1,6,1,
5,1407,22,1,82,
1,1406,1408,17,1409,
15,1078,1,-1,1,
5,1410,20,1411,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,55,0,1,
215,1,3,1,4,
1,3,1412,22,1,
75,1,1159,1413,17,
1414,15,1078,1,-1,
1,5,1415,20,1416,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,49,0,
1,209,1,3,1,
6,1,5,1417,22,
1,69,1,157,1418,
17,1419,15,1101,1,
-1,1,5,1420,20,
1421,4,38,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,49,
0,1,254,1,3,
1,4,1,3,1422,
22,1,114,1,1413,
1423,17,1424,15,1078,
1,-1,1,5,1425,
20,1426,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,52,0,
1,202,1,3,1,
4,1,3,1427,22,
1,62,1,1370,1428,
17,1429,15,1078,1,
-1,1,5,1430,20,
1431,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,56,
0,1,216,1,3,
1,4,1,3,1432,
22,1,76,1,2040,
1433,16,0,530,1,
1478,1434,17,1435,15,
1078,1,-1,1,5,
1436,20,1437,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,53,0,1,213,
1,3,1,4,1,
3,1438,22,1,73,
1,1620,1439,17,1440,
15,1377,1,-1,1,
5,1441,20,1442,4,
24,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,198,1,3,1,
2,1,1,1443,22,
1,58,1,1621,1444,
16,0,661,1,1574,
793,1,172,1445,17,
1446,15,1101,1,-1,
1,5,1447,20,1448,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,48,0,
1,253,1,3,1,
4,1,3,1449,22,
1,113,1,1931,869,
1,2361,824,1,1188,
1450,17,1451,15,1078,
1,-1,1,5,1452,
20,1453,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
51,0,1,221,1,
3,1,6,1,5,
1454,22,1,81,1,
1442,1455,17,1456,15,
1078,1,-1,1,5,
1457,20,1458,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,54,0,1,214,
1,3,1,4,1,
3,1459,22,1,74,
1,1694,1460,16,0,
190,1,942,1461,17,
1462,15,1101,1,-1,
1,5,1463,20,1464,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,55,0,
1,260,1,3,1,
4,1,3,1465,22,
1,120,1,2198,1466,
17,1122,1,0,1126,
1,1195,1467,17,1468,
15,1078,1,-1,1,
5,1469,20,1470,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,48,0,1,
208,1,3,1,6,
1,5,1471,22,1,
68,1,1449,1472,17,
1473,15,1078,1,-1,
1,5,1474,20,1475,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,51,0,1,201,
1,3,1,4,1,
3,1476,22,1,61,
1,1701,1477,17,1478,
15,1136,1,-1,1,
5,1479,20,1480,4,
36,70,0,111,0,
114,0,76,0,111,
0,111,0,112,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
51,0,1,195,1,
3,1,4,1,3,
1481,22,1,55,1,
447,1482,17,1483,15,
1484,4,30,37,0,
86,0,101,0,99,
0,116,0,111,0,
114,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,1,-1,
1,5,1485,20,1486,
4,32,86,0,101,
0,99,0,116,0,
111,0,114,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
95,0,49,0,1,
230,1,3,1,8,
1,7,1487,22,1,
90,1,2075,1488,17,
1122,1,0,1126,1,
1958,1489,17,1122,1,
0,1126,1,188,1490,
17,1491,15,1101,1,
-1,1,5,1492,20,
1493,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,57,0,1,
252,1,3,1,4,
1,3,1494,22,1,
112,1,1657,886,1,
205,1495,17,1496,15,
1101,1,-1,1,5,
1497,20,1498,4,36,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,56,
0,1,251,1,3,
1,4,1,3,1499,
22,1,111,1,2554,
1500,16,0,260,1,
1665,1501,17,1502,15,
1136,1,-1,1,5,
1503,20,1504,4,36,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,1,193,1,3,
1,2,1,1,1505,
22,1,53,1,2227,
894,1,1224,1506,17,
1507,15,1078,1,-1,
1,5,1508,20,1509,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,50,0,
1,220,1,3,1,
6,1,5,1510,22,
1,80,1,223,1511,
17,1512,15,1101,1,
-1,1,5,1513,20,
1514,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,55,0,1,
250,1,3,1,4,
1,3,1515,22,1,
110,1,1730,1516,17,
1517,15,1136,1,-1,
1,5,1518,20,1519,
4,36,70,0,111,
0,114,0,76,0,
111,0,111,0,112,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,52,0,1,196,
1,3,1,4,1,
3,1520,22,1,56,
1,476,1521,17,1522,
15,1523,4,18,37,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,1,-1,1,
5,1524,20,1525,4,
20,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,95,0,52,
0,1,228,1,3,
1,2,1,1,1526,
22,1,88,1,477,
1527,17,1528,15,1523,
1,-1,1,5,1529,
20,1530,4,20,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
95,0,51,0,1,
227,1,3,1,2,
1,1,1531,22,1,
87,1,1231,1532,17,
1533,15,1078,1,-1,
1,5,1534,20,1535,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,57,0,1,207,
1,3,1,6,1,
5,1536,22,1,67,
1,479,1537,17,1538,
15,1523,1,-1,1,
5,1539,20,1540,4,
20,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,95,0,49,
0,1,225,1,3,
1,2,1,1,1541,
22,1,85,1,480,
1542,17,1543,15,1544,
4,26,37,0,76,
0,105,0,115,0,
116,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,1,-1,
1,5,1545,20,1546,
4,28,76,0,105,
0,115,0,116,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,95,0,49,0,
1,229,1,3,1,
4,1,3,1547,22,
1,89,1,1485,1548,
17,1549,15,1078,1,
-1,1,5,1550,20,
1551,4,36,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
200,1,3,1,4,
1,3,1552,22,1,
60,1,1737,1553,16,
0,271,1,1989,902,
1,1990,1554,17,1122,
1,0,1126,1,242,
1555,17,1556,15,1101,
1,-1,1,5,1557,
20,1558,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,54,0,
1,249,1,3,1,
4,1,3,1559,22,
1,109,1,478,1560,
17,1561,15,1523,1,
-1,1,5,1562,20,
1563,4,20,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,95,
0,50,0,1,226,
1,3,1,2,1,
1,1564,22,1,86,
1,1001,1565,17,1566,
15,1203,1,-1,1,
5,1567,20,1568,4,
40,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,56,
0,1,274,1,3,
1,5,1,4,1569,
22,1,134,1,1002,
1570,17,1571,15,1203,
1,-1,1,5,1572,
20,1573,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,1,
267,1,3,1,5,
1,4,1574,22,1,
127,1,12,1575,19,
157,1,12,1576,5,
41,1,2075,1577,16,
0,155,1,1860,830,
1,2021,712,1,2414,
1578,16,0,155,1,
2198,1579,16,0,155,
1,1873,839,1,2310,
1580,16,0,155,1,
1657,886,1,1989,902,
1,1990,1581,16,0,
155,1,31,1582,16,
0,155,1,32,1583,
16,0,155,1,2356,
864,1,2105,813,1,
2106,1584,16,0,155,
1,2359,819,1,2550,
1585,16,0,155,1,
2227,894,1,1901,1586,
16,0,155,1,1802,
780,1,2457,1587,16,
0,466,1,1804,1588,
16,0,155,1,2136,
848,1,2355,807,1,
2029,719,1,2030,725,
1,2031,730,1,2032,
735,1,2033,740,1,
2361,824,1,2035,746,
1,2037,751,1,2366,
1589,16,0,269,1,
1931,869,1,2041,762,
1,2043,767,1,2045,
772,1,1775,1590,16,
0,155,1,2039,756,
1,1574,793,1,1958,
1591,16,0,155,1,
13,1592,19,254,1,
13,1593,5,33,1,
1860,830,1,2416,1594,
17,1595,15,1596,4,
22,37,0,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,1,-1,
1,5,1597,20,1598,
4,24,83,0,116,
0,97,0,116,0,
101,0,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,1,158,1,3,
1,6,1,5,1599,
22,1,17,1,2418,
1600,16,0,547,1,
2310,1601,16,0,252,
1,1657,886,1,2029,
719,1,2136,848,1,
2032,735,1,1989,902,
1,32,1602,16,0,
378,1,2105,813,1,
2227,894,1,1574,793,
1,2454,1603,17,1604,
15,1605,4,20,37,
0,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,1,
-1,1,5,1606,20,
1607,4,22,83,0,
116,0,97,0,116,
0,101,0,66,0,
111,0,100,0,121,
0,95,0,50,0,
1,157,1,3,1,
3,1,2,1608,22,
1,16,1,2456,1609,
17,1610,15,1605,1,
-1,1,5,1611,20,
1612,4,22,83,0,
116,0,97,0,116,
0,101,0,66,0,
111,0,100,0,121,
0,95,0,49,0,
1,156,1,3,1,
2,1,1,1613,22,
1,15,1,2021,712,
1,1802,780,1,2355,
807,1,2356,864,1,
2030,725,1,2031,730,
1,2359,819,1,2033,
740,1,2361,824,1,
2035,746,1,2037,751,
1,2039,756,1,1931,
869,1,2041,762,1,
1873,839,1,2043,767,
1,2045,772,1,2494,
1614,16,0,666,1,
14,1615,19,144,1,
14,1616,5,104,1,
1260,1076,1,1011,1082,
1,1514,1088,1,9,
1093,1,10,1617,17,
1618,15,1619,4,48,
37,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
76,0,105,0,115,
0,116,0,1,-1,
1,5,140,1,0,
1,0,1620,22,1,
18,1,262,1099,1,
1267,1105,1,1521,1110,
1,1773,1621,16,0,
148,1,19,1127,1,
20,1622,16,0,142,
1,2281,1134,1,525,
1195,1,2539,1623,17,
1624,15,1619,1,-1,
1,5,140,1,0,
1,0,1620,1,30,
1625,17,1626,15,1619,
1,-1,1,5,1627,
20,1628,4,50,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
95,0,50,0,1,
160,1,3,1,4,
1,3,1629,22,1,
20,1,283,1157,1,
2548,1630,16,0,142,
1,40,1146,1,41,
1631,17,1632,15,1633,
4,26,37,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
76,0,105,0,115,
0,116,0,1,-1,
1,5,600,1,0,
1,0,1634,22,1,
137,1,42,1635,17,
1636,15,1637,4,38,
37,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,1638,20,1639,
4,40,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,279,1,
3,1,2,1,1,
1640,22,1,140,1,
44,1162,1,47,1163,
1,48,1169,1,49,
1175,1,50,1180,1,
51,1185,1,305,1190,
1,63,1201,1,66,
1207,1,67,1212,1,
1478,1434,1,69,1222,
1,70,1227,1,68,
1217,1,827,1359,1,
1013,1237,1,1332,1242,
1,74,1232,1,82,
1263,1,1296,1152,1,
1341,1280,1,328,1285,
1,1303,1290,1,1096,
1295,1,93,1301,1,
1550,1306,1,352,1313,
1,2364,1641,17,1642,
15,1619,1,-1,1,
5,1643,20,1644,4,
50,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,95,0,49,
0,1,159,1,3,
1,2,1,1,1645,
22,1,19,1,107,
1320,1,1114,1325,1,
1048,1247,1,1370,1428,
1,118,1327,1,1123,
1332,1,371,1337,1,
1377,1343,1,375,1348,
1,377,1354,1,379,
1392,1,380,1364,1,
883,1370,1,373,1382,
1,130,1387,1,143,
1397,1,2403,1646,17,
1647,15,1619,1,-1,
1,5,140,1,0,
1,0,1620,1,1152,
1403,1,387,1648,16,
0,565,1,1406,1408,
1,2412,1649,16,0,
142,1,1159,1413,1,
157,1418,1,1413,1423,
1,1665,1501,1,412,
1650,16,0,574,1,
1094,1651,16,0,602,
1,172,1445,1,1188,
1450,1,437,1652,16,
0,644,1,1442,1455,
1,1694,1653,16,0,
148,1,942,1461,1,
1195,1467,1,1449,1472,
1,1701,1477,1,447,
1482,1,188,1490,1,
205,1495,1,459,1654,
17,1655,15,1633,1,
-1,1,5,600,1,
0,1,0,1634,1,
461,1656,16,0,602,
1,464,1657,17,1658,
15,1633,1,-1,1,
5,1659,20,1660,4,
28,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
95,0,50,0,1,
278,1,3,1,4,
1,3,1661,22,1,
139,1,1224,1506,1,
223,1511,1,1730,1516,
1,476,1521,1,477,
1527,1,1231,1532,1,
479,1537,1,480,1542,
1,1485,1548,1,242,
1555,1,478,1560,1,
481,1662,17,1663,15,
1633,1,-1,1,5,
1664,20,1665,4,28,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,95,
0,49,0,1,277,
1,3,1,2,1,
1,1666,22,1,138,
1,1001,1565,1,1002,
1570,1,15,1667,19,
357,1,15,1668,5,
6,1,2554,1669,16,
0,480,1,1114,1670,
16,0,355,1,1621,
1671,16,0,643,1,
40,1672,16,0,561,
1,19,1127,1,9,
1093,1,16,1673,19,
136,1,16,1674,5,
135,1,256,1675,16,
0,187,1,1261,1676,
16,0,187,1,509,
1677,16,0,187,1,
9,1678,16,0,134,
1,2021,712,1,2372,
1679,17,1680,15,1681,
4,12,37,0,69,
0,118,0,101,0,
110,0,116,0,1,
-1,1,5,1682,20,
1683,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
51,0,48,0,1,
316,1,3,1,2,
1,1,1684,22,1,
177,1,1775,1685,16,
0,187,1,2029,719,
1,2030,725,1,2031,
730,1,2032,735,1,
2033,740,1,277,1686,
16,0,187,1,2035,
746,1,2538,1687,16,
0,471,1,2037,751,
1,2039,756,1,32,
1688,16,0,187,1,
2041,762,1,2043,767,
1,2045,772,1,40,
1689,16,0,166,1,
41,1690,16,0,187,
1,1297,1691,16,0,
187,1,43,1692,16,
0,187,1,44,1693,
16,0,166,1,1802,
780,1,1804,1694,16,
0,187,1,299,1695,
16,0,187,1,2310,
1696,16,0,187,1,
52,1697,16,0,187,
1,1515,1698,16,0,
187,1,525,1699,16,
0,187,1,62,1700,
16,0,202,1,63,
1701,16,0,166,1,
2075,1702,16,0,187,
1,1574,793,1,71,
1703,16,0,187,1,
1833,1704,16,0,323,
1,1834,1705,16,0,
187,1,79,1706,16,
0,187,1,1335,1707,
16,0,187,1,2136,
848,1,322,1708,16,
0,187,1,76,1709,
16,0,187,1,85,
1710,16,0,187,1,
89,1711,16,0,187,
1,346,1712,16,0,
187,1,2355,807,1,
2356,864,1,2106,1713,
16,0,187,1,2359,
819,1,2361,824,1,
1860,830,1,97,1714,
16,0,187,1,2368,
1715,17,1716,15,1681,
1,-1,1,5,1717,
20,1718,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,51,0,52,0,
1,320,1,3,1,
2,1,1,1719,22,
1,181,1,2369,1720,
17,1721,15,1681,1,
-1,1,5,1722,20,
1723,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
51,0,51,0,1,
319,1,3,1,2,
1,1,1724,22,1,
180,1,2370,1725,17,
1726,15,1681,1,-1,
1,5,1727,20,1728,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,51,
0,50,0,1,318,
1,3,1,2,1,
1,1729,22,1,179,
1,112,1730,16,0,
187,1,1117,1731,16,
0,187,1,2373,1732,
17,1733,15,1681,1,
-1,1,5,1734,20,
1735,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
50,0,57,0,1,
315,1,3,1,2,
1,1,1736,22,1,
176,1,2374,1737,17,
1738,15,1681,1,-1,
1,5,1739,20,1740,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,50,
0,56,0,1,314,
1,3,1,2,1,
1,1741,22,1,175,
1,1873,839,1,2376,
1742,17,1743,15,1681,
1,-1,1,5,1744,
20,1745,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,54,0,
1,312,1,3,1,
2,1,1,1746,22,
1,173,1,1875,1747,
16,0,444,1,2378,
1748,17,1749,15,1681,
1,-1,1,5,1750,
20,1751,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,52,0,
1,310,1,3,1,
2,1,1,1752,22,
1,171,1,2379,1753,
17,1754,15,1681,1,
-1,1,5,1755,20,
1756,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
50,0,51,0,1,
309,1,3,1,2,
1,1,1757,22,1,
170,1,2380,1758,17,
1759,15,1681,1,-1,
1,5,1760,20,1761,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,50,
0,50,0,1,308,
1,3,1,2,1,
1,1762,22,1,169,
1,2381,1763,17,1764,
15,1681,1,-1,1,
5,1765,20,1766,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,50,0,
49,0,1,307,1,
3,1,2,1,1,
1767,22,1,168,1,
2382,1768,17,1769,15,
1681,1,-1,1,5,
1770,20,1771,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,50,0,48,
0,1,306,1,3,
1,2,1,1,1772,
22,1,167,1,124,
1773,16,0,187,1,
2384,1774,17,1775,15,
1681,1,-1,1,5,
1776,20,1777,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,56,
0,1,304,1,3,
1,2,1,1,1778,
22,1,165,1,2385,
1779,17,1780,15,1681,
1,-1,1,5,1781,
20,1782,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,55,0,
1,303,1,3,1,
2,1,1,1783,22,
1,164,1,2386,1784,
17,1785,15,1681,1,
-1,1,5,1786,20,
1787,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,54,0,1,
302,1,3,1,2,
1,1,1788,22,1,
163,1,2387,1789,17,
1790,15,1681,1,-1,
1,5,1791,20,1792,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,53,0,1,301,
1,3,1,2,1,
1,1793,22,1,162,
1,2388,1794,17,1795,
15,1681,1,-1,1,
5,1796,20,1797,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
52,0,1,300,1,
3,1,2,1,1,
1798,22,1,161,1,
2389,1799,17,1800,15,
1681,1,-1,1,5,
1801,20,1802,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,51,
0,1,299,1,3,
1,2,1,1,1803,
22,1,160,1,2390,
1804,17,1805,15,1681,
1,-1,1,5,1806,
20,1807,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,50,0,
1,298,1,3,1,
2,1,1,1808,22,
1,159,1,2391,1809,
17,1810,15,1681,1,
-1,1,5,1811,20,
1812,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,49,0,1,
297,1,3,1,2,
1,1,1813,22,1,
158,1,2392,1814,17,
1815,15,1681,1,-1,
1,5,1816,20,1817,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,48,0,1,296,
1,3,1,2,1,
1,1818,22,1,157,
1,2393,1819,17,1820,
15,1681,1,-1,1,
5,1821,20,1822,4,
14,69,0,118,0,
101,0,110,0,116,
0,95,0,57,0,
1,295,1,3,1,
2,1,1,1823,22,
1,156,1,2394,1824,
17,1825,15,1681,1,
-1,1,5,1826,20,
1827,4,14,69,0,
118,0,101,0,110,
0,116,0,95,0,
56,0,1,294,1,
3,1,2,1,1,
1828,22,1,155,1,
2395,1829,17,1830,15,
1681,1,-1,1,5,
1831,20,1832,4,14,
69,0,118,0,101,
0,110,0,116,0,
95,0,55,0,1,
293,1,3,1,2,
1,1,1833,22,1,
154,1,137,1834,16,
0,187,1,2397,1835,
17,1836,15,1681,1,
-1,1,5,1837,20,
1838,4,14,69,0,
118,0,101,0,110,
0,116,0,95,0,
53,0,1,291,1,
3,1,2,1,1,
1839,22,1,152,1,
2398,1840,17,1841,15,
1681,1,-1,1,5,
1842,20,1843,4,14,
69,0,118,0,101,
0,110,0,116,0,
95,0,52,0,1,
290,1,3,1,2,
1,1,1844,22,1,
151,1,2399,1845,17,
1846,15,1681,1,-1,
1,5,1847,20,1848,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,51,
0,1,289,1,3,
1,2,1,1,1849,
22,1,150,1,2400,
1850,17,1851,15,1681,
1,-1,1,5,1852,
20,1853,4,14,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,1,288,
1,3,1,2,1,
1,1854,22,1,149,
1,2401,1855,17,1856,
15,1681,1,-1,1,
5,1857,20,1858,4,
14,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
1,287,1,3,1,
2,1,1,1859,22,
1,148,1,2402,1860,
16,0,353,1,1901,
1861,16,0,187,1,
102,1862,16,0,187,
1,1153,1863,16,0,
187,1,151,1864,16,
0,187,1,1407,1865,
16,0,187,1,1659,
1866,16,0,187,1,
406,1867,16,0,187,
1,381,1868,16,0,
187,1,1371,1869,16,
0,187,1,2105,813,
1,166,1870,16,0,
187,1,1622,1871,16,
0,187,1,1931,869,
1,1932,1872,16,0,
478,1,1933,1873,16,
0,187,1,1876,1874,
16,0,187,1,431,
1875,16,0,187,1,
1585,1876,16,0,187,
1,182,1877,16,0,
187,1,1189,1878,16,
0,187,1,2371,1879,
17,1880,15,1681,1,
-1,1,5,1881,20,
1882,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
51,0,49,0,1,
317,1,3,1,2,
1,1,1883,22,1,
178,1,1695,1884,16,
0,187,1,2198,1885,
16,0,187,1,2375,
1886,17,1887,15,1681,
1,-1,1,5,1888,
20,1889,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,55,0,
1,313,1,3,1,
2,1,1,1890,22,
1,174,1,2377,1891,
17,1892,15,1681,1,
-1,1,5,1893,20,
1894,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
50,0,53,0,1,
311,1,3,1,2,
1,1,1895,22,1,
172,1,447,1896,16,
0,187,1,199,1897,
16,0,187,1,2383,
1898,17,1899,15,1681,
1,-1,1,5,1900,
20,1901,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,57,0,
1,305,1,3,1,
2,1,1,1902,22,
1,166,1,1958,1903,
16,0,187,1,1657,
886,1,1658,1904,16,
0,665,1,2555,1905,
16,0,187,1,459,
1906,16,0,187,1,
462,1907,16,0,187,
1,2396,1908,17,1909,
15,1681,1,-1,1,
5,1910,20,1911,4,
14,69,0,118,0,
101,0,110,0,116,
0,95,0,54,0,
1,292,1,3,1,
2,1,1,1912,22,
1,153,1,217,1913,
16,0,187,1,2227,
894,1,1225,1914,16,
0,187,1,1479,1915,
16,0,187,1,1731,
1916,16,0,187,1,
1989,902,1,1990,1917,
16,0,187,1,1443,
1918,16,0,187,1,
236,1919,16,0,187,
1,1756,1920,16,0,
187,1,17,1921,19,
154,1,17,1922,5,
116,1,1,1923,17,
1924,15,1925,4,18,
37,0,84,0,121,
0,112,0,101,0,
110,0,97,0,109,
0,101,0,1,-1,
1,5,1926,20,1927,
4,20,84,0,121,
0,112,0,101,0,
110,0,97,0,109,
0,101,0,95,0,
55,0,1,286,1,
3,1,2,1,1,
1928,22,1,147,1,
2,1929,17,1930,15,
1925,1,-1,1,5,
1931,20,1932,4,20,
84,0,121,0,112,
0,101,0,110,0,
97,0,109,0,101,
0,95,0,54,0,
1,285,1,3,1,
2,1,1,1933,22,
1,146,1,3,1934,
17,1935,15,1925,1,
-1,1,5,1936,20,
1937,4,20,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,95,
0,53,0,1,284,
1,3,1,2,1,
1,1938,22,1,145,
1,4,1939,17,1940,
15,1925,1,-1,1,
5,1941,20,1942,4,
20,84,0,121,0,
112,0,101,0,110,
0,97,0,109,0,
101,0,95,0,52,
0,1,283,1,3,
1,2,1,1,1943,
22,1,144,1,5,
1944,17,1945,15,1925,
1,-1,1,5,1946,
20,1947,4,20,84,
0,121,0,112,0,
101,0,110,0,97,
0,109,0,101,0,
95,0,51,0,1,
282,1,3,1,2,
1,1,1948,22,1,
143,1,6,1949,17,
1950,15,1925,1,-1,
1,5,1951,20,1952,
4,20,84,0,121,
0,112,0,101,0,
110,0,97,0,109,
0,101,0,95,0,
50,0,1,281,1,
3,1,2,1,1,
1953,22,1,142,1,
7,1954,17,1955,15,
1925,1,-1,1,5,
1956,20,1957,4,20,
84,0,121,0,112,
0,101,0,110,0,
97,0,109,0,101,
0,95,0,49,0,
1,280,1,3,1,
2,1,1,1958,22,
1,141,1,1514,1088,
1,9,1093,1,10,
1617,1,262,1099,1,
1267,1105,1,1521,1110,
1,1773,1959,16,0,
233,1,19,1127,1,
20,1960,16,0,152,
1,2281,1134,1,525,
1195,1,2539,1623,1,
30,1625,1,283,1157,
1,2548,1961,16,0,
634,1,1010,1962,16,
0,591,1,40,1146,
1,41,1631,1,42,
1635,1,44,1162,1,
1260,1076,1,47,1163,
1,1303,1290,1,49,
1175,1,50,1180,1,
48,1169,1,305,1190,
1,51,1185,1,61,
1963,16,0,194,1,
63,1201,1,66,1207,
1,67,1212,1,68,
1217,1,69,1222,1,
70,1227,1,73,1964,
16,0,204,1,827,
1359,1,1013,1237,1,
328,1285,1,74,1232,
1,82,1263,1,1840,
1965,16,0,360,1,
1341,1280,1,1094,1966,
16,0,660,1,1096,
1295,1,93,1301,1,
1550,1306,1,352,1313,
1,2364,1641,1,1011,
1082,1,107,1320,1,
1114,1325,1,1048,1247,
1,1871,1967,16,0,
373,1,1370,1428,1,
1478,1434,1,118,1327,
1,1123,1332,1,1332,
1242,1,1377,1343,1,
375,1348,1,1882,1968,
16,0,404,1,377,
1354,1,379,1392,1,
380,1364,1,130,1387,
1,2074,1969,16,0,
563,1,371,1337,1,
373,1382,1,1012,1970,
16,0,593,1,143,
1397,1,2403,1646,1,
1152,1403,1,1406,1408,
1,2412,1971,16,0,
359,1,1159,1413,1,
157,1418,1,1413,1423,
1,883,1370,1,1296,
1152,1,172,1445,1,
1665,1501,1,1939,1972,
16,0,452,1,1188,
1450,1,1442,1455,1,
188,1490,1,942,1461,
1,1195,1467,1,1449,
1472,1,1701,1477,1,
447,1482,1,205,1495,
1,459,1654,1,464,
1657,1,2197,1973,16,
0,654,1,1224,1506,
1,223,1511,1,1730,
1516,1,476,1521,1,
477,1527,1,1231,1532,
1,479,1537,1,480,
1542,1,1485,1548,1,
242,1555,1,478,1560,
1,481,1662,1,1001,
1565,1,1002,1570,1,
18,1974,19,489,1,
18,1975,5,83,1,
1011,1082,1,1012,1976,
16,0,487,1,1013,
1237,1,262,1099,1,
1267,1977,16,0,487,
1,515,1978,16,0,
487,1,1521,1979,16,
0,487,1,525,1195,
1,283,1157,1,40,
1146,1,42,1980,16,
0,487,1,44,1162,
1,47,1163,1,1303,
1981,16,0,487,1,
1555,1982,16,0,487,
1,50,1180,1,2561,
1983,16,0,487,1,
49,1175,1,48,1169,
1,51,1185,1,63,
1201,1,305,1190,1,
66,1207,1,67,1212,
1,68,1217,1,69,
1222,1,70,1227,1,
73,1984,16,0,487,
1,74,1232,1,328,
1285,1,1048,1985,16,
0,487,1,82,1986,
16,0,487,1,1840,
1987,16,0,487,1,
1591,1988,16,0,487,
1,1341,1989,16,0,
487,1,1096,1295,1,
93,1301,1,352,1313,
1,107,1990,16,0,
487,1,1114,1325,1,
118,1991,16,0,487,
1,1123,1992,16,0,
487,1,371,1337,1,
1628,1993,16,0,487,
1,375,1348,1,1882,
1994,16,0,487,1,
377,1354,1,379,1392,
1,380,1364,1,883,
1995,16,0,487,1,
373,1382,1,130,1996,
16,0,487,1,143,
1997,16,0,487,1,
387,1998,16,0,487,
1,1159,1999,16,0,
487,1,157,2000,16,
0,487,1,1413,2001,
16,0,487,1,1665,
2002,16,0,487,1,
412,2003,16,0,487,
1,1377,2004,16,0,
487,1,172,2005,16,
0,487,1,1939,2006,
16,0,487,1,437,
2007,16,0,487,1,
188,2008,16,0,487,
1,942,2009,16,0,
487,1,1195,2010,16,
0,487,1,1449,2011,
16,0,487,1,1701,
2012,16,0,487,1,
447,1482,1,205,2013,
16,0,487,1,827,
2014,16,0,487,1,
223,2015,16,0,487,
1,476,1521,1,477,
1527,1,1231,2016,16,
0,487,1,479,1537,
1,480,1542,1,1485,
2017,16,0,487,1,
1737,2018,16,0,487,
1,242,2019,16,0,
487,1,478,1560,1,
1001,1565,1,1002,1570,
1,19,2020,19,225,
1,19,2021,5,171,
1,256,2022,16,0,
223,1,1261,2023,16,
0,223,1,1011,1082,
1,1012,2024,16,0,
477,1,1515,2025,16,
0,223,1,262,1099,
1,1267,2026,16,0,
477,1,2021,712,1,
2075,2027,16,0,223,
1,1521,2028,16,0,
477,1,1775,2029,16,
0,223,1,2029,719,
1,2030,725,1,2031,
730,1,2032,735,1,
2033,740,1,277,2030,
16,0,223,1,2035,
746,1,2037,751,1,
2039,756,1,32,2031,
16,0,223,1,2041,
762,1,2043,767,1,
2045,772,1,40,1146,
1,41,2032,16,0,
223,1,42,2033,16,
0,477,1,43,2034,
16,0,223,1,44,
1162,1,1802,780,1,
1804,2035,16,0,223,
1,1303,2036,16,0,
477,1,49,1175,1,
47,1163,1,48,1169,
1,52,2037,16,0,
223,1,50,1180,1,
51,1185,1,509,2038,
16,0,223,1,299,
2039,16,0,223,1,
283,1157,1,63,1201,
1,305,1190,1,66,
1207,1,67,1212,1,
68,1217,1,69,1222,
1,70,1227,1,71,
2040,16,0,223,1,
73,2041,16,0,477,
1,74,1232,1,1013,
1237,1,76,2042,16,
0,223,1,1834,2043,
16,0,223,1,1048,
2044,16,0,477,1,
79,2045,16,0,223,
1,1335,2046,16,0,
223,1,2136,848,1,
82,2047,16,0,477,
1,1840,2048,16,0,
477,1,1297,2049,16,
0,223,1,85,2050,
16,0,223,1,1341,
2051,16,0,477,1,
89,2052,16,0,223,
1,1096,1295,1,93,
1301,1,322,2053,16,
0,223,1,2355,807,
1,2356,864,1,2106,
2054,16,0,223,1,
1555,2055,16,0,477,
1,2359,819,1,827,
2056,16,0,477,1,
2361,824,1,1860,830,
1,97,2057,16,0,
223,1,1114,1325,1,
112,2058,16,0,223,
1,1117,2059,16,0,
223,1,352,1313,1,
1873,839,1,102,2060,
16,0,223,1,118,
2061,16,0,477,1,
1123,2062,16,0,477,
1,371,1337,1,515,
2063,16,0,477,1,
107,2064,16,0,477,
1,124,2065,16,0,
223,1,1882,2066,16,
0,477,1,2555,2067,
16,0,223,1,379,
1392,1,380,1364,1,
130,2068,16,0,477,
1,346,2069,16,0,
223,1,2561,2070,16,
0,477,1,373,1382,
1,387,2071,16,0,
477,1,137,2072,16,
0,223,1,377,1354,
1,143,2073,16,0,
477,1,1901,2074,16,
0,223,1,1153,2075,
16,0,223,1,375,
1348,1,151,2076,16,
0,223,1,1407,2077,
16,0,223,1,1659,
2078,16,0,223,1,
1159,2079,16,0,477,
1,381,2080,16,0,
223,1,157,2081,16,
0,477,1,1413,2082,
16,0,477,1,883,
2083,16,0,477,1,
1371,2084,16,0,223,
1,328,1285,1,2105,
813,1,166,2085,16,
0,223,1,1377,2086,
16,0,477,1,1622,
2087,16,0,223,1,
406,2088,16,0,223,
1,1574,793,1,172,
2089,16,0,477,1,
1931,869,1,412,2090,
16,0,477,1,1933,
2091,16,0,223,1,
1876,2092,16,0,223,
1,431,2093,16,0,
223,1,1585,2094,16,
0,223,1,182,2095,
16,0,223,1,1628,
2096,16,0,477,1,
1189,2097,16,0,223,
1,437,2098,16,0,
477,1,1591,2099,16,
0,477,1,188,2100,
16,0,477,1,1695,
2101,16,0,223,1,
2198,2102,16,0,223,
1,1195,2103,16,0,
477,1,1449,2104,16,
0,477,1,1701,2105,
16,0,477,1,447,
2106,16,0,223,1,
2310,2107,16,0,223,
1,1958,2108,16,0,
223,1,525,2109,16,
0,223,1,1657,886,
1,205,2110,16,0,
477,1,199,2111,16,
0,223,1,459,2112,
16,0,223,1,462,
2113,16,0,223,1,
1665,2114,16,0,477,
1,217,2115,16,0,
223,1,2227,894,1,
942,2116,16,0,477,
1,1225,2117,16,0,
223,1,223,2118,16,
0,477,1,1479,2119,
16,0,223,1,1731,
2120,16,0,223,1,
477,1527,1,1231,2121,
16,0,477,1,479,
1537,1,480,1542,1,
1485,2122,16,0,477,
1,1737,2123,16,0,
477,1,1989,902,1,
1990,2124,16,0,223,
1,1443,2125,16,0,
223,1,236,2126,16,
0,223,1,476,1521,
1,242,2127,16,0,
477,1,478,1560,1,
1939,2128,16,0,477,
1,1001,1565,1,1002,
1570,1,1756,2129,16,
0,223,1,20,2130,
19,457,1,20,2131,
5,83,1,1011,1082,
1,1012,2132,16,0,
455,1,1013,1237,1,
262,1099,1,1267,2133,
16,0,455,1,515,
2134,16,0,455,1,
1521,2135,16,0,455,
1,525,1195,1,283,
1157,1,40,1146,1,
42,2136,16,0,455,
1,44,1162,1,47,
1163,1,1303,2137,16,
0,455,1,1555,2138,
16,0,455,1,50,
1180,1,2561,2139,16,
0,455,1,49,1175,
1,48,1169,1,51,
1185,1,63,1201,1,
305,1190,1,66,1207,
1,67,1212,1,68,
1217,1,69,1222,1,
70,1227,1,73,2140,
16,0,455,1,74,
1232,1,328,2141,16,
0,455,1,1048,2142,
16,0,455,1,82,
2143,16,0,455,1,
1840,2144,16,0,455,
1,1591,2145,16,0,
455,1,1341,2146,16,
0,455,1,1096,1295,
1,93,1301,1,352,
2147,16,0,455,1,
107,2148,16,0,455,
1,1114,1325,1,118,
2149,16,0,455,1,
1123,2150,16,0,455,
1,371,1337,1,1628,
2151,16,0,455,1,
375,1348,1,1882,2152,
16,0,455,1,377,
1354,1,379,1392,1,
380,1364,1,883,2153,
16,0,455,1,373,
1382,1,130,2154,16,
0,455,1,143,2155,
16,0,455,1,387,
2156,16,0,455,1,
1159,2157,16,0,455,
1,157,2158,16,0,
455,1,1413,2159,16,
0,455,1,1665,2160,
16,0,455,1,412,
2161,16,0,455,1,
1377,2162,16,0,455,
1,172,2163,16,0,
455,1,1939,2164,16,
0,455,1,437,2165,
16,0,455,1,188,
2166,16,0,455,1,
942,2167,16,0,455,
1,1195,2168,16,0,
455,1,1449,2169,16,
0,455,1,1701,2170,
16,0,455,1,447,
1482,1,205,2171,16,
0,455,1,827,2172,
16,0,455,1,223,
2173,16,0,455,1,
476,1521,1,477,1527,
1,1231,2174,16,0,
455,1,479,1537,1,
480,1542,1,1485,2175,
16,0,455,1,1737,
2176,16,0,455,1,
242,2177,16,0,455,
1,478,1560,1,1001,
1565,1,1002,1570,1,
21,2178,19,450,1,
21,2179,5,83,1,
1011,1082,1,1012,2180,
16,0,448,1,1013,
1237,1,262,1099,1,
1267,2181,16,0,448,
1,515,2182,16,0,
448,1,1521,2183,16,
0,448,1,525,1195,
1,283,1157,1,40,
1146,1,42,2184,16,
0,448,1,44,1162,
1,47,1163,1,1303,
2185,16,0,448,1,
1555,2186,16,0,448,
1,50,1180,1,2561,
2187,16,0,448,1,
49,1175,1,48,1169,
1,51,1185,1,63,
1201,1,305,1190,1,
66,1207,1,67,1212,
1,68,1217,1,69,
1222,1,70,1227,1,
73,2188,16,0,448,
1,74,1232,1,328,
2189,16,0,448,1,
1048,2190,16,0,448,
1,82,2191,16,0,
448,1,1840,2192,16,
0,448,1,1591,2193,
16,0,448,1,1341,
2194,16,0,448,1,
1096,1295,1,93,1301,
1,352,2195,16,0,
448,1,107,2196,16,
0,448,1,1114,1325,
1,118,2197,16,0,
448,1,1123,2198,16,
0,448,1,371,1337,
1,1628,2199,16,0,
448,1,375,1348,1,
1882,2200,16,0,448,
1,377,1354,1,379,
1392,1,380,1364,1,
883,2201,16,0,448,
1,373,1382,1,130,
2202,16,0,448,1,
143,2203,16,0,448,
1,387,2204,16,0,
448,1,1159,2205,16,
0,448,1,157,2206,
16,0,448,1,1413,
2207,16,0,448,1,
1665,2208,16,0,448,
1,412,2209,16,0,
448,1,1377,2210,16,
0,448,1,172,2211,
16,0,448,1,1939,
2212,16,0,448,1,
437,2213,16,0,448,
1,188,2214,16,0,
448,1,942,2215,16,
0,448,1,1195,2216,
16,0,448,1,1449,
2217,16,0,448,1,
1701,2218,16,0,448,
1,447,1482,1,205,
2219,16,0,448,1,
827,2220,16,0,448,
1,223,2221,16,0,
448,1,476,1521,1,
477,1527,1,1231,2222,
16,0,448,1,479,
1537,1,480,1542,1,
1485,2223,16,0,448,
1,1737,2224,16,0,
448,1,242,2225,16,
0,448,1,478,1560,
1,1001,1565,1,1002,
1570,1,22,2226,19,
436,1,22,2227,5,
83,1,1011,1082,1,
1012,2228,16,0,434,
1,1013,1237,1,262,
1099,1,1267,2229,16,
0,434,1,515,2230,
16,0,434,1,1521,
2231,16,0,434,1,
525,1195,1,283,1157,
1,40,1146,1,42,
2232,16,0,434,1,
44,1162,1,47,1163,
1,1303,2233,16,0,
434,1,1555,2234,16,
0,434,1,50,1180,
1,2561,2235,16,0,
434,1,49,1175,1,
48,1169,1,51,1185,
1,63,1201,1,305,
1190,1,66,1207,1,
67,1212,1,68,1217,
1,69,1222,1,70,
1227,1,73,2236,16,
0,434,1,74,1232,
1,328,2237,16,0,
434,1,1048,2238,16,
0,434,1,82,2239,
16,0,434,1,1840,
2240,16,0,434,1,
1591,2241,16,0,434,
1,1341,2242,16,0,
434,1,1096,1295,1,
93,1301,1,352,2243,
16,0,434,1,107,
2244,16,0,434,1,
1114,1325,1,118,2245,
16,0,434,1,1123,
2246,16,0,434,1,
371,1337,1,1628,2247,
16,0,434,1,375,
1348,1,1882,2248,16,
0,434,1,377,1354,
1,379,1392,1,380,
1364,1,883,2249,16,
0,434,1,373,1382,
1,130,2250,16,0,
434,1,143,2251,16,
0,434,1,387,2252,
16,0,434,1,1159,
2253,16,0,434,1,
157,2254,16,0,434,
1,1413,2255,16,0,
434,1,1665,2256,16,
0,434,1,412,2257,
16,0,434,1,1377,
2258,16,0,434,1,
172,2259,16,0,434,
1,1939,2260,16,0,
434,1,437,2261,16,
0,434,1,188,2262,
16,0,434,1,942,
2263,16,0,434,1,
1195,2264,16,0,434,
1,1449,2265,16,0,
434,1,1701,2266,16,
0,434,1,447,1482,
1,205,2267,16,0,
434,1,827,2268,16,
0,434,1,223,2269,
16,0,434,1,476,
1521,1,477,1527,1,
1231,2270,16,0,434,
1,479,1537,1,480,
1542,1,1485,2271,16,
0,434,1,1737,2272,
16,0,434,1,242,
2273,16,0,434,1,
478,1560,1,1001,1565,
1,1002,1570,1,23,
2274,19,502,1,23,
2275,5,36,1,2075,
2276,16,0,500,1,
1860,830,1,2198,2277,
16,0,500,1,1873,
839,1,2310,2278,16,
0,500,1,1657,886,
1,1989,902,1,1990,
2279,16,0,500,1,
1775,2280,16,0,500,
1,32,2281,16,0,
500,1,2356,864,1,
2105,813,1,2106,2282,
16,0,500,1,2359,
819,1,2227,894,1,
1901,2283,16,0,500,
1,1802,780,1,2021,
712,1,1804,2284,16,
0,500,1,2136,848,
1,2355,807,1,2029,
719,1,2030,725,1,
2031,730,1,2032,735,
1,2033,740,1,2361,
824,1,2035,746,1,
2037,751,1,2039,756,
1,1931,869,1,2041,
762,1,2043,767,1,
2045,772,1,1574,793,
1,1958,2285,16,0,
500,1,24,2286,19,
177,1,24,2287,5,
5,1,44,2288,16,
0,175,1,377,2289,
16,0,538,1,40,
2290,16,0,668,1,
63,2291,16,0,196,
1,373,2292,16,0,
534,1,25,2293,19,
332,1,25,2294,5,
172,1,256,2295,16,
0,543,1,1261,2296,
16,0,543,1,1011,
1082,1,1012,2297,16,
0,330,1,1515,2298,
16,0,543,1,262,
1099,1,1267,2299,16,
0,330,1,2021,712,
1,2075,2300,16,0,
543,1,1521,2301,16,
0,330,1,1775,2302,
16,0,543,1,2029,
719,1,2030,725,1,
2031,730,1,2032,735,
1,2033,740,1,277,
2303,16,0,543,1,
2035,746,1,2037,751,
1,2039,756,1,32,
2304,16,0,543,1,
2041,762,1,2043,767,
1,2045,772,1,40,
1146,1,41,2305,16,
0,543,1,42,2306,
16,0,330,1,43,
2307,16,0,543,1,
44,1162,1,1802,780,
1,1804,2308,16,0,
543,1,48,1169,1,
49,1175,1,47,1163,
1,51,1185,1,52,
2309,16,0,543,1,
50,1180,1,305,1190,
1,509,2310,16,0,
543,1,299,2311,16,
0,543,1,62,2312,
16,0,543,1,63,
1201,1,66,1207,1,
67,1212,1,68,1217,
1,69,1222,1,70,
1227,1,71,2313,16,
0,543,1,283,1157,
1,73,2314,16,0,
330,1,74,1232,1,
1013,1237,1,76,2315,
16,0,543,1,1834,
2316,16,0,543,1,
1048,1247,1,79,2317,
16,0,543,1,1335,
2318,16,0,543,1,
2136,848,1,82,2319,
16,0,330,1,1840,
2320,16,0,330,1,
1297,2321,16,0,543,
1,85,2322,16,0,
543,1,1341,2323,16,
0,330,1,89,2324,
16,0,543,1,1303,
2325,16,0,330,1,
1096,1295,1,93,1301,
1,322,2326,16,0,
543,1,2355,807,1,
2356,864,1,2106,2327,
16,0,543,1,1555,
2328,16,0,330,1,
2359,819,1,827,2329,
16,0,330,1,2361,
824,1,1860,830,1,
97,2330,16,0,543,
1,1114,1325,1,112,
2331,16,0,543,1,
1117,2332,16,0,543,
1,352,1313,1,1873,
839,1,102,2333,16,
0,543,1,118,1327,
1,1123,2334,16,0,
330,1,371,1337,1,
515,2335,16,0,330,
1,107,2336,16,0,
330,1,124,2337,16,
0,543,1,1882,2338,
16,0,330,1,2555,
2339,16,0,543,1,
379,1392,1,380,1364,
1,130,1387,1,346,
2340,16,0,543,1,
2561,2341,16,0,330,
1,373,1382,1,387,
2342,16,0,330,1,
137,2343,16,0,543,
1,377,1354,1,143,
2344,16,0,330,1,
1901,2345,16,0,543,
1,1153,2346,16,0,
543,1,375,1348,1,
151,2347,16,0,543,
1,1407,2348,16,0,
543,1,1659,2349,16,
0,543,1,1159,2350,
16,0,330,1,381,
2351,16,0,543,1,
157,2352,16,0,330,
1,1413,2353,16,0,
330,1,883,2354,16,
0,330,1,1371,2355,
16,0,543,1,328,
1285,1,2105,813,1,
166,2356,16,0,543,
1,1377,2357,16,0,
330,1,1622,2358,16,
0,543,1,406,2359,
16,0,543,1,1574,
793,1,172,1445,1,
1931,869,1,412,2360,
16,0,330,1,1933,
2361,16,0,543,1,
1876,2362,16,0,543,
1,431,2363,16,0,
543,1,1585,2364,16,
0,543,1,182,2365,
16,0,543,1,1628,
2366,16,0,330,1,
1189,2367,16,0,543,
1,437,2368,16,0,
330,1,1591,2369,16,
0,330,1,188,1490,
1,1695,2370,16,0,
543,1,2198,2371,16,
0,543,1,1195,2372,
16,0,330,1,1449,
2373,16,0,330,1,
1701,2374,16,0,330,
1,447,2375,16,0,
543,1,2310,2376,16,
0,543,1,1958,2377,
16,0,543,1,525,
2378,16,0,543,1,
1657,886,1,205,2379,
16,0,330,1,199,
2380,16,0,543,1,
459,2381,16,0,543,
1,462,2382,16,0,
543,1,1665,2383,16,
0,330,1,217,2384,
16,0,543,1,2227,
894,1,942,1461,1,
1225,2385,16,0,543,
1,223,2386,16,0,
330,1,1479,2387,16,
0,543,1,1731,2388,
16,0,543,1,477,
1527,1,1231,2389,16,
0,330,1,479,1537,
1,480,1542,1,1485,
2390,16,0,330,1,
1737,2391,16,0,330,
1,1989,902,1,1990,
2392,16,0,543,1,
1443,2393,16,0,543,
1,236,2394,16,0,
543,1,476,1521,1,
242,2395,16,0,330,
1,478,1560,1,1939,
2396,16,0,330,1,
1001,1565,1,1002,1570,
1,1756,2397,16,0,
543,1,26,2398,19,
368,1,26,2399,5,
83,1,1011,1082,1,
1012,2400,16,0,366,
1,1013,1237,1,262,
1099,1,1267,2401,16,
0,366,1,515,2402,
16,0,652,1,1521,
2403,16,0,366,1,
525,1195,1,283,1157,
1,40,1146,1,42,
2404,16,0,366,1,
44,1162,1,47,1163,
1,1303,2405,16,0,
366,1,1555,2406,16,
0,366,1,50,1180,
1,2561,2407,16,0,
366,1,49,1175,1,
48,1169,1,51,1185,
1,63,1201,1,305,
1190,1,66,1207,1,
67,1212,1,68,1217,
1,69,1222,1,70,
1227,1,73,2408,16,
0,366,1,74,1232,
1,328,1285,1,1048,
1247,1,82,2409,16,
0,366,1,1840,2410,
16,0,366,1,1591,
2411,16,0,366,1,
1341,2412,16,0,366,
1,1096,1295,1,93,
1301,1,352,1313,1,
107,2413,16,0,366,
1,1114,1325,1,118,
1327,1,1123,2414,16,
0,366,1,371,1337,
1,1628,2415,16,0,
366,1,375,1348,1,
1882,2416,16,0,366,
1,377,1354,1,379,
1392,1,380,1364,1,
883,2417,16,0,366,
1,373,1382,1,130,
1387,1,143,2418,16,
0,366,1,387,2419,
16,0,366,1,1159,
2420,16,0,366,1,
157,2421,16,0,366,
1,1413,2422,16,0,
366,1,1665,2423,16,
0,366,1,412,2424,
16,0,366,1,1377,
2425,16,0,366,1,
172,1445,1,1939,2426,
16,0,366,1,437,
2427,16,0,586,1,
188,1490,1,942,1461,
1,1195,2428,16,0,
366,1,1449,2429,16,
0,366,1,1701,2430,
16,0,366,1,447,
1482,1,205,2431,16,
0,366,1,827,2432,
16,0,366,1,223,
2433,16,0,366,1,
476,1521,1,477,1527,
1,1231,2434,16,0,
366,1,479,1537,1,
480,1542,1,1485,2435,
16,0,366,1,1737,
2436,16,0,366,1,
242,2437,16,0,366,
1,478,1560,1,1001,
1565,1,1002,1570,1,
27,2438,19,597,1,
27,2439,5,91,1,
256,2440,16,0,595,
1,1261,2441,16,0,
595,1,509,2442,16,
0,595,1,1515,2443,
16,0,595,1,2021,
712,1,1775,2444,16,
0,595,1,2029,719,
1,2030,725,1,2031,
730,1,2032,735,1,
2033,740,1,277,2445,
16,0,595,1,2035,
746,1,2037,751,1,
2039,756,1,32,2446,
16,0,595,1,2041,
762,1,2043,767,1,
2045,772,1,41,2447,
16,0,595,1,1297,
2448,16,0,595,1,
43,2449,16,0,595,
1,1802,780,1,1804,
2450,16,0,595,1,
299,2451,16,0,595,
1,2310,2452,16,0,
595,1,52,2453,16,
0,595,1,525,2454,
16,0,595,1,62,
2455,16,0,595,1,
2075,2456,16,0,595,
1,1574,793,1,71,
2457,16,0,595,1,
76,2458,16,0,595,
1,1834,2459,16,0,
595,1,79,2460,16,
0,595,1,1335,2461,
16,0,595,1,322,
2462,16,0,595,1,
85,2463,16,0,595,
1,89,2464,16,0,
595,1,346,2465,16,
0,595,1,2355,807,
1,2105,813,1,2106,
2466,16,0,595,1,
2359,819,1,2361,824,
1,1860,830,1,97,
2467,16,0,595,1,
112,2468,16,0,595,
1,1117,2469,16,0,
595,1,1873,839,1,
102,2470,16,0,595,
1,1876,2471,16,0,
595,1,124,2472,16,
0,595,1,2555,2473,
16,0,595,1,2136,
848,1,381,2474,16,
0,595,1,137,2475,
16,0,595,1,1901,
2476,16,0,595,1,
1153,2477,16,0,595,
1,151,2478,16,0,
595,1,1407,2479,16,
0,595,1,1659,2480,
16,0,595,1,406,
2481,16,0,595,1,
1371,2482,16,0,595,
1,166,2483,16,0,
595,1,1622,2484,16,
0,595,1,2356,864,
1,1931,869,1,1933,
2485,16,0,595,1,
431,2486,16,0,595,
1,1585,2487,16,0,
595,1,182,2488,16,
0,595,1,1189,2489,
16,0,595,1,1443,
2490,16,0,595,1,
1695,2491,16,0,595,
1,2198,2492,16,0,
595,1,447,2493,16,
0,595,1,199,2494,
16,0,595,1,1958,
2495,16,0,595,1,
1657,886,1,459,2496,
16,0,595,1,462,
2497,16,0,595,1,
217,2498,16,0,595,
1,2227,894,1,1225,
2499,16,0,595,1,
1479,2500,16,0,595,
1,1731,2501,16,0,
595,1,1989,902,1,
1990,2502,16,0,595,
1,236,2503,16,0,
595,1,1756,2504,16,
0,595,1,28,2505,
19,632,1,28,2506,
5,60,1,328,1285,
1,223,1511,1,1096,
1295,1,118,1327,1,
883,1370,1,525,1195,
1,1001,1565,1,130,
1387,1,459,1654,1,
1114,1325,1,352,1313,
1,447,1482,1,464,
1657,1,1011,1082,1,
1013,1237,1,242,1555,
1,143,1397,1,40,
1146,1,41,1631,1,
42,1635,1,479,1537,
1,44,1162,1,481,
1662,1,373,1382,1,
47,1163,1,157,1418,
1,49,1175,1,50,
1180,1,48,1169,1,
379,1392,1,380,1364,
1,51,1185,1,476,
1521,1,371,1337,1,
478,1560,1,1048,1247,
1,375,1348,1,172,
1445,1,262,1099,1,
283,1157,1,63,1201,
1,67,1212,1,68,
1217,1,69,1222,1,
66,1207,1,461,2507,
16,0,630,1,74,
1232,1,377,1354,1,
1002,1570,1,70,1227,
1,188,1490,1,82,
1263,1,305,1190,1,
477,1527,1,827,1359,
1,93,1301,1,480,
1542,1,205,1495,1,
942,1461,1,107,1320,
1,29,2508,19,297,
1,29,2509,5,83,
1,1011,1082,1,1012,
2510,16,0,295,1,
1013,1237,1,262,1099,
1,1267,2511,16,0,
295,1,515,2512,16,
0,295,1,1521,2513,
16,0,295,1,525,
1195,1,283,1157,1,
40,1146,1,42,2514,
16,0,295,1,44,
1162,1,47,1163,1,
1303,2515,16,0,295,
1,1555,2516,16,0,
295,1,50,1180,1,
2561,2517,16,0,295,
1,49,1175,1,48,
1169,1,51,1185,1,
63,1201,1,305,1190,
1,66,1207,1,67,
1212,1,68,1217,1,
69,1222,1,70,1227,
1,73,2518,16,0,
295,1,74,1232,1,
328,1285,1,1048,1247,
1,82,2519,16,0,
295,1,1840,2520,16,
0,295,1,1591,2521,
16,0,295,1,1341,
2522,16,0,295,1,
1096,1295,1,93,1301,
1,352,1313,1,107,
2523,16,0,295,1,
1114,1325,1,118,1327,
1,1123,2524,16,0,
295,1,371,1337,1,
1628,2525,16,0,295,
1,375,1348,1,1882,
2526,16,0,295,1,
377,1354,1,379,1392,
1,380,1364,1,883,
2527,16,0,295,1,
373,1382,1,130,1387,
1,143,1397,1,387,
2528,16,0,295,1,
1159,2529,16,0,295,
1,157,1418,1,1413,
2530,16,0,295,1,
1665,2531,16,0,295,
1,412,2532,16,0,
295,1,1377,2533,16,
0,295,1,172,1445,
1,1939,2534,16,0,
295,1,437,2535,16,
0,295,1,188,1490,
1,942,1461,1,1195,
2536,16,0,295,1,
1449,2537,16,0,295,
1,1701,2538,16,0,
295,1,447,1482,1,
205,2539,16,0,295,
1,827,2540,16,0,
295,1,223,2541,16,
0,295,1,476,1521,
1,477,1527,1,1231,
2542,16,0,295,1,
479,1537,1,480,1542,
1,1485,2543,16,0,
295,1,1737,2544,16,
0,295,1,242,2545,
16,0,295,1,478,
1560,1,1001,1565,1,
1002,1570,1,30,2546,
19,267,1,30,2547,
5,83,1,1011,1082,
1,1012,2548,16,0,
265,1,1013,1237,1,
262,1099,1,1267,2549,
16,0,265,1,515,
2550,16,0,265,1,
1521,2551,16,0,265,
1,525,1195,1,283,
1157,1,40,1146,1,
42,2552,16,0,265,
1,44,1162,1,47,
1163,1,1303,2553,16,
0,265,1,1555,2554,
16,0,265,1,50,
1180,1,2561,2555,16,
0,265,1,49,1175,
1,48,1169,1,51,
1185,1,63,1201,1,
305,1190,1,66,1207,
1,67,1212,1,68,
1217,1,69,1222,1,
70,1227,1,73,2556,
16,0,265,1,74,
1232,1,328,1285,1,
1048,1247,1,82,2557,
16,0,265,1,1840,
2558,16,0,265,1,
1591,2559,16,0,265,
1,1341,2560,16,0,
265,1,1096,1295,1,
93,1301,1,352,1313,
1,107,2561,16,0,
265,1,1114,1325,1,
118,1327,1,1123,2562,
16,0,265,1,371,
1337,1,1628,2563,16,
0,265,1,375,1348,
1,1882,2564,16,0,
265,1,377,1354,1,
379,1392,1,380,1364,
1,883,2565,16,0,
265,1,373,1382,1,
130,1387,1,143,1397,
1,387,2566,16,0,
265,1,1159,2567,16,
0,265,1,157,1418,
1,1413,2568,16,0,
265,1,1665,2569,16,
0,265,1,412,2570,
16,0,265,1,1377,
2571,16,0,265,1,
172,1445,1,1939,2572,
16,0,265,1,437,
2573,16,0,265,1,
188,1490,1,942,1461,
1,1195,2574,16,0,
265,1,1449,2575,16,
0,265,1,1701,2576,
16,0,265,1,447,
1482,1,205,2577,16,
0,265,1,827,2578,
16,0,265,1,223,
2579,16,0,265,1,
476,1521,1,477,1527,
1,1231,2580,16,0,
265,1,479,1537,1,
480,1542,1,1485,2581,
16,0,265,1,1737,
2582,16,0,265,1,
242,2583,16,0,265,
1,478,1560,1,1001,
1565,1,1002,1570,1,
31,2584,19,248,1,
31,2585,5,83,1,
1011,1082,1,1012,2586,
16,0,246,1,1013,
1237,1,262,1099,1,
1267,2587,16,0,246,
1,515,2588,16,0,
246,1,1521,2589,16,
0,246,1,525,1195,
1,283,1157,1,40,
1146,1,42,2590,16,
0,246,1,44,1162,
1,47,1163,1,1303,
2591,16,0,246,1,
1555,2592,16,0,246,
1,50,1180,1,2561,
2593,16,0,246,1,
49,1175,1,48,1169,
1,51,1185,1,63,
1201,1,305,1190,1,
66,1207,1,67,1212,
1,68,1217,1,69,
1222,1,70,1227,1,
73,2594,16,0,246,
1,74,1232,1,328,
1285,1,1048,1247,1,
82,2595,16,0,246,
1,1840,2596,16,0,
246,1,1591,2597,16,
0,246,1,1341,2598,
16,0,246,1,1096,
1295,1,93,1301,1,
352,1313,1,107,2599,
16,0,246,1,1114,
1325,1,118,1327,1,
1123,2600,16,0,246,
1,371,1337,1,1628,
2601,16,0,246,1,
375,1348,1,1882,2602,
16,0,246,1,377,
1354,1,379,1392,1,
380,1364,1,883,2603,
16,0,246,1,373,
1382,1,130,1387,1,
143,2604,16,0,246,
1,387,2605,16,0,
246,1,1159,2606,16,
0,246,1,157,2607,
16,0,246,1,1413,
2608,16,0,246,1,
1665,2609,16,0,246,
1,412,2610,16,0,
246,1,1377,2611,16,
0,246,1,172,1445,
1,1939,2612,16,0,
246,1,437,2613,16,
0,246,1,188,1490,
1,942,1461,1,1195,
2614,16,0,246,1,
1449,2615,16,0,246,
1,1701,2616,16,0,
246,1,447,1482,1,
205,2617,16,0,246,
1,827,2618,16,0,
246,1,223,2619,16,
0,246,1,476,1521,
1,477,1527,1,1231,
2620,16,0,246,1,
479,1537,1,480,1542,
1,1485,2621,16,0,
246,1,1737,2622,16,
0,246,1,242,2623,
16,0,246,1,478,
1560,1,1001,1565,1,
1002,1570,1,32,2624,
19,241,1,32,2625,
5,83,1,1011,1082,
1,1012,2626,16,0,
239,1,1013,1237,1,
262,1099,1,1267,2627,
16,0,239,1,515,
2628,16,0,239,1,
1521,2629,16,0,239,
1,525,1195,1,283,
1157,1,40,1146,1,
42,2630,16,0,239,
1,44,1162,1,47,
1163,1,1303,2631,16,
0,239,1,1555,2632,
16,0,239,1,50,
1180,1,2561,2633,16,
0,239,1,49,1175,
1,48,1169,1,51,
1185,1,63,1201,1,
305,1190,1,66,1207,
1,67,1212,1,68,
1217,1,69,1222,1,
70,1227,1,73,2634,
16,0,239,1,74,
1232,1,328,1285,1,
1048,1247,1,82,2635,
16,0,239,1,1840,
2636,16,0,239,1,
1591,2637,16,0,239,
1,1341,2638,16,0,
239,1,1096,1295,1,
93,1301,1,352,1313,
1,107,2639,16,0,
239,1,1114,1325,1,
118,1327,1,1123,2640,
16,0,239,1,371,
1337,1,1628,2641,16,
0,239,1,375,1348,
1,1882,2642,16,0,
239,1,377,1354,1,
379,1392,1,380,1364,
1,883,2643,16,0,
239,1,373,1382,1,
130,1387,1,143,2644,
16,0,239,1,387,
2645,16,0,239,1,
1159,2646,16,0,239,
1,157,2647,16,0,
239,1,1413,2648,16,
0,239,1,1665,2649,
16,0,239,1,412,
2650,16,0,239,1,
1377,2651,16,0,239,
1,172,1445,1,1939,
2652,16,0,239,1,
437,2653,16,0,239,
1,188,1490,1,942,
1461,1,1195,2654,16,
0,239,1,1449,2655,
16,0,239,1,1701,
2656,16,0,239,1,
447,1482,1,205,2657,
16,0,239,1,827,
2658,16,0,239,1,
223,2659,16,0,239,
1,476,1521,1,477,
1527,1,1231,2660,16,
0,239,1,479,1537,
1,480,1542,1,1485,
2661,16,0,239,1,
1737,2662,16,0,239,
1,242,2663,16,0,
239,1,478,1560,1,
1001,1565,1,1002,1570,
1,33,2664,19,417,
1,33,2665,5,83,
1,1011,1082,1,1012,
2666,16,0,415,1,
1013,1237,1,262,1099,
1,1267,2667,16,0,
415,1,515,2668,16,
0,415,1,1521,2669,
16,0,415,1,525,
1195,1,283,1157,1,
40,1146,1,42,2670,
16,0,415,1,44,
1162,1,47,1163,1,
1303,2671,16,0,415,
1,1555,2672,16,0,
415,1,50,1180,1,
2561,2673,16,0,415,
1,49,1175,1,48,
1169,1,51,1185,1,
63,1201,1,305,1190,
1,66,1207,1,67,
1212,1,68,1217,1,
69,1222,1,70,1227,
1,73,2674,16,0,
415,1,74,1232,1,
328,1285,1,1048,1247,
1,82,2675,16,0,
415,1,1840,2676,16,
0,415,1,1591,2677,
16,0,415,1,1341,
2678,16,0,415,1,
1096,1295,1,93,1301,
1,352,1313,1,107,
2679,16,0,415,1,
1114,1325,1,118,1327,
1,1123,2680,16,0,
415,1,371,1337,1,
1628,2681,16,0,415,
1,375,1348,1,1882,
2682,16,0,415,1,
377,1354,1,379,1392,
1,380,1364,1,883,
2683,16,0,415,1,
373,1382,1,130,1387,
1,143,1397,1,387,
2684,16,0,415,1,
1159,2685,16,0,415,
1,157,1418,1,1413,
2686,16,0,415,1,
1665,2687,16,0,415,
1,412,2688,16,0,
415,1,1377,2689,16,
0,415,1,172,1445,
1,1939,2690,16,0,
415,1,437,2691,16,
0,415,1,188,1490,
1,942,1461,1,1195,
2692,16,0,415,1,
1449,2693,16,0,415,
1,1701,2694,16,0,
415,1,447,1482,1,
205,2695,16,0,415,
1,827,2696,16,0,
415,1,223,2697,16,
0,415,1,476,1521,
1,477,1527,1,1231,
2698,16,0,415,1,
479,1537,1,480,1542,
1,1485,2699,16,0,
415,1,1737,2700,16,
0,415,1,242,1555,
1,478,1560,1,1001,
1565,1,1002,1570,1,
34,2701,19,386,1,
34,2702,5,83,1,
1011,1082,1,1012,2703,
16,0,384,1,1013,
1237,1,262,1099,1,
1267,2704,16,0,384,
1,515,2705,16,0,
384,1,1521,2706,16,
0,384,1,525,1195,
1,283,1157,1,40,
1146,1,42,2707,16,
0,384,1,44,1162,
1,47,1163,1,1303,
2708,16,0,384,1,
1555,2709,16,0,384,
1,50,1180,1,2561,
2710,16,0,384,1,
49,1175,1,48,1169,
1,51,1185,1,63,
1201,1,305,1190,1,
66,1207,1,67,1212,
1,68,1217,1,69,
1222,1,70,1227,1,
73,2711,16,0,384,
1,74,1232,1,328,
1285,1,1048,1247,1,
82,2712,16,0,384,
1,1840,2713,16,0,
384,1,1591,2714,16,
0,384,1,1341,2715,
16,0,384,1,1096,
1295,1,93,1301,1,
352,1313,1,107,2716,
16,0,384,1,1114,
1325,1,118,1327,1,
1123,2717,16,0,384,
1,371,1337,1,1628,
2718,16,0,384,1,
375,1348,1,1882,2719,
16,0,384,1,377,
1354,1,379,1392,1,
380,1364,1,883,2720,
16,0,384,1,373,
1382,1,130,1387,1,
143,1397,1,387,2721,
16,0,384,1,1159,
2722,16,0,384,1,
157,1418,1,1413,2723,
16,0,384,1,1665,
2724,16,0,384,1,
412,2725,16,0,384,
1,1377,2726,16,0,
384,1,172,1445,1,
1939,2727,16,0,384,
1,437,2728,16,0,
384,1,188,1490,1,
942,1461,1,1195,2729,
16,0,384,1,1449,
2730,16,0,384,1,
1701,2731,16,0,384,
1,447,1482,1,205,
1495,1,827,2732,16,
0,384,1,223,1511,
1,476,1521,1,477,
1527,1,1231,2733,16,
0,384,1,479,1537,
1,480,1542,1,1485,
2734,16,0,384,1,
1737,2735,16,0,384,
1,242,1555,1,478,
1560,1,1001,1565,1,
1002,1570,1,35,2736,
19,371,1,35,2737,
5,83,1,1011,1082,
1,1012,2738,16,0,
369,1,1013,1237,1,
262,1099,1,1267,2739,
16,0,369,1,515,
2740,16,0,369,1,
1521,2741,16,0,369,
1,525,1195,1,283,
1157,1,40,1146,1,
42,2742,16,0,369,
1,44,1162,1,47,
1163,1,1303,2743,16,
0,369,1,1555,2744,
16,0,369,1,50,
1180,1,2561,2745,16,
0,369,1,49,1175,
1,48,1169,1,51,
1185,1,63,1201,1,
305,1190,1,66,1207,
1,67,1212,1,68,
1217,1,69,1222,1,
70,1227,1,73,2746,
16,0,369,1,74,
1232,1,328,1285,1,
1048,1247,1,82,2747,
16,0,369,1,1840,
2748,16,0,369,1,
1591,2749,16,0,369,
1,1341,2750,16,0,
369,1,1096,1295,1,
93,1301,1,352,1313,
1,107,2751,16,0,
369,1,1114,1325,1,
118,1327,1,1123,2752,
16,0,369,1,371,
1337,1,1628,2753,16,
0,369,1,375,1348,
1,1882,2754,16,0,
369,1,377,1354,1,
379,1392,1,380,1364,
1,883,2755,16,0,
369,1,373,1382,1,
130,1387,1,143,1397,
1,387,2756,16,0,
369,1,1159,2757,16,
0,369,1,157,1418,
1,1413,2758,16,0,
369,1,1665,2759,16,
0,369,1,412,2760,
16,0,369,1,1377,
2761,16,0,369,1,
172,1445,1,1939,2762,
16,0,369,1,437,
2763,16,0,369,1,
188,1490,1,942,1461,
1,1195,2764,16,0,
369,1,1449,2765,16,
0,369,1,1701,2766,
16,0,369,1,447,
1482,1,205,1495,1,
827,2767,16,0,369,
1,223,2768,16,0,
369,1,476,1521,1,
477,1527,1,1231,2769,
16,0,369,1,479,
1537,1,480,1542,1,
1485,2770,16,0,369,
1,1737,2771,16,0,
369,1,242,1555,1,
478,1560,1,1001,1565,
1,1002,1570,1,36,
2772,19,216,1,36,
2773,5,90,1,256,
2774,16,0,214,1,
1261,2775,16,0,214,
1,509,2776,16,0,
214,1,1515,2777,16,
0,214,1,2021,712,
1,1775,2778,16,0,
214,1,2029,719,1,
2030,725,1,2031,730,
1,2032,735,1,2033,
740,1,277,2779,16,
0,214,1,2035,746,
1,2037,751,1,2039,
756,1,32,2780,16,
0,214,1,2041,762,
1,2043,767,1,2045,
772,1,41,2781,16,
0,214,1,1297,2782,
16,0,214,1,43,
2783,16,0,214,1,
1802,780,1,1804,2784,
16,0,214,1,299,
2785,16,0,214,1,
2310,2786,16,0,214,
1,52,2787,16,0,
214,1,525,2788,16,
0,214,1,2075,2789,
16,0,214,1,1574,
793,1,71,2790,16,
0,214,1,76,2791,
16,0,214,1,1834,
2792,16,0,214,1,
79,2793,16,0,214,
1,1335,2794,16,0,
214,1,322,2795,16,
0,214,1,85,2796,
16,0,214,1,89,
2797,16,0,214,1,
346,2798,16,0,214,
1,2355,807,1,2105,
813,1,2106,2799,16,
0,214,1,2359,819,
1,2361,824,1,1860,
830,1,97,2800,16,
0,214,1,112,2801,
16,0,214,1,1117,
2802,16,0,214,1,
1873,839,1,102,2803,
16,0,214,1,1876,
2804,16,0,214,1,
124,2805,16,0,214,
1,2555,2806,16,0,
214,1,2136,848,1,
381,2807,16,0,214,
1,137,2808,16,0,
214,1,1901,2809,16,
0,214,1,1153,2810,
16,0,214,1,151,
2811,16,0,214,1,
1407,2812,16,0,214,
1,1659,2813,16,0,
214,1,406,2814,16,
0,214,1,1371,2815,
16,0,214,1,166,
2816,16,0,214,1,
1622,2817,16,0,214,
1,2356,864,1,1931,
869,1,1933,2818,16,
0,214,1,431,2819,
16,0,214,1,1585,
2820,16,0,214,1,
182,2821,16,0,214,
1,1189,2822,16,0,
214,1,1443,2823,16,
0,214,1,1695,2824,
16,0,214,1,2198,
2825,16,0,214,1,
447,2826,16,0,214,
1,199,2827,16,0,
214,1,1958,2828,16,
0,214,1,1657,886,
1,459,2829,16,0,
214,1,462,2830,16,
0,214,1,217,2831,
16,0,214,1,2227,
894,1,1225,2832,16,
0,214,1,1479,2833,
16,0,214,1,1731,
2834,16,0,214,1,
1989,902,1,1990,2835,
16,0,214,1,236,
2836,16,0,214,1,
1756,2837,16,0,214,
1,37,2838,19,232,
1,37,2839,5,90,
1,256,2840,16,0,
230,1,1261,2841,16,
0,230,1,509,2842,
16,0,230,1,1515,
2843,16,0,230,1,
2021,712,1,1775,2844,
16,0,230,1,2029,
719,1,2030,725,1,
2031,730,1,2032,735,
1,2033,740,1,277,
2845,16,0,230,1,
2035,746,1,2037,751,
1,2039,756,1,32,
2846,16,0,230,1,
2041,762,1,2043,767,
1,2045,772,1,41,
2847,16,0,230,1,
1297,2848,16,0,230,
1,43,2849,16,0,
230,1,1802,780,1,
1804,2850,16,0,230,
1,299,2851,16,0,
230,1,2310,2852,16,
0,230,1,52,2853,
16,0,230,1,525,
2854,16,0,230,1,
2075,2855,16,0,230,
1,1574,793,1,71,
2856,16,0,230,1,
76,2857,16,0,230,
1,1834,2858,16,0,
230,1,79,2859,16,
0,230,1,1335,2860,
16,0,230,1,322,
2861,16,0,230,1,
85,2862,16,0,230,
1,89,2863,16,0,
230,1,346,2864,16,
0,230,1,2355,807,
1,2105,813,1,2106,
2865,16,0,230,1,
2359,819,1,2361,824,
1,1860,830,1,97,
2866,16,0,230,1,
112,2867,16,0,230,
1,1117,2868,16,0,
230,1,1873,839,1,
102,2869,16,0,230,
1,1876,2870,16,0,
230,1,124,2871,16,
0,230,1,2555,2872,
16,0,230,1,2136,
848,1,381,2873,16,
0,230,1,137,2874,
16,0,230,1,1901,
2875,16,0,230,1,
1153,2876,16,0,230,
1,151,2877,16,0,
230,1,1407,2878,16,
0,230,1,1659,2879,
16,0,230,1,406,
2880,16,0,230,1,
1371,2881,16,0,230,
1,166,2882,16,0,
230,1,1622,2883,16,
0,230,1,2356,864,
1,1931,869,1,1933,
2884,16,0,230,1,
431,2885,16,0,230,
1,1585,2886,16,0,
230,1,182,2887,16,
0,230,1,1189,2888,
16,0,230,1,1443,
2889,16,0,230,1,
1695,2890,16,0,230,
1,2198,2891,16,0,
230,1,447,2892,16,
0,230,1,199,2893,
16,0,230,1,1958,
2894,16,0,230,1,
1657,886,1,459,2895,
16,0,230,1,462,
2896,16,0,230,1,
217,2897,16,0,230,
1,2227,894,1,1225,
2898,16,0,230,1,
1479,2899,16,0,230,
1,1731,2900,16,0,
230,1,1989,902,1,
1990,2901,16,0,230,
1,236,2902,16,0,
230,1,1756,2903,16,
0,230,1,38,2904,
19,229,1,38,2905,
5,83,1,1011,1082,
1,1012,2906,16,0,
227,1,1013,1237,1,
262,1099,1,1267,2907,
16,0,227,1,515,
2908,16,0,227,1,
1521,2909,16,0,227,
1,525,1195,1,283,
1157,1,40,1146,1,
42,2910,16,0,227,
1,44,1162,1,47,
1163,1,1303,2911,16,
0,227,1,1555,2912,
16,0,227,1,50,
1180,1,2561,2913,16,
0,227,1,49,1175,
1,48,1169,1,51,
1185,1,63,1201,1,
305,1190,1,66,1207,
1,67,1212,1,68,
1217,1,69,1222,1,
70,1227,1,73,2914,
16,0,227,1,74,
1232,1,328,1285,1,
1048,1247,1,82,2915,
16,0,227,1,1840,
2916,16,0,227,1,
1591,2917,16,0,227,
1,1341,2918,16,0,
227,1,1096,1295,1,
93,1301,1,352,1313,
1,107,2919,16,0,
227,1,1114,1325,1,
118,1327,1,1123,2920,
16,0,227,1,371,
1337,1,1628,2921,16,
0,227,1,375,1348,
1,1882,2922,16,0,
227,1,377,1354,1,
379,1392,1,380,1364,
1,883,1370,1,373,
1382,1,130,1387,1,
143,1397,1,387,2923,
16,0,227,1,1159,
2924,16,0,227,1,
157,1418,1,1413,2925,
16,0,227,1,1665,
2926,16,0,227,1,
412,2927,16,0,227,
1,1377,2928,16,0,
227,1,172,1445,1,
1939,2929,16,0,227,
1,437,2930,16,0,
227,1,188,1490,1,
942,1461,1,1195,2931,
16,0,227,1,1449,
2932,16,0,227,1,
1701,2933,16,0,227,
1,447,1482,1,205,
1495,1,827,1359,1,
223,1511,1,476,1521,
1,477,1527,1,1231,
2934,16,0,227,1,
479,1537,1,480,1542,
1,1485,2935,16,0,
227,1,1737,2936,16,
0,227,1,242,1555,
1,478,1560,1,1001,
1565,1,1002,1570,1,
39,2937,19,222,1,
39,2938,5,83,1,
1011,1082,1,1012,2939,
16,0,220,1,1013,
1237,1,262,1099,1,
1267,2940,16,0,220,
1,515,2941,16,0,
220,1,1521,2942,16,
0,220,1,525,1195,
1,283,1157,1,40,
1146,1,42,2943,16,
0,220,1,44,1162,
1,47,1163,1,1303,
2944,16,0,220,1,
1555,2945,16,0,220,
1,50,1180,1,2561,
2946,16,0,220,1,
49,1175,1,48,1169,
1,51,1185,1,63,
1201,1,305,1190,1,
66,1207,1,67,1212,
1,68,1217,1,69,
1222,1,70,1227,1,
73,2947,16,0,220,
1,74,1232,1,328,
1285,1,1048,1247,1,
82,2948,16,0,220,
1,1840,2949,16,0,
220,1,1591,2950,16,
0,220,1,1341,2951,
16,0,220,1,1096,
1295,1,93,1301,1,
352,1313,1,107,2952,
16,0,220,1,1114,
1325,1,118,1327,1,
1123,2953,16,0,220,
1,371,1337,1,1628,
2954,16,0,220,1,
375,1348,1,1882,2955,
16,0,220,1,377,
1354,1,379,1392,1,
380,1364,1,883,1370,
1,373,1382,1,130,
1387,1,143,1397,1,
387,2956,16,0,220,
1,1159,2957,16,0,
220,1,157,1418,1,
1413,2958,16,0,220,
1,1665,2959,16,0,
220,1,412,2960,16,
0,220,1,1377,2961,
16,0,220,1,172,
1445,1,1939,2962,16,
0,220,1,437,2963,
16,0,220,1,188,
1490,1,942,1461,1,
1195,2964,16,0,220,
1,1449,2965,16,0,
220,1,1701,2966,16,
0,220,1,447,1482,
1,205,1495,1,827,
1359,1,223,1511,1,
476,1521,1,477,1527,
1,1231,2967,16,0,
220,1,479,1537,1,
480,1542,1,1485,2968,
16,0,220,1,1737,
2969,16,0,220,1,
242,1555,1,478,1560,
1,1001,1565,1,1002,
1570,1,40,2970,19,
210,1,40,2971,5,
83,1,1011,1082,1,
1012,2972,16,0,208,
1,1013,1237,1,262,
1099,1,1267,2973,16,
0,208,1,515,2974,
16,0,208,1,1521,
2975,16,0,208,1,
525,1195,1,283,1157,
1,40,1146,1,42,
2976,16,0,208,1,
44,1162,1,47,1163,
1,1303,2977,16,0,
208,1,1555,2978,16,
0,208,1,50,1180,
1,2561,2979,16,0,
208,1,49,1175,1,
48,1169,1,51,1185,
1,63,1201,1,305,
1190,1,66,1207,1,
67,1212,1,68,1217,
1,69,1222,1,70,
1227,1,73,2980,16,
0,208,1,74,1232,
1,328,1285,1,1048,
1247,1,82,2981,16,
0,208,1,1840,2982,
16,0,208,1,1591,
2983,16,0,208,1,
1341,2984,16,0,208,
1,1096,1295,1,93,
1301,1,352,1313,1,
107,2985,16,0,208,
1,1114,1325,1,118,
2986,16,0,208,1,
1123,2987,16,0,208,
1,371,1337,1,1628,
2988,16,0,208,1,
375,1348,1,1882,2989,
16,0,208,1,377,
1354,1,379,1392,1,
380,1364,1,883,2990,
16,0,208,1,373,
1382,1,130,2991,16,
0,208,1,143,2992,
16,0,208,1,387,
2993,16,0,208,1,
1159,2994,16,0,208,
1,157,2995,16,0,
208,1,1413,2996,16,
0,208,1,1665,2997,
16,0,208,1,412,
2998,16,0,208,1,
1377,2999,16,0,208,
1,172,3000,16,0,
208,1,1939,3001,16,
0,208,1,437,3002,
16,0,208,1,188,
3003,16,0,208,1,
942,1461,1,1195,3004,
16,0,208,1,1449,
3005,16,0,208,1,
1701,3006,16,0,208,
1,447,1482,1,205,
3007,16,0,208,1,
827,3008,16,0,208,
1,223,3009,16,0,
208,1,476,1521,1,
477,1527,1,1231,3010,
16,0,208,1,479,
1537,1,480,1542,1,
1485,3011,16,0,208,
1,1737,3012,16,0,
208,1,242,3013,16,
0,208,1,478,1560,
1,1001,1565,1,1002,
1570,1,41,3014,19,
172,1,41,3015,5,
83,1,1011,1082,1,
1012,3016,16,0,170,
1,1013,1237,1,262,
1099,1,1267,3017,16,
0,170,1,515,3018,
16,0,170,1,1521,
3019,16,0,170,1,
525,1195,1,283,1157,
1,40,1146,1,42,
3020,16,0,170,1,
44,1162,1,47,1163,
1,1303,3021,16,0,
170,1,1555,3022,16,
0,170,1,50,1180,
1,2561,3023,16,0,
170,1,49,1175,1,
48,1169,1,51,1185,
1,63,1201,1,305,
1190,1,66,1207,1,
67,1212,1,68,1217,
1,69,1222,1,70,
1227,1,73,3024,16,
0,170,1,74,1232,
1,328,1285,1,1048,
1247,1,82,3025,16,
0,170,1,1840,3026,
16,0,170,1,1591,
3027,16,0,170,1,
1341,3028,16,0,170,
1,1096,1295,1,93,
1301,1,352,1313,1,
107,3029,16,0,170,
1,1114,1325,1,118,
3030,16,0,170,1,
1123,3031,16,0,170,
1,371,1337,1,1628,
3032,16,0,170,1,
375,1348,1,1882,3033,
16,0,170,1,377,
1354,1,379,1392,1,
380,1364,1,883,3034,
16,0,170,1,373,
1382,1,130,3035,16,
0,170,1,143,3036,
16,0,170,1,387,
3037,16,0,170,1,
1159,3038,16,0,170,
1,157,3039,16,0,
170,1,1413,3040,16,
0,170,1,1665,3041,
16,0,170,1,412,
3042,16,0,170,1,
1377,3043,16,0,170,
1,172,3044,16,0,
170,1,1939,3045,16,
0,170,1,437,3046,
16,0,170,1,188,
3047,16,0,170,1,
942,1461,1,1195,3048,
16,0,170,1,1449,
3049,16,0,170,1,
1701,3050,16,0,170,
1,447,1482,1,205,
3051,16,0,170,1,
827,3052,16,0,170,
1,223,3053,16,0,
170,1,476,1521,1,
477,1527,1,1231,3054,
16,0,170,1,479,
1537,1,480,1542,1,
1485,3055,16,0,170,
1,1737,3056,16,0,
170,1,242,3057,16,
0,170,1,478,1560,
1,1001,1565,1,1002,
1570,1,42,3058,19,
441,1,42,3059,5,
36,1,2075,3060,16,
0,439,1,1860,830,
1,2198,3061,16,0,
439,1,1873,839,1,
2310,3062,16,0,439,
1,1657,886,1,1989,
902,1,1990,3063,16,
0,439,1,1775,3064,
16,0,439,1,32,
3065,16,0,439,1,
2356,864,1,2105,813,
1,2106,3066,16,0,
439,1,2359,819,1,
2227,894,1,1901,3067,
16,0,439,1,1802,
780,1,2021,712,1,
1804,3068,16,0,439,
1,2136,848,1,2355,
807,1,2029,719,1,
2030,725,1,2031,730,
1,2032,735,1,2033,
740,1,2361,824,1,
2035,746,1,2037,751,
1,2039,756,1,1931,
869,1,2041,762,1,
2043,767,1,2045,772,
1,1574,793,1,1958,
3069,16,0,439,1,
43,3070,19,475,1,
43,3071,5,24,1,
2035,746,1,2037,751,
1,2039,756,1,2041,
762,1,2227,894,1,
2043,767,1,1860,830,
1,2021,712,1,2031,
730,1,1574,793,1,
2136,848,1,1873,839,
1,2356,864,1,1802,
780,1,2105,3072,16,
0,576,1,1989,3073,
16,0,473,1,1657,
886,1,2361,824,1,
2029,719,1,2030,725,
1,1931,869,1,2032,
735,1,2033,740,1,
2045,772,1,44,3074,
19,259,1,44,3075,
5,36,1,2075,3076,
16,0,257,1,1860,
830,1,2198,3077,16,
0,257,1,1873,839,
1,2310,3078,16,0,
257,1,1657,886,1,
1989,902,1,1990,3079,
16,0,257,1,1775,
3080,16,0,257,1,
32,3081,16,0,257,
1,2356,864,1,2105,
813,1,2106,3082,16,
0,257,1,2359,819,
1,2227,894,1,1901,
3083,16,0,257,1,
1802,780,1,2021,712,
1,1804,3084,16,0,
257,1,2136,848,1,
2355,807,1,2029,719,
1,2030,725,1,2031,
730,1,2032,735,1,
2033,740,1,2361,824,
1,2035,746,1,2037,
751,1,2039,756,1,
1931,869,1,2041,762,
1,2043,767,1,2045,
772,1,1574,793,1,
1958,3085,16,0,257,
1,45,3086,19,322,
1,45,3087,5,37,
1,2075,3088,16,0,
375,1,1860,830,1,
2198,3089,16,0,375,
1,1873,839,1,2310,
3090,16,0,375,1,
1657,886,1,1989,902,
1,1990,3091,16,0,
375,1,1775,3092,16,
0,375,1,32,3093,
16,0,375,1,2356,
864,1,2105,813,1,
2106,3094,16,0,375,
1,2359,819,1,2227,
894,1,1901,3095,16,
0,375,1,1802,780,
1,2021,712,1,1804,
3096,16,0,375,1,
2136,848,1,2355,807,
1,2029,719,1,2030,
725,1,2031,730,1,
2032,735,1,2033,740,
1,2361,824,1,2035,
746,1,2037,751,1,
2039,756,1,1931,869,
1,2041,762,1,2043,
767,1,2045,772,1,
1832,3097,16,0,320,
1,1574,793,1,1958,
3098,16,0,375,1,
46,3099,19,664,1,
46,3100,5,36,1,
2075,3101,16,0,662,
1,1860,830,1,2198,
3102,16,0,662,1,
1873,839,1,2310,3103,
16,0,662,1,1657,
886,1,1989,902,1,
1990,3104,16,0,662,
1,1775,3105,16,0,
662,1,32,3106,16,
0,662,1,2356,864,
1,2105,813,1,2106,
3107,16,0,662,1,
2359,819,1,2227,894,
1,1901,3108,16,0,
662,1,1802,780,1,
2021,712,1,1804,3109,
16,0,662,1,2136,
848,1,2355,807,1,
2029,719,1,2030,725,
1,2031,730,1,2032,
735,1,2033,740,1,
2361,824,1,2035,746,
1,2037,751,1,2039,
756,1,1931,869,1,
2041,762,1,2043,767,
1,2045,772,1,1574,
793,1,1958,3110,16,
0,662,1,47,3111,
19,465,1,47,3112,
5,19,1,0,3113,
16,0,463,1,2591,
3114,17,3115,15,3116,
4,52,37,0,71,
0,108,0,111,0,
98,0,97,0,108,
0,86,0,97,0,
114,0,105,0,97,
0,98,0,108,0,
101,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,1,
-1,1,5,3117,20,
3118,4,54,71,0,
108,0,111,0,98,
0,97,0,108,0,
86,0,97,0,114,
0,105,0,97,0,
98,0,108,0,101,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,95,0,
49,0,1,148,1,
3,1,3,1,2,
3119,22,1,7,1,
2592,3120,16,0,463,
1,2611,3121,17,3122,
15,3123,4,36,37,
0,71,0,108,0,
111,0,98,0,97,
0,108,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,115,0,
1,-1,1,5,3124,
20,3125,4,38,71,
0,108,0,111,0,
98,0,97,0,108,
0,68,0,101,0,
102,0,105,0,110,
0,105,0,116,0,
105,0,111,0,110,
0,115,0,95,0,
50,0,1,145,1,
3,1,3,1,2,
3126,22,1,4,1,
2455,679,1,2531,673,
1,2533,3127,16,0,
463,1,2610,3128,17,
3129,15,3123,1,-1,
1,5,3130,20,3131,
4,38,71,0,108,
0,111,0,98,0,
97,0,108,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,115,
0,95,0,52,0,
1,147,1,3,1,
3,1,2,3132,22,
1,6,1,2537,696,
1,2612,3133,17,3134,
15,3123,1,-1,1,
5,3135,20,3136,4,
38,71,0,108,0,
111,0,98,0,97,
0,108,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,115,0,
95,0,51,0,1,
146,1,3,1,2,
1,1,3137,22,1,
5,1,2613,3138,17,
3139,15,3123,1,-1,
1,5,3140,20,3141,
4,38,71,0,108,
0,111,0,98,0,
97,0,108,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,115,
0,95,0,49,0,
1,144,1,3,1,
2,1,1,3142,22,
1,3,1,2022,3143,
16,0,568,1,2356,
864,1,2580,3144,17,
3145,15,3116,1,-1,
1,5,3146,20,3147,
4,54,71,0,108,
0,111,0,98,0,
97,0,108,0,86,
0,97,0,114,0,
105,0,97,0,98,
0,108,0,101,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,95,0,50,
0,1,149,1,3,
1,5,1,4,3148,
22,1,8,1,2536,
690,1,2361,824,1,
2363,3149,17,3150,15,
3151,4,50,37,0,
71,0,108,0,111,
0,98,0,97,0,
108,0,70,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,1,-1,
1,5,3152,20,3153,
4,52,71,0,108,
0,111,0,98,0,
97,0,108,0,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
95,0,50,0,1,
151,1,3,1,7,
1,6,3154,22,1,
10,1,2603,3155,16,
0,463,1,2552,3156,
17,3157,15,3151,1,
-1,1,5,3158,20,
3159,4,52,71,0,
108,0,111,0,98,
0,97,0,108,0,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,68,0,101,0,
102,0,105,0,110,
0,105,0,116,0,
105,0,111,0,110,
0,95,0,49,0,
1,150,1,3,1,
6,1,5,3160,22,
1,9,1,48,3161,
19,493,1,48,3162,
5,52,1,0,3163,
16,0,645,1,2075,
3164,16,0,491,1,
1860,830,1,2198,3165,
16,0,491,1,1873,
839,1,2310,3166,16,
0,491,1,1657,886,
1,2531,673,1,2533,
3167,16,0,645,1,
1989,902,1,1990,3168,
16,0,491,1,2536,
690,1,2537,696,1,
1775,3169,16,0,491,
1,32,3170,16,0,
491,1,2356,864,1,
2105,813,1,2106,3171,
16,0,491,1,2359,
819,1,2552,3156,1,
2580,3144,1,2227,894,
1,1901,3172,16,0,
491,1,2612,3133,1,
2455,679,1,1802,780,
1,2021,712,1,1804,
3173,16,0,491,1,
2136,848,1,2355,807,
1,2029,719,1,2030,
725,1,2031,730,1,
2032,735,1,2033,740,
1,2361,824,1,2035,
746,1,2363,3149,1,
2037,751,1,2039,756,
1,1931,869,1,2041,
762,1,2043,767,1,
2045,772,1,2591,3114,
1,2592,3174,16,0,
645,1,2603,3175,16,
0,645,1,1574,793,
1,2610,3128,1,2611,
3121,1,1958,3176,16,
0,491,1,2613,3138,
1,49,3177,19,498,
1,49,3178,5,36,
1,2075,3179,16,0,
496,1,1860,830,1,
2198,3180,16,0,496,
1,1873,839,1,2310,
3181,16,0,496,1,
1657,886,1,1989,902,
1,1990,3182,16,0,
496,1,1775,3183,16,
0,496,1,32,3184,
16,0,496,1,2356,
864,1,2105,813,1,
2106,3185,16,0,496,
1,2359,819,1,2227,
894,1,1901,3186,16,
0,496,1,1802,780,
1,2021,712,1,1804,
3187,16,0,496,1,
2136,848,1,2355,807,
1,2029,719,1,2030,
725,1,2031,730,1,
2032,735,1,2033,740,
1,2361,824,1,2035,
746,1,2037,751,1,
2039,756,1,1931,869,
1,2041,762,1,2043,
767,1,2045,772,1,
1574,793,1,1958,3188,
16,0,496,1,50,
3189,19,617,1,50,
3190,5,36,1,2075,
3191,16,0,615,1,
1860,830,1,2198,3192,
16,0,615,1,1873,
839,1,2310,3193,16,
0,615,1,1657,886,
1,1989,902,1,1990,
3194,16,0,615,1,
1775,3195,16,0,615,
1,32,3196,16,0,
615,1,2356,864,1,
2105,813,1,2106,3197,
16,0,615,1,2359,
819,1,2227,894,1,
1901,3198,16,0,615,
1,1802,780,1,2021,
712,1,1804,3199,16,
0,615,1,2136,848,
1,2355,807,1,2029,
719,1,2030,725,1,
2031,730,1,2032,735,
1,2033,740,1,2361,
824,1,2035,746,1,
2037,751,1,2039,756,
1,1931,869,1,2041,
762,1,2043,767,1,
2045,772,1,1574,793,
1,1958,3200,16,0,
615,1,51,3201,19,
127,1,51,3202,5,
51,1,0,3203,16,
0,125,1,2075,3204,
16,0,125,1,2403,
3205,16,0,125,1,
1860,830,1,10,3206,
16,0,125,1,2198,
3207,16,0,125,1,
1873,839,1,2310,3208,
16,0,125,1,1657,
886,1,21,3209,16,
0,125,1,2032,735,
1,1989,902,1,1990,
3210,16,0,125,1,
1775,3211,16,0,125,
1,2539,3212,16,0,
125,1,2356,864,1,
2105,813,1,32,3213,
16,0,125,1,2552,
3156,1,2580,3144,1,
2227,894,1,1901,3214,
16,0,125,1,52,
3215,16,0,125,1,
2612,3133,1,1802,780,
1,2021,712,1,1804,
3216,16,0,125,1,
2136,848,1,2355,807,
1,2029,719,1,2030,
725,1,2031,730,1,
2359,819,1,2033,740,
1,2361,824,1,2035,
746,1,2363,3149,1,
2037,751,1,2039,756,
1,1931,869,1,2041,
762,1,2043,767,1,
2045,772,1,2591,3114,
1,2592,3217,16,0,
125,1,1574,793,1,
2106,3218,16,0,125,
1,2610,3128,1,2611,
3121,1,1958,3219,16,
0,125,1,2613,3138,
1,52,3220,19,124,
1,52,3221,5,51,
1,0,3222,16,0,
122,1,2075,3223,16,
0,122,1,2403,3224,
16,0,122,1,1860,
830,1,10,3225,16,
0,122,1,2198,3226,
16,0,122,1,1873,
839,1,2310,3227,16,
0,122,1,1657,886,
1,21,3228,16,0,
122,1,2032,735,1,
1989,902,1,1990,3229,
16,0,122,1,1775,
3230,16,0,122,1,
2539,3231,16,0,122,
1,2356,864,1,2105,
813,1,32,3232,16,
0,122,1,2552,3156,
1,2580,3144,1,2227,
894,1,1901,3233,16,
0,122,1,52,3234,
16,0,122,1,2612,
3133,1,1802,780,1,
2021,712,1,1804,3235,
16,0,122,1,2136,
848,1,2355,807,1,
2029,719,1,2030,725,
1,2031,730,1,2359,
819,1,2033,740,1,
2361,824,1,2035,746,
1,2363,3149,1,2037,
751,1,2039,756,1,
1931,869,1,2041,762,
1,2043,767,1,2045,
772,1,2591,3114,1,
2592,3236,16,0,122,
1,1574,793,1,2106,
3237,16,0,122,1,
2610,3128,1,2611,3121,
1,1958,3238,16,0,
122,1,2613,3138,1,
53,3239,19,121,1,
53,3240,5,51,1,
0,3241,16,0,119,
1,2075,3242,16,0,
119,1,2403,3243,16,
0,119,1,1860,830,
1,10,3244,16,0,
119,1,2198,3245,16,
0,119,1,1873,839,
1,2310,3246,16,0,
119,1,1657,886,1,
21,3247,16,0,119,
1,2032,735,1,1989,
902,1,1990,3248,16,
0,119,1,1775,3249,
16,0,119,1,2539,
3250,16,0,119,1,
2356,864,1,2105,813,
1,32,3251,16,0,
119,1,2552,3156,1,
2580,3144,1,2227,894,
1,1901,3252,16,0,
119,1,52,3253,16,
0,119,1,2612,3133,
1,1802,780,1,2021,
712,1,1804,3254,16,
0,119,1,2136,848,
1,2355,807,1,2029,
719,1,2030,725,1,
2031,730,1,2359,819,
1,2033,740,1,2361,
824,1,2035,746,1,
2363,3149,1,2037,751,
1,2039,756,1,1931,
869,1,2041,762,1,
2043,767,1,2045,772,
1,2591,3114,1,2592,
3255,16,0,119,1,
1574,793,1,2106,3256,
16,0,119,1,2610,
3128,1,2611,3121,1,
1958,3257,16,0,119,
1,2613,3138,1,54,
3258,19,118,1,54,
3259,5,51,1,0,
3260,16,0,116,1,
2075,3261,16,0,116,
1,2403,3262,16,0,
116,1,1860,830,1,
10,3263,16,0,116,
1,2198,3264,16,0,
116,1,1873,839,1,
2310,3265,16,0,116,
1,1657,886,1,21,
3266,16,0,116,1,
2032,735,1,1989,902,
1,1990,3267,16,0,
116,1,1775,3268,16,
0,116,1,2539,3269,
16,0,116,1,2356,
864,1,2105,813,1,
32,3270,16,0,116,
1,2552,3156,1,2580,
3144,1,2227,894,1,
1901,3271,16,0,116,
1,52,3272,16,0,
116,1,2612,3133,1,
1802,780,1,2021,712,
1,1804,3273,16,0,
116,1,2136,848,1,
2355,807,1,2029,719,
1,2030,725,1,2031,
730,1,2359,819,1,
2033,740,1,2361,824,
1,2035,746,1,2363,
3149,1,2037,751,1,
2039,756,1,1931,869,
1,2041,762,1,2043,
767,1,2045,772,1,
2591,3114,1,2592,3274,
16,0,116,1,1574,
793,1,2106,3275,16,
0,116,1,2610,3128,
1,2611,3121,1,1958,
3276,16,0,116,1,
2613,3138,1,55,3277,
19,115,1,55,3278,
5,51,1,0,3279,
16,0,113,1,2075,
3280,16,0,113,1,
2403,3281,16,0,113,
1,1860,830,1,10,
3282,16,0,113,1,
2198,3283,16,0,113,
1,1873,839,1,2310,
3284,16,0,113,1,
1657,886,1,21,3285,
16,0,113,1,2032,
735,1,1989,902,1,
1990,3286,16,0,113,
1,1775,3287,16,0,
113,1,2539,3288,16,
0,113,1,2356,864,
1,2105,813,1,32,
3289,16,0,113,1,
2552,3156,1,2580,3144,
1,2227,894,1,1901,
3290,16,0,113,1,
52,3291,16,0,113,
1,2612,3133,1,1802,
780,1,2021,712,1,
1804,3292,16,0,113,
1,2136,848,1,2355,
807,1,2029,719,1,
2030,725,1,2031,730,
1,2359,819,1,2033,
740,1,2361,824,1,
2035,746,1,2363,3149,
1,2037,751,1,2039,
756,1,1931,869,1,
2041,762,1,2043,767,
1,2045,772,1,2591,
3114,1,2592,3293,16,
0,113,1,1574,793,
1,2106,3294,16,0,
113,1,2610,3128,1,
2611,3121,1,1958,3295,
16,0,113,1,2613,
3138,1,56,3296,19,
112,1,56,3297,5,
51,1,0,3298,16,
0,110,1,2075,3299,
16,0,110,1,2403,
3300,16,0,110,1,
1860,830,1,10,3301,
16,0,110,1,2198,
3302,16,0,110,1,
1873,839,1,2310,3303,
16,0,110,1,1657,
886,1,21,3304,16,
0,110,1,2032,735,
1,1989,902,1,1990,
3305,16,0,110,1,
1775,3306,16,0,110,
1,2539,3307,16,0,
110,1,2356,864,1,
2105,813,1,32,3308,
16,0,110,1,2552,
3156,1,2580,3144,1,
2227,894,1,1901,3309,
16,0,110,1,52,
3310,16,0,110,1,
2612,3133,1,1802,780,
1,2021,712,1,1804,
3311,16,0,110,1,
2136,848,1,2355,807,
1,2029,719,1,2030,
725,1,2031,730,1,
2359,819,1,2033,740,
1,2361,824,1,2035,
746,1,2363,3149,1,
2037,751,1,2039,756,
1,1931,869,1,2041,
762,1,2043,767,1,
2045,772,1,2591,3114,
1,2592,3312,16,0,
110,1,1574,793,1,
2106,3313,16,0,110,
1,2610,3128,1,2611,
3121,1,1958,3314,16,
0,110,1,2613,3138,
1,57,3315,19,109,
1,57,3316,5,51,
1,0,3317,16,0,
107,1,2075,3318,16,
0,107,1,2403,3319,
16,0,107,1,1860,
830,1,10,3320,16,
0,107,1,2198,3321,
16,0,107,1,1873,
839,1,2310,3322,16,
0,107,1,1657,886,
1,21,3323,16,0,
107,1,2032,735,1,
1989,902,1,1990,3324,
16,0,107,1,1775,
3325,16,0,107,1,
2539,3326,16,0,107,
1,2356,864,1,2105,
813,1,32,3327,16,
0,107,1,2552,3156,
1,2580,3144,1,2227,
894,1,1901,3328,16,
0,107,1,52,3329,
16,0,107,1,2612,
3133,1,1802,780,1,
2021,712,1,1804,3330,
16,0,107,1,2136,
848,1,2355,807,1,
2029,719,1,2030,725,
1,2031,730,1,2359,
819,1,2033,740,1,
2361,824,1,2035,746,
1,2363,3149,1,2037,
751,1,2039,756,1,
1931,869,1,2041,762,
1,2043,767,1,2045,
772,1,2591,3114,1,
2592,3331,16,0,107,
1,1574,793,1,2106,
3332,16,0,107,1,
2610,3128,1,2611,3121,
1,1958,3333,16,0,
107,1,2613,3138,1,
58,3334,19,349,1,
58,3335,5,9,1,
2416,1594,1,2454,1603,
1,2418,3336,16,0,
347,1,2456,1609,1,
2494,3337,16,0,347,
1,2458,3338,16,0,
347,1,2356,864,1,
2361,824,1,2367,3339,
16,0,347,1,59,
3340,19,433,1,59,
3341,5,9,1,2416,
1594,1,2454,1603,1,
2418,3342,16,0,431,
1,2456,1609,1,2494,
3343,16,0,431,1,
2458,3344,16,0,431,
1,2356,864,1,2361,
824,1,2367,3345,16,
0,431,1,60,3346,
19,345,1,60,3347,
5,9,1,2416,1594,
1,2454,1603,1,2418,
3348,16,0,343,1,
2456,1609,1,2494,3349,
16,0,343,1,2458,
3350,16,0,343,1,
2356,864,1,2361,824,
1,2367,3351,16,0,
343,1,61,3352,19,
342,1,61,3353,5,
9,1,2416,1594,1,
2454,1603,1,2418,3354,
16,0,340,1,2456,
1609,1,2494,3355,16,
0,340,1,2458,3356,
16,0,340,1,2356,
864,1,2361,824,1,
2367,3357,16,0,340,
1,62,3358,19,430,
1,62,3359,5,9,
1,2416,1594,1,2454,
1603,1,2418,3360,16,
0,428,1,2456,1609,
1,2494,3361,16,0,
428,1,2458,3362,16,
0,428,1,2356,864,
1,2361,824,1,2367,
3363,16,0,428,1,
63,3364,19,338,1,
63,3365,5,9,1,
2416,1594,1,2454,1603,
1,2418,3366,16,0,
336,1,2456,1609,1,
2494,3367,16,0,336,
1,2458,3368,16,0,
336,1,2356,864,1,
2361,824,1,2367,3369,
16,0,336,1,64,
3370,19,335,1,64,
3371,5,9,1,2416,
1594,1,2454,1603,1,
2418,3372,16,0,333,
1,2456,1609,1,2494,
3373,16,0,333,1,
2458,3374,16,0,333,
1,2356,864,1,2361,
824,1,2367,3375,16,
0,333,1,65,3376,
19,559,1,65,3377,
5,9,1,2416,1594,
1,2454,1603,1,2418,
3378,16,0,557,1,
2456,1609,1,2494,3379,
16,0,557,1,2458,
3380,16,0,557,1,
2356,864,1,2361,824,
1,2367,3381,16,0,
557,1,66,3382,19,
329,1,66,3383,5,
9,1,2416,1594,1,
2454,1603,1,2418,3384,
16,0,327,1,2456,
1609,1,2494,3385,16,
0,327,1,2458,3386,
16,0,327,1,2356,
864,1,2361,824,1,
2367,3387,16,0,327,
1,67,3388,19,326,
1,67,3389,5,9,
1,2416,1594,1,2454,
1603,1,2418,3390,16,
0,324,1,2456,1609,
1,2494,3391,16,0,
324,1,2458,3392,16,
0,324,1,2356,864,
1,2361,824,1,2367,
3393,16,0,324,1,
68,3394,19,426,1,
68,3395,5,9,1,
2416,1594,1,2454,1603,
1,2418,3396,16,0,
424,1,2456,1609,1,
2494,3397,16,0,424,
1,2458,3398,16,0,
424,1,2356,864,1,
2361,824,1,2367,3399,
16,0,424,1,69,
3400,19,423,1,69,
3401,5,9,1,2416,
1594,1,2454,1603,1,
2418,3402,16,0,421,
1,2456,1609,1,2494,
3403,16,0,421,1,
2458,3404,16,0,421,
1,2356,864,1,2361,
824,1,2367,3405,16,
0,421,1,70,3406,
19,420,1,70,3407,
5,9,1,2416,1594,
1,2454,1603,1,2418,
3408,16,0,418,1,
2456,1609,1,2494,3409,
16,0,418,1,2458,
3410,16,0,418,1,
2356,864,1,2361,824,
1,2367,3411,16,0,
418,1,71,3412,19,
318,1,71,3413,5,
9,1,2416,1594,1,
2454,1603,1,2418,3414,
16,0,316,1,2456,
1609,1,2494,3415,16,
0,316,1,2458,3416,
16,0,316,1,2356,
864,1,2361,824,1,
2367,3417,16,0,316,
1,72,3418,19,414,
1,72,3419,5,9,
1,2416,1594,1,2454,
1603,1,2418,3420,16,
0,412,1,2456,1609,
1,2494,3421,16,0,
412,1,2458,3422,16,
0,412,1,2356,864,
1,2361,824,1,2367,
3423,16,0,412,1,
73,3424,19,314,1,
73,3425,5,9,1,
2416,1594,1,2454,1603,
1,2418,3426,16,0,
312,1,2456,1609,1,
2494,3427,16,0,312,
1,2458,3428,16,0,
312,1,2356,864,1,
2361,824,1,2367,3429,
16,0,312,1,74,
3430,19,411,1,74,
3431,5,9,1,2416,
1594,1,2454,1603,1,
2418,3432,16,0,409,
1,2456,1609,1,2494,
3433,16,0,409,1,
2458,3434,16,0,409,
1,2356,864,1,2361,
824,1,2367,3435,16,
0,409,1,75,3436,
19,408,1,75,3437,
5,9,1,2416,1594,
1,2454,1603,1,2418,
3438,16,0,406,1,
2456,1609,1,2494,3439,
16,0,406,1,2458,
3440,16,0,406,1,
2356,864,1,2361,824,
1,2367,3441,16,0,
406,1,76,3442,19,
307,1,76,3443,5,
9,1,2416,1594,1,
2454,1603,1,2418,3444,
16,0,305,1,2456,
1609,1,2494,3445,16,
0,305,1,2458,3446,
16,0,305,1,2356,
864,1,2361,824,1,
2367,3447,16,0,305,
1,77,3448,19,304,
1,77,3449,5,9,
1,2416,1594,1,2454,
1603,1,2418,3450,16,
0,302,1,2456,1609,
1,2494,3451,16,0,
302,1,2458,3452,16,
0,302,1,2356,864,
1,2361,824,1,2367,
3453,16,0,302,1,
78,3454,19,403,1,
78,3455,5,9,1,
2416,1594,1,2454,1603,
1,2418,3456,16,0,
401,1,2456,1609,1,
2494,3457,16,0,401,
1,2458,3458,16,0,
401,1,2356,864,1,
2361,824,1,2367,3459,
16,0,401,1,79,
3460,19,300,1,79,
3461,5,9,1,2416,
1594,1,2454,1603,1,
2418,3462,16,0,298,
1,2456,1609,1,2494,
3463,16,0,298,1,
2458,3464,16,0,298,
1,2356,864,1,2361,
824,1,2367,3465,16,
0,298,1,80,3466,
19,461,1,80,3467,
5,9,1,2416,1594,
1,2454,1603,1,2418,
3468,16,0,459,1,
2456,1609,1,2494,3469,
16,0,459,1,2458,
3470,16,0,459,1,
2356,864,1,2361,824,
1,2367,3471,16,0,
459,1,81,3472,19,
294,1,81,3473,5,
9,1,2416,1594,1,
2454,1603,1,2418,3474,
16,0,292,1,2456,
1609,1,2494,3475,16,
0,292,1,2458,3476,
16,0,292,1,2356,
864,1,2361,824,1,
2367,3477,16,0,292,
1,82,3478,19,291,
1,82,3479,5,9,
1,2416,1594,1,2454,
1603,1,2418,3480,16,
0,289,1,2456,1609,
1,2494,3481,16,0,
289,1,2458,3482,16,
0,289,1,2356,864,
1,2361,824,1,2367,
3483,16,0,289,1,
83,3484,19,288,1,
83,3485,5,9,1,
2416,1594,1,2454,1603,
1,2418,3486,16,0,
286,1,2456,1609,1,
2494,3487,16,0,286,
1,2458,3488,16,0,
286,1,2356,864,1,
2361,824,1,2367,3489,
16,0,286,1,84,
3490,19,589,1,84,
3491,5,9,1,2416,
1594,1,2454,1603,1,
2418,3492,16,0,587,
1,2456,1609,1,2494,
3493,16,0,587,1,
2458,3494,16,0,587,
1,2356,864,1,2361,
824,1,2367,3495,16,
0,587,1,85,3496,
19,394,1,85,3497,
5,9,1,2416,1594,
1,2454,1603,1,2418,
3498,16,0,392,1,
2456,1609,1,2494,3499,
16,0,392,1,2458,
3500,16,0,392,1,
2356,864,1,2361,824,
1,2367,3501,16,0,
392,1,86,3502,19,
281,1,86,3503,5,
9,1,2416,1594,1,
2454,1603,1,2418,3504,
16,0,279,1,2456,
1609,1,2494,3505,16,
0,279,1,2458,3506,
16,0,279,1,2356,
864,1,2361,824,1,
2367,3507,16,0,279,
1,87,3508,19,278,
1,87,3509,5,9,
1,2416,1594,1,2454,
1603,1,2418,3510,16,
0,276,1,2456,1609,
1,2494,3511,16,0,
276,1,2458,3512,16,
0,276,1,2356,864,
1,2361,824,1,2367,
3513,16,0,276,1,
88,3514,19,390,1,
88,3515,5,9,1,
2416,1594,1,2454,1603,
1,2418,3516,16,0,
388,1,2456,1609,1,
2494,3517,16,0,388,
1,2458,3518,16,0,
388,1,2356,864,1,
2361,824,1,2367,3519,
16,0,388,1,89,
3520,19,651,1,89,
3521,5,9,1,2416,
1594,1,2454,1603,1,
2418,3522,16,0,649,
1,2456,1609,1,2494,
3523,16,0,649,1,
2458,3524,16,0,649,
1,2356,864,1,2361,
824,1,2367,3525,16,
0,649,1,90,3526,
19,274,1,90,3527,
5,9,1,2416,1594,
1,2454,1603,1,2418,
3528,16,0,272,1,
2456,1609,1,2494,3529,
16,0,272,1,2458,
3530,16,0,272,1,
2356,864,1,2361,824,
1,2367,3531,16,0,
272,1,91,3532,19,
383,1,91,3533,5,
9,1,2416,1594,1,
2454,1603,1,2418,3534,
16,0,381,1,2456,
1609,1,2494,3535,16,
0,381,1,2458,3536,
16,0,381,1,2356,
864,1,2361,824,1,
2367,3537,16,0,381,
1,92,3538,19,133,
1,92,3539,5,121,
1,0,3540,16,0,
470,1,1,1923,1,
2,1929,1,3,1934,
1,4,1939,1,5,
1944,1,6,1949,1,
7,1954,1,8,3541,
16,0,131,1,1515,
3542,16,0,165,1,
2021,712,1,2022,3543,
16,0,495,1,256,
3544,16,0,173,1,
2025,3545,16,0,499,
1,18,3546,16,0,
138,1,2027,3547,16,
0,503,1,2029,719,
1,2030,725,1,2031,
730,1,2032,735,1,
2033,740,1,277,3548,
16,0,173,1,2035,
746,1,2037,751,1,
2039,756,1,32,3549,
16,0,165,1,2041,
762,1,2043,767,1,
2045,772,1,41,3550,
16,0,173,1,1297,
3551,16,0,165,1,
43,3552,16,0,173,
1,1802,780,1,46,
3553,16,0,178,1,
1804,3554,16,0,165,
1,299,3555,16,0,
173,1,2310,3556,16,
0,165,1,52,3557,
16,0,165,1,509,
3558,16,0,173,1,
525,3559,16,0,173,
1,62,3560,16,0,
195,1,65,3561,16,
0,197,1,2075,3562,
16,0,165,1,1574,
793,1,2580,3144,1,
71,3563,16,0,173,
1,1775,3564,16,0,
165,1,76,3565,16,
0,173,1,1834,3566,
16,0,165,1,79,
3567,16,0,173,1,
1335,3568,16,0,165,
1,2591,3114,1,2592,
3569,16,0,470,1,
322,3570,16,0,173,
1,85,3571,16,0,
173,1,1261,3572,16,
0,165,1,89,3573,
16,0,173,1,346,
3574,16,0,173,1,
2355,807,1,2356,864,
1,2106,3575,16,0,
165,1,2359,819,1,
2611,3121,1,2361,824,
1,1860,830,1,2363,
3149,1,2365,3576,16,
0,268,1,97,3577,
16,0,173,1,1113,
3578,16,0,158,1,
112,3579,16,0,173,
1,1117,3580,16,0,
165,1,1873,839,1,
102,3581,16,0,173,
1,1876,3582,16,0,
165,1,372,3583,16,
0,533,1,374,3584,
16,0,535,1,124,
3585,16,0,173,1,
376,3586,16,0,537,
1,2555,3587,16,0,
173,1,378,3588,16,
0,539,1,2136,848,
1,381,3589,16,0,
173,1,1585,3590,16,
0,173,1,137,3591,
16,0,173,1,1901,
3592,16,0,165,1,
1153,3593,16,0,165,
1,151,3594,16,0,
173,1,1407,3595,16,
0,165,1,1659,3596,
16,0,165,1,406,
3597,16,0,173,1,
1371,3598,16,0,165,
1,2105,813,1,1657,
886,1,166,3599,16,
0,173,1,1622,3600,
16,0,173,1,1931,
869,1,1933,3601,16,
0,165,1,431,3602,
16,0,173,1,2612,
3133,1,182,3603,16,
0,173,1,2610,3128,
1,1189,3604,16,0,
165,1,2613,3138,1,
1443,3605,16,0,165,
1,1695,3606,16,0,
165,1,2198,3607,16,
0,165,1,447,3608,
16,0,173,1,199,
3609,16,0,173,1,
1958,3610,16,0,165,
1,2552,3156,1,459,
3611,16,0,173,1,
462,3612,16,0,173,
1,217,3613,16,0,
173,1,2227,894,1,
1225,3614,16,0,165,
1,1479,3615,16,0,
165,1,1731,3616,16,
0,173,1,1989,902,
1,1990,3617,16,0,
165,1,236,3618,16,
0,173,1,1756,3619,
16,0,165,1,93,
3620,19,629,1,93,
3621,5,91,1,256,
3622,16,0,627,1,
1261,3623,16,0,627,
1,509,3624,16,0,
627,1,1515,3625,16,
0,627,1,2021,712,
1,1775,3626,16,0,
627,1,2029,719,1,
2030,725,1,2031,730,
1,2032,735,1,2033,
740,1,277,3627,16,
0,627,1,2035,746,
1,2037,751,1,2039,
756,1,32,3628,16,
0,627,1,2041,762,
1,2043,767,1,2045,
772,1,41,3629,16,
0,627,1,1297,3630,
16,0,627,1,43,
3631,16,0,627,1,
1802,780,1,1804,3632,
16,0,627,1,299,
3633,16,0,627,1,
2310,3634,16,0,627,
1,52,3635,16,0,
627,1,525,3636,16,
0,627,1,62,3637,
16,0,627,1,2075,
3638,16,0,627,1,
1574,793,1,71,3639,
16,0,627,1,76,
3640,16,0,627,1,
1834,3641,16,0,627,
1,79,3642,16,0,
627,1,1335,3643,16,
0,627,1,322,3644,
16,0,627,1,85,
3645,16,0,627,1,
89,3646,16,0,627,
1,346,3647,16,0,
627,1,2355,807,1,
2105,813,1,2106,3648,
16,0,627,1,2359,
819,1,2361,824,1,
1860,830,1,97,3649,
16,0,627,1,112,
3650,16,0,627,1,
1117,3651,16,0,627,
1,1873,839,1,102,
3652,16,0,627,1,
1876,3653,16,0,627,
1,124,3654,16,0,
627,1,2555,3655,16,
0,627,1,2136,848,
1,381,3656,16,0,
627,1,137,3657,16,
0,627,1,1901,3658,
16,0,627,1,1153,
3659,16,0,627,1,
151,3660,16,0,627,
1,1407,3661,16,0,
627,1,1659,3662,16,
0,627,1,406,3663,
16,0,627,1,1371,
3664,16,0,627,1,
166,3665,16,0,627,
1,1622,3666,16,0,
627,1,2356,864,1,
1931,869,1,1933,3667,
16,0,627,1,431,
3668,16,0,627,1,
1585,3669,16,0,627,
1,182,3670,16,0,
627,1,1189,3671,16,
0,627,1,1443,3672,
16,0,627,1,1695,
3673,16,0,627,1,
2198,3674,16,0,627,
1,447,3675,16,0,
627,1,199,3676,16,
0,627,1,1958,3677,
16,0,627,1,1657,
886,1,459,3678,16,
0,627,1,462,3679,
16,0,627,1,217,
3680,16,0,627,1,
2227,894,1,1225,3681,
16,0,627,1,1479,
3682,16,0,627,1,
1731,3683,16,0,627,
1,1989,902,1,1990,
3684,16,0,627,1,
236,3685,16,0,627,
1,1756,3686,16,0,
627,1,94,3687,19,
626,1,94,3688,5,
91,1,256,3689,16,
0,624,1,1261,3690,
16,0,624,1,509,
3691,16,0,624,1,
1515,3692,16,0,624,
1,2021,712,1,1775,
3693,16,0,624,1,
2029,719,1,2030,725,
1,2031,730,1,2032,
735,1,2033,740,1,
277,3694,16,0,624,
1,2035,746,1,2037,
751,1,2039,756,1,
32,3695,16,0,624,
1,2041,762,1,2043,
767,1,2045,772,1,
41,3696,16,0,624,
1,1297,3697,16,0,
624,1,43,3698,16,
0,624,1,1802,780,
1,1804,3699,16,0,
624,1,299,3700,16,
0,624,1,2310,3701,
16,0,624,1,52,
3702,16,0,624,1,
525,3703,16,0,624,
1,62,3704,16,0,
624,1,2075,3705,16,
0,624,1,1574,793,
1,71,3706,16,0,
624,1,76,3707,16,
0,624,1,1834,3708,
16,0,624,1,79,
3709,16,0,624,1,
1335,3710,16,0,624,
1,322,3711,16,0,
624,1,85,3712,16,
0,624,1,89,3713,
16,0,624,1,346,
3714,16,0,624,1,
2355,807,1,2105,813,
1,2106,3715,16,0,
624,1,2359,819,1,
2361,824,1,1860,830,
1,97,3716,16,0,
624,1,112,3717,16,
0,624,1,1117,3718,
16,0,624,1,1873,
839,1,102,3719,16,
0,624,1,1876,3720,
16,0,624,1,124,
3721,16,0,624,1,
2555,3722,16,0,624,
1,2136,848,1,381,
3723,16,0,624,1,
137,3724,16,0,624,
1,1901,3725,16,0,
624,1,1153,3726,16,
0,624,1,151,3727,
16,0,624,1,1407,
3728,16,0,624,1,
1659,3729,16,0,624,
1,406,3730,16,0,
624,1,1371,3731,16,
0,624,1,166,3732,
16,0,624,1,1622,
3733,16,0,624,1,
2356,864,1,1931,869,
1,1933,3734,16,0,
624,1,431,3735,16,
0,624,1,1585,3736,
16,0,624,1,182,
3737,16,0,624,1,
1189,3738,16,0,624,
1,1443,3739,16,0,
624,1,1695,3740,16,
0,624,1,2198,3741,
16,0,624,1,447,
3742,16,0,624,1,
199,3743,16,0,624,
1,1958,3744,16,0,
624,1,1657,886,1,
459,3745,16,0,624,
1,462,3746,16,0,
624,1,217,3747,16,
0,624,1,2227,894,
1,1225,3748,16,0,
624,1,1479,3749,16,
0,624,1,1731,3750,
16,0,624,1,1989,
902,1,1990,3751,16,
0,624,1,236,3752,
16,0,624,1,1756,
3753,16,0,624,1,
95,3754,19,623,1,
95,3755,5,91,1,
256,3756,16,0,621,
1,1261,3757,16,0,
621,1,509,3758,16,
0,621,1,1515,3759,
16,0,621,1,2021,
712,1,1775,3760,16,
0,621,1,2029,719,
1,2030,725,1,2031,
730,1,2032,735,1,
2033,740,1,277,3761,
16,0,621,1,2035,
746,1,2037,751,1,
2039,756,1,32,3762,
16,0,621,1,2041,
762,1,2043,767,1,
2045,772,1,41,3763,
16,0,621,1,1297,
3764,16,0,621,1,
43,3765,16,0,621,
1,1802,780,1,1804,
3766,16,0,621,1,
299,3767,16,0,621,
1,2310,3768,16,0,
621,1,52,3769,16,
0,621,1,525,3770,
16,0,621,1,62,
3771,16,0,621,1,
2075,3772,16,0,621,
1,1574,793,1,71,
3773,16,0,621,1,
76,3774,16,0,621,
1,1834,3775,16,0,
621,1,79,3776,16,
0,621,1,1335,3777,
16,0,621,1,322,
3778,16,0,621,1,
85,3779,16,0,621,
1,89,3780,16,0,
621,1,346,3781,16,
0,621,1,2355,807,
1,2105,813,1,2106,
3782,16,0,621,1,
2359,819,1,2361,824,
1,1860,830,1,97,
3783,16,0,621,1,
112,3784,16,0,621,
1,1117,3785,16,0,
621,1,1873,839,1,
102,3786,16,0,621,
1,1876,3787,16,0,
621,1,124,3788,16,
0,621,1,2555,3789,
16,0,621,1,2136,
848,1,381,3790,16,
0,621,1,137,3791,
16,0,621,1,1901,
3792,16,0,621,1,
1153,3793,16,0,621,
1,151,3794,16,0,
621,1,1407,3795,16,
0,621,1,1659,3796,
16,0,621,1,406,
3797,16,0,621,1,
1371,3798,16,0,621,
1,166,3799,16,0,
621,1,1622,3800,16,
0,621,1,2356,864,
1,1931,869,1,1933,
3801,16,0,621,1,
431,3802,16,0,621,
1,1585,3803,16,0,
621,1,182,3804,16,
0,621,1,1189,3805,
16,0,621,1,1443,
3806,16,0,621,1,
1695,3807,16,0,621,
1,2198,3808,16,0,
621,1,447,3809,16,
0,621,1,199,3810,
16,0,621,1,1958,
3811,16,0,621,1,
1657,886,1,459,3812,
16,0,621,1,462,
3813,16,0,621,1,
217,3814,16,0,621,
1,2227,894,1,1225,
3815,16,0,621,1,
1479,3816,16,0,621,
1,1731,3817,16,0,
621,1,1989,902,1,
1990,3818,16,0,621,
1,236,3819,16,0,
621,1,1756,3820,16,
0,621,1,96,3821,
19,103,1,96,3822,
5,1,1,0,3823,
16,0,104,1,97,
3824,19,658,1,97,
3825,5,1,1,0,
3826,16,0,656,1,
98,3827,19,609,1,
98,3828,5,2,1,
0,3829,16,0,611,
1,2592,3830,16,0,
607,1,99,3831,19,
546,1,99,3832,5,
2,1,0,3833,16,
0,610,1,2592,3834,
16,0,544,1,100,
3835,19,554,1,100,
3836,5,2,1,0,
3837,16,0,552,1,
2592,3838,16,0,594,
1,101,3839,19,469,
1,101,3840,5,4,
1,0,3841,16,0,
467,1,2533,3842,16,
0,556,1,2603,3843,
16,0,556,1,2592,
3844,16,0,467,1,
102,3845,19,364,1,
102,3846,5,2,1,
2367,3847,16,0,362,
1,2458,3848,16,0,
445,1,103,3849,19,
398,1,103,3850,5,
4,1,2367,3851,16,
0,400,1,2458,3852,
16,0,400,1,2494,
3853,16,0,396,1,
2418,3854,16,0,396,
1,104,3855,19,141,
1,104,3856,5,3,
1,2403,3857,16,0,
358,1,2539,3858,16,
0,476,1,10,3859,
16,0,139,1,105,
3860,19,151,1,105,
3861,5,16,1,0,
3862,16,0,635,1,
2592,3863,16,0,635,
1,2075,3864,16,0,
642,1,10,3865,16,
0,264,1,1901,3866,
16,0,642,1,2198,
3867,16,0,642,1,
2310,3868,16,0,642,
1,21,3869,16,0,
149,1,2106,3870,16,
0,642,1,2539,3871,
16,0,264,1,1804,
3872,16,0,642,1,
1990,3873,16,0,642,
1,32,3874,16,0,
642,1,1958,3875,16,
0,642,1,2403,3876,
16,0,264,1,1775,
3877,16,0,642,1,
106,3878,19,130,1,
106,3879,5,17,1,
0,3880,16,0,128,
1,2592,3881,16,0,
128,1,2075,3882,16,
0,137,1,10,3883,
16,0,137,1,2198,
3884,16,0,137,1,
1901,3885,16,0,137,
1,52,3886,16,0,
193,1,2310,3887,16,
0,137,1,21,3888,
16,0,137,1,2106,
3889,16,0,137,1,
2539,3890,16,0,137,
1,1804,3891,16,0,
137,1,1990,3892,16,
0,137,1,32,3893,
16,0,137,1,1958,
3894,16,0,137,1,
2403,3895,16,0,137,
1,1775,3896,16,0,
137,1,107,3897,19,
352,1,107,3898,5,
4,1,2367,3899,16,
0,350,1,2458,3900,
16,0,350,1,2494,
3901,16,0,350,1,
2418,3902,16,0,350,
1,108,3903,19,263,
1,108,3904,5,13,
1,2075,3905,16,0,
504,1,2550,3906,16,
0,564,1,2414,3907,
16,0,485,1,1901,
3908,16,0,504,1,
2198,3909,16,0,504,
1,2310,3910,16,0,
504,1,2106,3911,16,
0,504,1,1804,3912,
16,0,504,1,1990,
3913,16,0,504,1,
31,3914,16,0,261,
1,32,3915,16,0,
504,1,1958,3916,16,
0,504,1,1775,3917,
16,0,504,1,109,
3918,19,310,1,109,
3919,5,1,1,32,
3920,16,0,308,1,
110,3921,19,251,1,
110,3922,5,10,1,
2075,3923,16,0,575,
1,1901,3924,16,0,
438,1,2198,3925,16,
0,380,1,2310,3926,
16,0,249,1,2106,
3927,16,0,606,1,
1804,3928,16,0,319,
1,1990,3929,16,0,
490,1,32,3930,16,
0,377,1,1958,3931,
16,0,472,1,1775,
3932,16,0,256,1,
111,3933,19,581,1,
111,3934,5,10,1,
2075,3935,16,0,579,
1,1901,3936,16,0,
579,1,2198,3937,16,
0,579,1,2310,3938,
16,0,579,1,2106,
3939,16,0,579,1,
1804,3940,16,0,579,
1,1990,3941,16,0,
579,1,32,3942,16,
0,579,1,1958,3943,
16,0,579,1,1775,
3944,16,0,579,1,
112,3945,19,639,1,
112,3946,5,10,1,
2075,3947,16,0,637,
1,1901,3948,16,0,
637,1,2198,3949,16,
0,637,1,2310,3950,
16,0,637,1,2106,
3951,16,0,637,1,
1804,3952,16,0,637,
1,1990,3953,16,0,
637,1,32,3954,16,
0,637,1,1958,3955,
16,0,637,1,1775,
3956,16,0,637,1,
113,3957,19,161,1,
113,3958,5,29,1,
1479,3959,16,0,560,
1,2075,3960,16,0,
641,1,1695,3961,16,
0,189,1,1756,3962,
16,0,188,1,2198,
3963,16,0,641,1,
2310,3964,16,0,641,
1,1876,3965,16,0,
653,1,1659,3966,16,
0,188,1,1443,3967,
16,0,520,1,1117,
3968,16,0,159,1,
1990,3969,16,0,641,
1,1189,3970,16,0,
235,1,1775,3971,16,
0,641,1,32,3972,
16,0,641,1,2106,
3973,16,0,641,1,
1515,3974,16,0,577,
1,1901,3975,16,0,
641,1,52,3976,16,
0,590,1,1804,3977,
16,0,641,1,1261,
3978,16,0,354,1,
1153,3979,16,0,242,
1,1225,3980,16,0,
282,1,1335,3981,16,
0,458,1,1933,3982,
16,0,562,1,1834,
3983,16,0,372,1,
1297,3984,16,0,387,
1,1407,3985,16,0,
569,1,1958,3986,16,
0,641,1,1371,3987,
16,0,453,1,114,
3988,19,529,1,114,
3989,5,10,1,2075,
3990,16,0,527,1,
1901,3991,16,0,527,
1,2198,3992,16,0,
527,1,2310,3993,16,
0,527,1,2106,3994,
16,0,527,1,1804,
3995,16,0,527,1,
1990,3996,16,0,527,
1,32,3997,16,0,
527,1,1958,3998,16,
0,527,1,1775,3999,
16,0,527,1,115,
4000,19,525,1,115,
4001,5,10,1,2075,
4002,16,0,523,1,
1901,4003,16,0,523,
1,2198,4004,16,0,
523,1,2310,4005,16,
0,523,1,2106,4006,
16,0,523,1,1804,
4007,16,0,523,1,
1990,4008,16,0,523,
1,32,4009,16,0,
523,1,1958,4010,16,
0,523,1,1775,4011,
16,0,523,1,116,
4012,19,573,1,116,
4013,5,10,1,2075,
4014,16,0,571,1,
1901,4015,16,0,571,
1,2198,4016,16,0,
571,1,2310,4017,16,
0,571,1,2106,4018,
16,0,571,1,1804,
4019,16,0,571,1,
1990,4020,16,0,571,
1,32,4021,16,0,
571,1,1958,4022,16,
0,571,1,1775,4023,
16,0,571,1,117,
4024,19,519,1,117,
4025,5,10,1,2075,
4026,16,0,517,1,
1901,4027,16,0,517,
1,2198,4028,16,0,
517,1,2310,4029,16,
0,517,1,2106,4030,
16,0,517,1,1804,
4031,16,0,517,1,
1990,4032,16,0,517,
1,32,4033,16,0,
517,1,1958,4034,16,
0,517,1,1775,4035,
16,0,517,1,118,
4036,19,516,1,118,
4037,5,10,1,2075,
4038,16,0,514,1,
1901,4039,16,0,514,
1,2198,4040,16,0,
514,1,2310,4041,16,
0,514,1,2106,4042,
16,0,514,1,1804,
4043,16,0,514,1,
1990,4044,16,0,514,
1,32,4045,16,0,
514,1,1958,4046,16,
0,514,1,1775,4047,
16,0,514,1,119,
4048,19,513,1,119,
4049,5,10,1,2075,
4050,16,0,511,1,
1901,4051,16,0,511,
1,2198,4052,16,0,
511,1,2310,4053,16,
0,511,1,2106,4054,
16,0,511,1,1804,
4055,16,0,511,1,
1990,4056,16,0,511,
1,32,4057,16,0,
511,1,1958,4058,16,
0,511,1,1775,4059,
16,0,511,1,120,
4060,19,510,1,120,
4061,5,10,1,2075,
4062,16,0,508,1,
1901,4063,16,0,508,
1,2198,4064,16,0,
508,1,2310,4065,16,
0,508,1,2106,4066,
16,0,508,1,1804,
4067,16,0,508,1,
1990,4068,16,0,508,
1,32,4069,16,0,
508,1,1958,4070,16,
0,508,1,1775,4071,
16,0,508,1,121,
4072,19,507,1,121,
4073,5,10,1,2075,
4074,16,0,505,1,
1901,4075,16,0,505,
1,2198,4076,16,0,
505,1,2310,4077,16,
0,505,1,2106,4078,
16,0,505,1,1804,
4079,16,0,505,1,
1990,4080,16,0,505,
1,32,4081,16,0,
505,1,1958,4082,16,
0,505,1,1775,4083,
16,0,505,1,122,
4084,19,147,1,122,
4085,5,2,1,1756,
4086,16,0,315,1,
1659,4087,16,0,145,
1,123,4088,19,550,
1,123,4089,5,65,
1,1479,4090,16,0,
548,1,112,4091,16,
0,548,1,2075,4092,
16,0,548,1,1804,
4093,16,0,548,1,
431,4094,16,0,548,
1,1443,4095,16,0,
548,1,1756,4096,16,
0,548,1,124,4097,
16,0,548,1,525,
4098,16,0,548,1,
236,4099,16,0,548,
1,346,4100,16,0,
548,1,2555,4101,16,
0,548,1,2310,4102,
16,0,548,1,1876,
4103,16,0,548,1,
1659,4104,16,0,548,
1,1225,4105,16,0,
548,1,1117,4106,16,
0,548,1,137,4107,
16,0,548,1,1775,
4108,16,0,548,1,
32,4109,16,0,548,
1,1407,4110,16,0,
548,1,256,4111,16,
0,548,1,459,4112,
16,0,548,1,41,
4113,16,0,548,1,
151,4114,16,0,548,
1,43,4115,16,0,
548,1,1901,4116,16,
0,548,1,509,4117,
16,0,548,1,52,
4118,16,0,548,1,
381,4119,16,0,548,
1,447,4120,16,0,
548,1,166,4121,16,
0,548,1,462,4122,
16,0,548,1,277,
4123,16,0,548,1,
1695,4124,16,0,548,
1,1261,4125,16,0,
548,1,1153,4126,16,
0,548,1,62,4127,
16,0,584,1,2106,
4128,16,0,548,1,
1335,4129,16,0,548,
1,71,4130,16,0,
548,1,182,4131,16,
0,548,1,76,4132,
16,0,548,1,79,
4133,16,0,548,1,
1933,4134,16,0,548,
1,299,4135,16,0,
548,1,85,4136,16,
0,548,1,1515,4137,
16,0,548,1,2198,
4138,16,0,548,1,
89,4139,16,0,548,
1,1834,4140,16,0,
548,1,1622,4141,16,
0,548,1,1990,4142,
16,0,548,1,406,
4143,16,0,548,1,
1731,4144,16,0,548,
1,97,4145,16,0,
548,1,1297,4146,16,
0,548,1,1189,4147,
16,0,548,1,102,
4148,16,0,548,1,
1585,4149,16,0,548,
1,322,4150,16,0,
548,1,1958,4151,16,
0,548,1,199,4152,
16,0,548,1,1371,
4153,16,0,548,1,
217,4154,16,0,548,
1,124,4155,19,601,
1,124,4156,5,2,
1,459,4157,16,0,
599,1,41,4158,16,
0,659,1,125,4159,
19,605,1,125,4160,
5,3,1,462,4161,
16,0,603,1,459,
4162,16,0,633,1,
41,4163,16,0,633,
1,126,4164,19,4165,
4,36,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,1,126,
4160,1,127,4166,19,
542,1,127,4167,5,
65,1,1479,4168,16,
0,540,1,112,4169,
16,0,540,1,2075,
4170,16,0,540,1,
1804,4171,16,0,540,
1,431,4172,16,0,
540,1,1443,4173,16,
0,540,1,1756,4174,
16,0,540,1,124,
4175,16,0,540,1,
525,4176,16,0,540,
1,236,4177,16,0,
540,1,346,4178,16,
0,540,1,2555,4179,
16,0,540,1,2310,
4180,16,0,540,1,
1876,4181,16,0,540,
1,1659,4182,16,0,
540,1,1225,4183,16,
0,540,1,1117,4184,
16,0,540,1,137,
4185,16,0,540,1,
1775,4186,16,0,540,
1,32,4187,16,0,
540,1,1407,4188,16,
0,540,1,256,4189,
16,0,540,1,459,
4190,16,0,540,1,
41,4191,16,0,540,
1,151,4192,16,0,
540,1,43,4193,16,
0,540,1,1901,4194,
16,0,540,1,509,
4195,16,0,540,1,
52,4196,16,0,540,
1,381,4197,16,0,
540,1,447,4198,16,
0,540,1,166,4199,
16,0,540,1,462,
4200,16,0,540,1,
277,4201,16,0,540,
1,1695,4202,16,0,
540,1,1261,4203,16,
0,540,1,1153,4204,
16,0,540,1,62,
4205,16,0,585,1,
2106,4206,16,0,540,
1,1335,4207,16,0,
540,1,71,4208,16,
0,540,1,182,4209,
16,0,540,1,76,
4210,16,0,540,1,
79,4211,16,0,540,
1,1933,4212,16,0,
540,1,299,4213,16,
0,540,1,85,4214,
16,0,540,1,1515,
4215,16,0,540,1,
2198,4216,16,0,540,
1,89,4217,16,0,
540,1,1834,4218,16,
0,540,1,1622,4219,
16,0,540,1,1990,
4220,16,0,540,1,
406,4221,16,0,540,
1,1731,4222,16,0,
540,1,97,4223,16,
0,540,1,1297,4224,
16,0,540,1,1189,
4225,16,0,540,1,
102,4226,16,0,540,
1,1585,4227,16,0,
540,1,322,4228,16,
0,540,1,1958,4229,
16,0,540,1,199,
4230,16,0,540,1,
1371,4231,16,0,540,
1,217,4232,16,0,
540,1,128,4233,19,
4234,4,28,86,0,
101,0,99,0,116,
0,111,0,114,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,1,128,4167,1,
129,4235,19,4236,4,
32,82,0,111,0,
116,0,97,0,116,
0,105,0,111,0,
110,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,1,129,
4167,1,130,4237,19,
4238,4,24,76,0,
105,0,115,0,116,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,1,130,4167,
1,131,4239,19,169,
1,131,4240,5,64,
1,1479,4241,16,0,
531,1,112,4242,16,
0,244,1,2075,4243,
16,0,583,1,1804,
4244,16,0,583,1,
431,4245,16,0,578,
1,1443,4246,16,0,
484,1,1756,4247,16,
0,667,1,124,4248,
16,0,255,1,525,
4249,16,0,365,1,
236,4250,16,0,427,
1,346,4251,16,0,
494,1,2555,4252,16,
0,483,1,2310,4253,
16,0,583,1,1876,
4254,16,0,379,1,
1659,4255,16,0,667,
1,1225,4256,16,0,
243,1,1117,4257,16,
0,219,1,137,4258,
16,0,275,1,1775,
4259,16,0,583,1,
32,4260,16,0,583,
1,1407,4261,16,0,
486,1,256,4262,16,
0,442,1,459,4263,
16,0,167,1,41,
4264,16,0,167,1,
151,4265,16,0,311,
1,43,4266,16,0,
636,1,1901,4267,16,
0,583,1,509,4268,
16,0,647,1,52,
4269,16,0,592,1,
381,4270,16,0,555,
1,447,4271,16,0,
365,1,166,4272,16,
0,346,1,462,4273,
16,0,167,1,277,
4274,16,0,451,1,
1695,4275,16,0,270,
1,1261,4276,16,0,
301,1,1153,4277,16,
0,174,1,2106,4278,
16,0,583,1,1335,
4279,16,0,399,1,
71,4280,16,0,203,
1,182,4281,16,0,
365,1,76,4282,16,
0,551,1,79,4283,
16,0,218,1,1933,
4284,16,0,446,1,
299,4285,16,0,462,
1,85,4286,16,0,
479,1,1515,4287,16,
0,566,1,2198,4288,
16,0,583,1,89,
4289,16,0,226,1,
1834,4290,16,0,339,
1,1622,4291,16,0,
646,1,1990,4292,16,
0,583,1,406,4293,
16,0,567,1,1731,
4294,16,0,245,1,
97,4295,16,0,447,
1,1297,4296,16,0,
405,1,1189,4297,16,
0,217,1,102,4298,
16,0,234,1,1585,
4299,16,0,655,1,
322,4300,16,0,481,
1,1958,4301,16,0,
583,1,199,4302,16,
0,376,1,1371,4303,
16,0,443,1,217,
4304,16,0,395,1,
132,4305,19,4306,4,
36,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,132,4240,
1,133,4307,19,4308,
4,30,73,0,100,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,133,4240,
1,134,4309,19,4310,
4,36,73,0,100,
0,101,0,110,0,
116,0,68,0,111,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,134,
4240,1,135,4311,19,
4312,4,44,70,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,67,
0,97,0,108,0,
108,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,135,4240,
1,136,4313,19,4314,
4,32,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
136,4240,1,137,4315,
19,4316,4,30,85,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
137,4240,1,138,4317,
19,4318,4,36,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,138,4240,1,139,
4319,19,4320,4,42,
80,0,97,0,114,
0,101,0,110,0,
116,0,104,0,101,
0,115,0,105,0,
115,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,139,4240,
1,140,4321,19,4322,
4,56,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,140,
4240,1,142,4323,19,
704,1,142,3822,1,
143,4324,19,688,1,
143,3822,1,144,4325,
19,3141,1,144,3825,
1,145,4326,19,3125,
1,145,3825,1,146,
4327,19,3136,1,146,
3825,1,147,4328,19,
3131,1,147,3825,1,
148,4329,19,3118,1,
148,3828,1,149,4330,
19,3147,1,149,3828,
1,150,4331,19,3159,
1,150,3832,1,151,
4332,19,3153,1,151,
3832,1,152,4333,19,
699,1,152,3836,1,
153,4334,19,694,1,
153,3836,1,154,4335,
19,677,1,154,3840,
1,155,4336,19,682,
1,155,3840,1,156,
4337,19,1612,1,156,
3846,1,157,4338,19,
1607,1,157,3846,1,
158,4339,19,1598,1,
158,3850,1,159,4340,
19,1644,1,159,3856,
1,160,4341,19,1628,
1,160,3856,1,161,
4342,19,1097,1,161,
3861,1,162,4343,19,
828,1,162,3904,1,
163,4344,19,867,1,
163,3904,1,164,4345,
19,822,1,164,3919,
1,165,4346,19,811,
1,165,3919,1,166,
4347,19,1125,1,166,
3934,1,167,4348,19,
775,1,167,3922,1,
168,4349,19,889,1,
168,3922,1,169,4350,
19,770,1,169,3922,
1,170,4351,19,796,
1,170,3922,1,171,
4352,19,765,1,171,
3922,1,172,4353,19,
759,1,172,3922,1,
173,4354,19,754,1,
173,3922,1,174,4355,
19,749,1,174,3922,
1,175,4356,19,743,
1,175,3922,1,176,
4357,19,738,1,176,
3922,1,177,4358,19,
733,1,177,3922,1,
178,4359,19,728,1,
178,3922,1,179,4360,
19,723,1,179,3922,
1,180,4361,19,1132,
1,180,4001,1,181,
4362,19,1273,1,181,
4013,1,182,4363,19,
1119,1,182,4025,1,
183,4364,19,1261,1,
183,4025,1,184,4365,
19,905,1,184,4037,
1,185,4366,19,716,
1,185,4037,1,186,
4367,19,816,1,186,
4037,1,187,4368,19,
851,1,187,4037,1,
188,4369,19,873,1,
188,4049,1,189,4370,
19,897,1,189,4049,
1,190,4371,19,834,
1,190,4061,1,191,
4372,19,842,1,191,
4061,1,192,4373,19,
784,1,192,4073,1,
193,4374,19,1504,1,
193,4085,1,194,4375,
19,1138,1,194,4085,
1,195,4376,19,1480,
1,195,4085,1,196,
4377,19,1519,1,196,
4085,1,197,4378,19,
1379,1,197,3946,1,
198,4379,19,1442,1,
198,3946,1,199,4380,
19,1113,1,199,3958,
1,200,4381,19,1551,
1,200,3958,1,201,
4382,19,1475,1,201,
3958,1,202,4383,19,
1426,1,202,3958,1,
203,4384,19,1346,1,
203,3958,1,204,4385,
19,1283,1,204,3958,
1,205,4386,19,1293,
1,205,3958,1,206,
4387,19,1108,1,206,
3958,1,207,4388,19,
1535,1,207,3958,1,
208,4389,19,1470,1,
208,3958,1,209,4390,
19,1416,1,209,3958,
1,210,4391,19,1335,
1,210,3958,1,211,
4392,19,1309,1,211,
3958,1,212,4393,19,
1091,1,212,3958,1,
213,4394,19,1437,1,
213,3958,1,214,4395,
19,1458,1,214,3958,
1,215,4396,19,1411,
1,215,3958,1,216,
4397,19,1431,1,216,
3958,1,217,4398,19,
1245,1,217,3958,1,
218,4399,19,1155,1,
218,3958,1,219,4400,
19,1080,1,219,3958,
1,220,4401,19,1509,
1,220,3958,1,221,
4402,19,1453,1,221,
3958,1,222,4403,19,
1406,1,222,3958,1,
223,4404,19,1278,1,
223,3989,1,224,4405,
19,1256,1,224,3989,
1,225,4406,19,1540,
1,225,4167,1,226,
4407,19,1563,1,226,
4167,1,227,4408,19,
1530,1,227,4167,1,
228,4409,19,1525,1,
228,4167,1,229,4410,
19,1546,1,229,4167,
1,230,4411,19,1486,
1,230,4167,1,231,
4412,19,1199,1,231,
4167,1,232,4413,19,
1368,1,232,4240,1,
233,4414,19,1150,1,
233,4240,1,234,4415,
19,1167,1,234,4240,
1,235,4416,19,1188,
1,235,4240,1,236,
4417,19,1183,1,236,
4240,1,237,4418,19,
1178,1,237,4240,1,
238,4419,19,1173,1,
238,4240,1,239,4420,
19,1357,1,239,4240,
1,240,4421,19,1385,
1,240,4240,1,241,
4422,19,1395,1,241,
4240,1,242,4423,19,
1351,1,242,4240,1,
243,4424,19,1341,1,
243,4240,1,244,4425,
19,1316,1,244,4240,
1,245,4426,19,1288,
1,245,4240,1,246,
4427,19,1193,1,246,
4240,1,247,4428,19,
1160,1,247,4240,1,
248,4429,19,1103,1,
248,4240,1,249,4430,
19,1558,1,249,4240,
1,250,4431,19,1514,
1,250,4240,1,251,
4432,19,1498,1,251,
4240,1,252,4433,19,
1493,1,252,4240,1,
253,4434,19,1448,1,
253,4240,1,254,4435,
19,1421,1,254,4240,
1,255,4436,19,1400,
1,255,4240,1,256,
4437,19,1390,1,256,
4240,1,257,4438,19,
1330,1,257,4240,1,
258,4439,19,1362,1,
258,4240,1,259,4440,
19,1373,1,259,4240,
1,260,4441,19,1464,
1,260,4240,1,261,
4442,19,1250,1,261,
4240,1,262,4443,19,
1323,1,262,4240,1,
263,4444,19,1304,1,
263,4240,1,264,4445,
19,1267,1,264,4240,
1,265,4446,19,1240,
1,265,4240,1,266,
4447,19,1086,1,266,
4240,1,267,4448,19,
1573,1,267,4240,1,
268,4449,19,1205,1,
268,4240,1,269,4450,
19,1210,1,269,4240,
1,270,4451,19,1230,
1,270,4240,1,271,
4452,19,1220,1,271,
4240,1,272,4453,19,
1225,1,272,4240,1,
273,4454,19,1215,1,
273,4240,1,274,4455,
19,1568,1,274,4240,
1,275,4456,19,1235,
1,275,4240,1,276,
4457,19,1299,1,276,
4089,1,277,4458,19,
1665,1,277,4156,1,
278,4459,19,1660,1,
278,4156,1,279,4460,
19,1639,1,279,4160,
1,280,4461,19,1957,
1,280,3879,1,281,
4462,19,1952,1,281,
3879,1,282,4463,19,
1947,1,282,3879,1,
283,4464,19,1942,1,
283,3879,1,284,4465,
19,1937,1,284,3879,
1,285,4466,19,1932,
1,285,3879,1,286,
4467,19,1927,1,286,
3879,1,287,4468,19,
1858,1,287,3898,1,
288,4469,19,1853,1,
288,3898,1,289,4470,
19,1848,1,289,3898,
1,290,4471,19,1843,
1,290,3898,1,291,
4472,19,1838,1,291,
3898,1,292,4473,19,
1911,1,292,3898,1,
293,4474,19,1832,1,
293,3898,1,294,4475,
19,1827,1,294,3898,
1,295,4476,19,1822,
1,295,3898,1,296,
4477,19,1817,1,296,
3898,1,297,4478,19,
1812,1,297,3898,1,
298,4479,19,1807,1,
298,3898,1,299,4480,
19,1802,1,299,3898,
1,300,4481,19,1797,
1,300,3898,1,301,
4482,19,1792,1,301,
3898,1,302,4483,19,
1787,1,302,3898,1,
303,4484,19,1782,1,
303,3898,1,304,4485,
19,1777,1,304,3898,
1,305,4486,19,1901,
1,305,3898,1,306,
4487,19,1771,1,306,
3898,1,307,4488,19,
1766,1,307,3898,1,
308,4489,19,1761,1,
308,3898,1,309,4490,
19,1756,1,309,3898,
1,310,4491,19,1751,
1,310,3898,1,311,
4492,19,1894,1,311,
3898,1,312,4493,19,
1745,1,312,3898,1,
313,4494,19,1889,1,
313,3898,1,314,4495,
19,1740,1,314,3898,
1,315,4496,19,1735,
1,315,3898,1,316,
4497,19,1683,1,316,
3898,1,317,4498,19,
1882,1,317,3898,1,
318,4499,19,1728,1,
318,3898,1,319,4500,
19,1723,1,319,3898,
1,320,4501,19,1718,
1,320,3898,1,321,
4502,19,4503,4,50,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,95,0,51,0,
1,321,3856,1,322,
4504,19,4505,4,28,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,95,
0,51,0,1,322,
4156,1,323,4506,19,
4507,4,50,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,95,
0,52,0,1,323,
3856,1,324,4508,19,
4509,4,50,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,95,
0,53,0,1,324,
3856,1,325,4510,19,
4511,4,28,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,76,
0,105,0,115,0,
116,0,95,0,52,
0,1,325,4156,2,
0,0};
new Sfactory(this,"ExpressionArgument_1",new SCreator(ExpressionArgument_1_factory));
new Sfactory(this,"SimpleAssignment_8",new SCreator(SimpleAssignment_8_factory));
new Sfactory(this,"StatementList_1",new SCreator(StatementList_1_factory));
new Sfactory(this,"StateChange_1",new SCreator(StateChange_1_factory));
new Sfactory(this,"StateChange_2",new SCreator(StateChange_2_factory));
new Sfactory(this,"Declaration",new SCreator(Declaration_factory));
new Sfactory(this,"IdentExpression",new SCreator(IdentExpression_factory));
new Sfactory(this,"error",new SCreator(error_factory));
new Sfactory(this,"BinaryExpression_2",new SCreator(BinaryExpression_2_factory));
new Sfactory(this,"BinaryExpression_3",new SCreator(BinaryExpression_3_factory));
new Sfactory(this,"BinaryExpression_4",new SCreator(BinaryExpression_4_factory));
new Sfactory(this,"BinaryExpression_5",new SCreator(BinaryExpression_5_factory));
new Sfactory(this,"ReturnStatement_2",new SCreator(ReturnStatement_2_factory));
new Sfactory(this,"SimpleAssignment_19",new SCreator(SimpleAssignment_19_factory));
new Sfactory(this,"BinaryExpression_9",new SCreator(BinaryExpression_9_factory));
new Sfactory(this,"VectorConstant_1",new SCreator(VectorConstant_1_factory));
new Sfactory(this,"ParenthesisExpression",new SCreator(ParenthesisExpression_factory));
new Sfactory(this,"UnaryExpression",new SCreator(UnaryExpression_factory));
new Sfactory(this,"IdentDotExpression_1",new SCreator(IdentDotExpression_1_factory));
new Sfactory(this,"ArgumentList_4",new SCreator(ArgumentList_4_factory));
new Sfactory(this,"Typename",new SCreator(Typename_factory));
new Sfactory(this,"IfStatement_1",new SCreator(IfStatement_1_factory));
new Sfactory(this,"Assignment",new SCreator(Assignment_factory));
new Sfactory(this,"CompoundStatement_1",new SCreator(CompoundStatement_1_factory));
new Sfactory(this,"CompoundStatement_2",new SCreator(CompoundStatement_2_factory));
new Sfactory(this,"BinaryExpression_8",new SCreator(BinaryExpression_8_factory));
new Sfactory(this,"ReturnStatement_1",new SCreator(ReturnStatement_1_factory));
new Sfactory(this,"IdentDotExpression",new SCreator(IdentDotExpression_factory));
new Sfactory(this,"Argument",new SCreator(Argument_factory));
new Sfactory(this,"State_2",new SCreator(State_2_factory));
new Sfactory(this,"WhileStatement_1",new SCreator(WhileStatement_1_factory));
new Sfactory(this,"GlobalDefinitions_3",new SCreator(GlobalDefinitions_3_factory));
new Sfactory(this,"GlobalDefinitions_4",new SCreator(GlobalDefinitions_4_factory));
new Sfactory(this,"Event_1",new SCreator(Event_1_factory));
new Sfactory(this,"ListConstant",new SCreator(ListConstant_factory));
new Sfactory(this,"Event_3",new SCreator(Event_3_factory));
new Sfactory(this,"Event_4",new SCreator(Event_4_factory));
new Sfactory(this,"Event_5",new SCreator(Event_5_factory));
new Sfactory(this,"SimpleAssignment_5",new SCreator(SimpleAssignment_5_factory));
new Sfactory(this,"Typename_1",new SCreator(Typename_1_factory));
new Sfactory(this,"Typename_2",new SCreator(Typename_2_factory));
new Sfactory(this,"Typename_3",new SCreator(Typename_3_factory));
new Sfactory(this,"Typename_4",new SCreator(Typename_4_factory));
new Sfactory(this,"Typename_5",new SCreator(Typename_5_factory));
new Sfactory(this,"Typename_6",new SCreator(Typename_6_factory));
new Sfactory(this,"Typename_7",new SCreator(Typename_7_factory));
new Sfactory(this,"ArgumentDeclarationList",new SCreator(ArgumentDeclarationList_factory));
new Sfactory(this,"ConstantExpression",new SCreator(ConstantExpression_factory));
new Sfactory(this,"LSLProgramRoot_1",new SCreator(LSLProgramRoot_1_factory));
new Sfactory(this,"LSLProgramRoot_2",new SCreator(LSLProgramRoot_2_factory));
new Sfactory(this,"States_1",new SCreator(States_1_factory));
new Sfactory(this,"States_2",new SCreator(States_2_factory));
new Sfactory(this,"FunctionCallExpression_1",new SCreator(FunctionCallExpression_1_factory));
new Sfactory(this,"ForLoopStatement",new SCreator(ForLoopStatement_factory));
new Sfactory(this,"DoWhileStatement_1",new SCreator(DoWhileStatement_1_factory));
new Sfactory(this,"DoWhileStatement_2",new SCreator(DoWhileStatement_2_factory));
new Sfactory(this,"ForLoopStatement_4",new SCreator(ForLoopStatement_4_factory));
new Sfactory(this,"SimpleAssignment_11",new SCreator(SimpleAssignment_11_factory));
new Sfactory(this,"SimpleAssignment_12",new SCreator(SimpleAssignment_12_factory));
new Sfactory(this,"SimpleAssignment_13",new SCreator(SimpleAssignment_13_factory));
new Sfactory(this,"JumpLabel",new SCreator(JumpLabel_factory));
new Sfactory(this,"SimpleAssignment_15",new SCreator(SimpleAssignment_15_factory));
new Sfactory(this,"SimpleAssignment_17",new SCreator(SimpleAssignment_17_factory));
new Sfactory(this,"SimpleAssignment_18",new SCreator(SimpleAssignment_18_factory));
new Sfactory(this,"JumpStatement_1",new SCreator(JumpStatement_1_factory));
new Sfactory(this,"GlobalDefinitions",new SCreator(GlobalDefinitions_factory));
new Sfactory(this,"FunctionCall_1",new SCreator(FunctionCall_1_factory));
new Sfactory(this,"ArgumentList_3",new SCreator(ArgumentList_3_factory));
new Sfactory(this,"Assignment_2",new SCreator(Assignment_2_factory));
new Sfactory(this,"TypecastExpression_1",new SCreator(TypecastExpression_1_factory));
new Sfactory(this,"SimpleAssignment_21",new SCreator(SimpleAssignment_21_factory));
new Sfactory(this,"SimpleAssignment_22",new SCreator(SimpleAssignment_22_factory));
new Sfactory(this,"SimpleAssignment_23",new SCreator(SimpleAssignment_23_factory));
new Sfactory(this,"TypecastExpression_9",new SCreator(TypecastExpression_9_factory));
new Sfactory(this,"ArgumentDeclarationList_1",new SCreator(ArgumentDeclarationList_1_factory));
new Sfactory(this,"ArgumentDeclarationList_2",new SCreator(ArgumentDeclarationList_2_factory));
new Sfactory(this,"ArgumentDeclarationList_3",new SCreator(ArgumentDeclarationList_3_factory));
new Sfactory(this,"GlobalDefinitions_1",new SCreator(GlobalDefinitions_1_factory));
new Sfactory(this,"GlobalDefinitions_2",new SCreator(GlobalDefinitions_2_factory));
new Sfactory(this,"IncrementDecrementExpression",new SCreator(IncrementDecrementExpression_factory));
new Sfactory(this,"GlobalVariableDeclaration",new SCreator(GlobalVariableDeclaration_factory));
new Sfactory(this,"Event_11",new SCreator(Event_11_factory));
new Sfactory(this,"TypecastExpression_2",new SCreator(TypecastExpression_2_factory));
new Sfactory(this,"TypecastExpression_3",new SCreator(TypecastExpression_3_factory));
new Sfactory(this,"TypecastExpression_5",new SCreator(TypecastExpression_5_factory));
new Sfactory(this,"TypecastExpression_8",new SCreator(TypecastExpression_8_factory));
new Sfactory(this,"Constant_1",new SCreator(Constant_1_factory));
new Sfactory(this,"Expression",new SCreator(Expression_factory));
new Sfactory(this,"Constant_3",new SCreator(Constant_3_factory));
new Sfactory(this,"Constant_4",new SCreator(Constant_4_factory));
new Sfactory(this,"BinaryExpression_1",new SCreator(BinaryExpression_1_factory));
new Sfactory(this,"IfStatement_2",new SCreator(IfStatement_2_factory));
new Sfactory(this,"IfStatement_3",new SCreator(IfStatement_3_factory));
new Sfactory(this,"IfStatement_4",new SCreator(IfStatement_4_factory));
new Sfactory(this,"ReturnStatement",new SCreator(ReturnStatement_factory));
new Sfactory(this,"Event_2",new SCreator(Event_2_factory));
new Sfactory(this,"RotationConstant",new SCreator(RotationConstant_factory));
new Sfactory(this,"Statement_12",new SCreator(Statement_12_factory));
new Sfactory(this,"UnaryExpression_1",new SCreator(UnaryExpression_1_factory));
new Sfactory(this,"UnaryExpression_2",new SCreator(UnaryExpression_2_factory));
new Sfactory(this,"UnaryExpression_3",new SCreator(UnaryExpression_3_factory));
new Sfactory(this,"ArgumentList_1",new SCreator(ArgumentList_1_factory));
new Sfactory(this,"ArgumentList_2",new SCreator(ArgumentList_2_factory));
new Sfactory(this,"Constant",new SCreator(Constant_factory));
new Sfactory(this,"State",new SCreator(State_factory));
new Sfactory(this,"Event_13",new SCreator(Event_13_factory));
new Sfactory(this,"LSLProgramRoot",new SCreator(LSLProgramRoot_factory));
new Sfactory(this,"StateChange",new SCreator(StateChange_factory));
new Sfactory(this,"IncrementDecrementExpression_2",new SCreator(IncrementDecrementExpression_2_factory));
new Sfactory(this,"GlobalVariableDeclaration_1",new SCreator(GlobalVariableDeclaration_1_factory));
new Sfactory(this,"GlobalVariableDeclaration_2",new SCreator(GlobalVariableDeclaration_2_factory));
new Sfactory(this,"IncrementDecrementExpression_5",new SCreator(IncrementDecrementExpression_5_factory));
new Sfactory(this,"GlobalFunctionDefinition_2",new SCreator(GlobalFunctionDefinition_2_factory));
new Sfactory(this,"IncrementDecrementExpression_7",new SCreator(IncrementDecrementExpression_7_factory));
new Sfactory(this,"IncrementDecrementExpression_8",new SCreator(IncrementDecrementExpression_8_factory));
new Sfactory(this,"Assignment_1",new SCreator(Assignment_1_factory));
new Sfactory(this,"Event_21",new SCreator(Event_21_factory));
new Sfactory(this,"Event_22",new SCreator(Event_22_factory));
new Sfactory(this,"CompoundStatement",new SCreator(CompoundStatement_factory));
new Sfactory(this,"RotationConstant_1",new SCreator(RotationConstant_1_factory));
new Sfactory(this,"TypecastExpression",new SCreator(TypecastExpression_factory));
new Sfactory(this,"SimpleAssignment_3",new SCreator(SimpleAssignment_3_factory));
new Sfactory(this,"SimpleAssignment_4",new SCreator(SimpleAssignment_4_factory));
new Sfactory(this,"Statement_1",new SCreator(Statement_1_factory));
new Sfactory(this,"Statement_2",new SCreator(Statement_2_factory));
new Sfactory(this,"Statement_3",new SCreator(Statement_3_factory));
new Sfactory(this,"Statement_4",new SCreator(Statement_4_factory));
new Sfactory(this,"Statement_5",new SCreator(Statement_5_factory));
new Sfactory(this,"Statement_6",new SCreator(Statement_6_factory));
new Sfactory(this,"Statement_7",new SCreator(Statement_7_factory));
new Sfactory(this,"Statement_8",new SCreator(Statement_8_factory));
new Sfactory(this,"Statement_9",new SCreator(Statement_9_factory));
new Sfactory(this,"ExpressionArgument",new SCreator(ExpressionArgument_factory));
new Sfactory(this,"GlobalFunctionDefinition",new SCreator(GlobalFunctionDefinition_factory));
new Sfactory(this,"State_1",new SCreator(State_1_factory));
new Sfactory(this,"DoWhileStatement",new SCreator(DoWhileStatement_factory));
new Sfactory(this,"ParenthesisExpression_1",new SCreator(ParenthesisExpression_1_factory));
new Sfactory(this,"ParenthesisExpression_2",new SCreator(ParenthesisExpression_2_factory));
new Sfactory(this,"StateBody",new SCreator(StateBody_factory));
new Sfactory(this,"Event_7",new SCreator(Event_7_factory));
new Sfactory(this,"Event_8",new SCreator(Event_8_factory));
new Sfactory(this,"IncrementDecrementExpression_1",new SCreator(IncrementDecrementExpression_1_factory));
new Sfactory(this,"IncrementDecrementExpression_3",new SCreator(IncrementDecrementExpression_3_factory));
new Sfactory(this,"IncrementDecrementExpression_4",new SCreator(IncrementDecrementExpression_4_factory));
new Sfactory(this,"IncrementDecrementExpression_6",new SCreator(IncrementDecrementExpression_6_factory));
new Sfactory(this,"StateEvent",new SCreator(StateEvent_factory));
new Sfactory(this,"Event_20",new SCreator(Event_20_factory));
new Sfactory(this,"Event_23",new SCreator(Event_23_factory));
new Sfactory(this,"Event_24",new SCreator(Event_24_factory));
new Sfactory(this,"Event_26",new SCreator(Event_26_factory));
new Sfactory(this,"SimpleAssignment_10",new SCreator(SimpleAssignment_10_factory));
new Sfactory(this,"Event",new SCreator(Event_factory));
new Sfactory(this,"SimpleAssignment_14",new SCreator(SimpleAssignment_14_factory));
new Sfactory(this,"SimpleAssignment_16",new SCreator(SimpleAssignment_16_factory));
new Sfactory(this,"Statement_10",new SCreator(Statement_10_factory));
new Sfactory(this,"Statement_11",new SCreator(Statement_11_factory));
new Sfactory(this,"SimpleAssignment",new SCreator(SimpleAssignment_factory));
new Sfactory(this,"Statement_13",new SCreator(Statement_13_factory));
new Sfactory(this,"Event_15",new SCreator(Event_15_factory));
new Sfactory(this,"Event_16",new SCreator(Event_16_factory));
new Sfactory(this,"Event_32",new SCreator(Event_32_factory));
new Sfactory(this,"Event_34",new SCreator(Event_34_factory));
new Sfactory(this,"SimpleAssignment_20",new SCreator(SimpleAssignment_20_factory));
new Sfactory(this,"SimpleAssignment_24",new SCreator(SimpleAssignment_24_factory));
new Sfactory(this,"SimpleAssignment_1",new SCreator(SimpleAssignment_1_factory));
new Sfactory(this,"SimpleAssignment_2",new SCreator(SimpleAssignment_2_factory));
new Sfactory(this,"BinaryExpression",new SCreator(BinaryExpression_factory));
new Sfactory(this,"FunctionCallExpression",new SCreator(FunctionCallExpression_factory));
new Sfactory(this,"SimpleAssignment_6",new SCreator(SimpleAssignment_6_factory));
new Sfactory(this,"StateBody_1",new SCreator(StateBody_1_factory));
new Sfactory(this,"StatementList_2",new SCreator(StatementList_2_factory));
new Sfactory(this,"SimpleAssignment_9",new SCreator(SimpleAssignment_9_factory));
new Sfactory(this,"BinaryExpression_15",new SCreator(BinaryExpression_15_factory));
new Sfactory(this,"BinaryExpression_16",new SCreator(BinaryExpression_16_factory));
new Sfactory(this,"BinaryExpression_17",new SCreator(BinaryExpression_17_factory));
new Sfactory(this,"BinaryExpression_18",new SCreator(BinaryExpression_18_factory));
new Sfactory(this,"Event_25",new SCreator(Event_25_factory));
new Sfactory(this,"Event_9",new SCreator(Event_9_factory));
new Sfactory(this,"Statement",new SCreator(Statement_factory));
new Sfactory(this,"JumpStatement",new SCreator(JumpStatement_factory));
new Sfactory(this,"BinaryExpression_11",new SCreator(BinaryExpression_11_factory));
new Sfactory(this,"BinaryExpression_12",new SCreator(BinaryExpression_12_factory));
new Sfactory(this,"BinaryExpression_13",new SCreator(BinaryExpression_13_factory));
new Sfactory(this,"BinaryExpression_14",new SCreator(BinaryExpression_14_factory));
new Sfactory(this,"BinaryExpression_6",new SCreator(BinaryExpression_6_factory));
new Sfactory(this,"BinaryExpression_7",new SCreator(BinaryExpression_7_factory));
new Sfactory(this,"ArgumentList",new SCreator(ArgumentList_factory));
new Sfactory(this,"Event_10",new SCreator(Event_10_factory));
new Sfactory(this,"ConstantExpression_1",new SCreator(ConstantExpression_1_factory));
new Sfactory(this,"Event_12",new SCreator(Event_12_factory));
new Sfactory(this,"Event_14",new SCreator(Event_14_factory));
new Sfactory(this,"Event_17",new SCreator(Event_17_factory));
new Sfactory(this,"Event_18",new SCreator(Event_18_factory));
new Sfactory(this,"Event_19",new SCreator(Event_19_factory));
new Sfactory(this,"BinaryExpression_10",new SCreator(BinaryExpression_10_factory));
new Sfactory(this,"StateEvent_1",new SCreator(StateEvent_1_factory));
new Sfactory(this,"VectorConstant",new SCreator(VectorConstant_factory));
new Sfactory(this,"EmptyStatement_1",new SCreator(EmptyStatement_1_factory));
new Sfactory(this,"TypecastExpression_4",new SCreator(TypecastExpression_4_factory));
new Sfactory(this,"TypecastExpression_6",new SCreator(TypecastExpression_6_factory));
new Sfactory(this,"TypecastExpression_7",new SCreator(TypecastExpression_7_factory));
new Sfactory(this,"FunctionCall",new SCreator(FunctionCall_factory));
new Sfactory(this,"Event_27",new SCreator(Event_27_factory));
new Sfactory(this,"Event_28",new SCreator(Event_28_factory));
new Sfactory(this,"Event_29",new SCreator(Event_29_factory));
new Sfactory(this,"ListConstant_1",new SCreator(ListConstant_1_factory));
new Sfactory(this,"Event_6",new SCreator(Event_6_factory));
new Sfactory(this,"Declaration_1",new SCreator(Declaration_1_factory));
new Sfactory(this,"SimpleAssignment_7",new SCreator(SimpleAssignment_7_factory));
new Sfactory(this,"ForLoop",new SCreator(ForLoop_factory));
new Sfactory(this,"Event_30",new SCreator(Event_30_factory));
new Sfactory(this,"Event_31",new SCreator(Event_31_factory));
new Sfactory(this,"Event_33",new SCreator(Event_33_factory));
new Sfactory(this,"GlobalFunctionDefinition_1",new SCreator(GlobalFunctionDefinition_1_factory));
new Sfactory(this,"JumpLabel_1",new SCreator(JumpLabel_1_factory));
new Sfactory(this,"IfStatement",new SCreator(IfStatement_factory));
new Sfactory(this,"ForLoopStatement_1",new SCreator(ForLoopStatement_1_factory));
new Sfactory(this,"ForLoopStatement_2",new SCreator(ForLoopStatement_2_factory));
new Sfactory(this,"ForLoopStatement_3",new SCreator(ForLoopStatement_3_factory));
new Sfactory(this,"ArgumentDeclarationList_4",new SCreator(ArgumentDeclarationList_4_factory));
new Sfactory(this,"ArgumentDeclarationList_5",new SCreator(ArgumentDeclarationList_5_factory));
new Sfactory(this,"EmptyStatement",new SCreator(EmptyStatement_factory));
new Sfactory(this,"WhileStatement",new SCreator(WhileStatement_factory));
new Sfactory(this,"ForLoop_1",new SCreator(ForLoop_1_factory));
new Sfactory(this,"Constant_2",new SCreator(Constant_2_factory));
new Sfactory(this,"StatementList",new SCreator(StatementList_factory));
new Sfactory(this,"StateBody_2",new SCreator(StateBody_2_factory));
new Sfactory(this,"WhileStatement_2",new SCreator(WhileStatement_2_factory));
new Sfactory(this,"IdentExpression_1",new SCreator(IdentExpression_1_factory));
new Sfactory(this,"States",new SCreator(States_factory));
}
public static object ExpressionArgument_1_factory(Parser yyp) { return new ExpressionArgument_1(yyp); }
public static object SimpleAssignment_8_factory(Parser yyp) { return new SimpleAssignment_8(yyp); }
public static object StatementList_1_factory(Parser yyp) { return new StatementList_1(yyp); }
public static object StateChange_1_factory(Parser yyp) { return new StateChange_1(yyp); }
public static object StateChange_2_factory(Parser yyp) { return new StateChange_2(yyp); }
public static object Declaration_factory(Parser yyp) { return new Declaration(yyp); }
public static object IdentExpression_factory(Parser yyp) { return new IdentExpression(yyp); }
public static object error_factory(Parser yyp) { return new error(yyp); }
public static object BinaryExpression_2_factory(Parser yyp) { return new BinaryExpression_2(yyp); }
public static object BinaryExpression_3_factory(Parser yyp) { return new BinaryExpression_3(yyp); }
public static object BinaryExpression_4_factory(Parser yyp) { return new BinaryExpression_4(yyp); }
public static object BinaryExpression_5_factory(Parser yyp) { return new BinaryExpression_5(yyp); }
public static object ReturnStatement_2_factory(Parser yyp) { return new ReturnStatement_2(yyp); }
public static object SimpleAssignment_19_factory(Parser yyp) { return new SimpleAssignment_19(yyp); }
public static object BinaryExpression_9_factory(Parser yyp) { return new BinaryExpression_9(yyp); }
public static object VectorConstant_1_factory(Parser yyp) { return new VectorConstant_1(yyp); }
public static object ParenthesisExpression_factory(Parser yyp) { return new ParenthesisExpression(yyp); }
public static object UnaryExpression_factory(Parser yyp) { return new UnaryExpression(yyp); }
public static object IdentDotExpression_1_factory(Parser yyp) { return new IdentDotExpression_1(yyp); }
public static object ArgumentList_4_factory(Parser yyp) { return new ArgumentList_4(yyp); }
public static object Typename_factory(Parser yyp) { return new Typename(yyp); }
public static object IfStatement_1_factory(Parser yyp) { return new IfStatement_1(yyp); }
public static object Assignment_factory(Parser yyp) { return new Assignment(yyp); }
public static object CompoundStatement_1_factory(Parser yyp) { return new CompoundStatement_1(yyp); }
public static object CompoundStatement_2_factory(Parser yyp) { return new CompoundStatement_2(yyp); }
public static object BinaryExpression_8_factory(Parser yyp) { return new BinaryExpression_8(yyp); }
public static object ReturnStatement_1_factory(Parser yyp) { return new ReturnStatement_1(yyp); }
public static object IdentDotExpression_factory(Parser yyp) { return new IdentDotExpression(yyp); }
public static object Argument_factory(Parser yyp) { return new Argument(yyp); }
public static object State_2_factory(Parser yyp) { return new State_2(yyp); }
public static object WhileStatement_1_factory(Parser yyp) { return new WhileStatement_1(yyp); }
public static object GlobalDefinitions_3_factory(Parser yyp) { return new GlobalDefinitions_3(yyp); }
public static object GlobalDefinitions_4_factory(Parser yyp) { return new GlobalDefinitions_4(yyp); }
public static object Event_1_factory(Parser yyp) { return new Event_1(yyp); }
public static object ListConstant_factory(Parser yyp) { return new ListConstant(yyp); }
public static object Event_3_factory(Parser yyp) { return new Event_3(yyp); }
public static object Event_4_factory(Parser yyp) { return new Event_4(yyp); }
public static object Event_5_factory(Parser yyp) { return new Event_5(yyp); }
public static object SimpleAssignment_5_factory(Parser yyp) { return new SimpleAssignment_5(yyp); }
public static object Typename_1_factory(Parser yyp) { return new Typename_1(yyp); }
public static object Typename_2_factory(Parser yyp) { return new Typename_2(yyp); }
public static object Typename_3_factory(Parser yyp) { return new Typename_3(yyp); }
public static object Typename_4_factory(Parser yyp) { return new Typename_4(yyp); }
public static object Typename_5_factory(Parser yyp) { return new Typename_5(yyp); }
public static object Typename_6_factory(Parser yyp) { return new Typename_6(yyp); }
public static object Typename_7_factory(Parser yyp) { return new Typename_7(yyp); }
public static object ArgumentDeclarationList_factory(Parser yyp) { return new ArgumentDeclarationList(yyp); }
public static object ConstantExpression_factory(Parser yyp) { return new ConstantExpression(yyp); }
public static object LSLProgramRoot_1_factory(Parser yyp) { return new LSLProgramRoot_1(yyp); }
public static object LSLProgramRoot_2_factory(Parser yyp) { return new LSLProgramRoot_2(yyp); }
public static object States_1_factory(Parser yyp) { return new States_1(yyp); }
public static object States_2_factory(Parser yyp) { return new States_2(yyp); }
public static object FunctionCallExpression_1_factory(Parser yyp) { return new FunctionCallExpression_1(yyp); }
public static object ForLoopStatement_factory(Parser yyp) { return new ForLoopStatement(yyp); }
public static object DoWhileStatement_1_factory(Parser yyp) { return new DoWhileStatement_1(yyp); }
public static object DoWhileStatement_2_factory(Parser yyp) { return new DoWhileStatement_2(yyp); }
public static object ForLoopStatement_4_factory(Parser yyp) { return new ForLoopStatement_4(yyp); }
public static object SimpleAssignment_11_factory(Parser yyp) { return new SimpleAssignment_11(yyp); }
public static object SimpleAssignment_12_factory(Parser yyp) { return new SimpleAssignment_12(yyp); }
public static object SimpleAssignment_13_factory(Parser yyp) { return new SimpleAssignment_13(yyp); }
public static object JumpLabel_factory(Parser yyp) { return new JumpLabel(yyp); }
public static object SimpleAssignment_15_factory(Parser yyp) { return new SimpleAssignment_15(yyp); }
public static object SimpleAssignment_17_factory(Parser yyp) { return new SimpleAssignment_17(yyp); }
public static object SimpleAssignment_18_factory(Parser yyp) { return new SimpleAssignment_18(yyp); }
public static object JumpStatement_1_factory(Parser yyp) { return new JumpStatement_1(yyp); }
public static object GlobalDefinitions_factory(Parser yyp) { return new GlobalDefinitions(yyp); }
public static object FunctionCall_1_factory(Parser yyp) { return new FunctionCall_1(yyp); }
public static object ArgumentList_3_factory(Parser yyp) { return new ArgumentList_3(yyp); }
public static object Assignment_2_factory(Parser yyp) { return new Assignment_2(yyp); }
public static object TypecastExpression_1_factory(Parser yyp) { return new TypecastExpression_1(yyp); }
public static object SimpleAssignment_21_factory(Parser yyp) { return new SimpleAssignment_21(yyp); }
public static object SimpleAssignment_22_factory(Parser yyp) { return new SimpleAssignment_22(yyp); }
public static object SimpleAssignment_23_factory(Parser yyp) { return new SimpleAssignment_23(yyp); }
public static object TypecastExpression_9_factory(Parser yyp) { return new TypecastExpression_9(yyp); }
public static object ArgumentDeclarationList_1_factory(Parser yyp) { return new ArgumentDeclarationList_1(yyp); }
public static object ArgumentDeclarationList_2_factory(Parser yyp) { return new ArgumentDeclarationList_2(yyp); }
public static object ArgumentDeclarationList_3_factory(Parser yyp) { return new ArgumentDeclarationList_3(yyp); }
public static object GlobalDefinitions_1_factory(Parser yyp) { return new GlobalDefinitions_1(yyp); }
public static object GlobalDefinitions_2_factory(Parser yyp) { return new GlobalDefinitions_2(yyp); }
public static object IncrementDecrementExpression_factory(Parser yyp) { return new IncrementDecrementExpression(yyp); }
public static object GlobalVariableDeclaration_factory(Parser yyp) { return new GlobalVariableDeclaration(yyp); }
public static object Event_11_factory(Parser yyp) { return new Event_11(yyp); }
public static object TypecastExpression_2_factory(Parser yyp) { return new TypecastExpression_2(yyp); }
public static object TypecastExpression_3_factory(Parser yyp) { return new TypecastExpression_3(yyp); }
public static object TypecastExpression_5_factory(Parser yyp) { return new TypecastExpression_5(yyp); }
public static object TypecastExpression_8_factory(Parser yyp) { return new TypecastExpression_8(yyp); }
public static object Constant_1_factory(Parser yyp) { return new Constant_1(yyp); }
public static object Expression_factory(Parser yyp) { return new Expression(yyp); }
public static object Constant_3_factory(Parser yyp) { return new Constant_3(yyp); }
public static object Constant_4_factory(Parser yyp) { return new Constant_4(yyp); }
public static object BinaryExpression_1_factory(Parser yyp) { return new BinaryExpression_1(yyp); }
public static object IfStatement_2_factory(Parser yyp) { return new IfStatement_2(yyp); }
public static object IfStatement_3_factory(Parser yyp) { return new IfStatement_3(yyp); }
public static object IfStatement_4_factory(Parser yyp) { return new IfStatement_4(yyp); }
public static object ReturnStatement_factory(Parser yyp) { return new ReturnStatement(yyp); }
public static object Event_2_factory(Parser yyp) { return new Event_2(yyp); }
public static object RotationConstant_factory(Parser yyp) { return new RotationConstant(yyp); }
public static object Statement_12_factory(Parser yyp) { return new Statement_12(yyp); }
public static object UnaryExpression_1_factory(Parser yyp) { return new UnaryExpression_1(yyp); }
public static object UnaryExpression_2_factory(Parser yyp) { return new UnaryExpression_2(yyp); }
public static object UnaryExpression_3_factory(Parser yyp) { return new UnaryExpression_3(yyp); }
public static object ArgumentList_1_factory(Parser yyp) { return new ArgumentList_1(yyp); }
public static object ArgumentList_2_factory(Parser yyp) { return new ArgumentList_2(yyp); }
public static object Constant_factory(Parser yyp) { return new Constant(yyp); }
public static object State_factory(Parser yyp) { return new State(yyp); }
public static object Event_13_factory(Parser yyp) { return new Event_13(yyp); }
public static object LSLProgramRoot_factory(Parser yyp) { return new LSLProgramRoot(yyp); }
public static object StateChange_factory(Parser yyp) { return new StateChange(yyp); }
public static object IncrementDecrementExpression_2_factory(Parser yyp) { return new IncrementDecrementExpression_2(yyp); }
public static object GlobalVariableDeclaration_1_factory(Parser yyp) { return new GlobalVariableDeclaration_1(yyp); }
public static object GlobalVariableDeclaration_2_factory(Parser yyp) { return new GlobalVariableDeclaration_2(yyp); }
public static object IncrementDecrementExpression_5_factory(Parser yyp) { return new IncrementDecrementExpression_5(yyp); }
public static object GlobalFunctionDefinition_2_factory(Parser yyp) { return new GlobalFunctionDefinition_2(yyp); }
public static object IncrementDecrementExpression_7_factory(Parser yyp) { return new IncrementDecrementExpression_7(yyp); }
public static object IncrementDecrementExpression_8_factory(Parser yyp) { return new IncrementDecrementExpression_8(yyp); }
public static object Assignment_1_factory(Parser yyp) { return new Assignment_1(yyp); }
public static object Event_21_factory(Parser yyp) { return new Event_21(yyp); }
public static object Event_22_factory(Parser yyp) { return new Event_22(yyp); }
public static object CompoundStatement_factory(Parser yyp) { return new CompoundStatement(yyp); }
public static object RotationConstant_1_factory(Parser yyp) { return new RotationConstant_1(yyp); }
public static object TypecastExpression_factory(Parser yyp) { return new TypecastExpression(yyp); }
public static object SimpleAssignment_3_factory(Parser yyp) { return new SimpleAssignment_3(yyp); }
public static object SimpleAssignment_4_factory(Parser yyp) { return new SimpleAssignment_4(yyp); }
public static object Statement_1_factory(Parser yyp) { return new Statement_1(yyp); }
public static object Statement_2_factory(Parser yyp) { return new Statement_2(yyp); }
public static object Statement_3_factory(Parser yyp) { return new Statement_3(yyp); }
public static object Statement_4_factory(Parser yyp) { return new Statement_4(yyp); }
public static object Statement_5_factory(Parser yyp) { return new Statement_5(yyp); }
public static object Statement_6_factory(Parser yyp) { return new Statement_6(yyp); }
public static object Statement_7_factory(Parser yyp) { return new Statement_7(yyp); }
public static object Statement_8_factory(Parser yyp) { return new Statement_8(yyp); }
public static object Statement_9_factory(Parser yyp) { return new Statement_9(yyp); }
public static object ExpressionArgument_factory(Parser yyp) { return new ExpressionArgument(yyp); }
public static object GlobalFunctionDefinition_factory(Parser yyp) { return new GlobalFunctionDefinition(yyp); }
public static object State_1_factory(Parser yyp) { return new State_1(yyp); }
public static object DoWhileStatement_factory(Parser yyp) { return new DoWhileStatement(yyp); }
public static object ParenthesisExpression_1_factory(Parser yyp) { return new ParenthesisExpression_1(yyp); }
public static object ParenthesisExpression_2_factory(Parser yyp) { return new ParenthesisExpression_2(yyp); }
public static object StateBody_factory(Parser yyp) { return new StateBody(yyp); }
public static object Event_7_factory(Parser yyp) { return new Event_7(yyp); }
public static object Event_8_factory(Parser yyp) { return new Event_8(yyp); }
public static object IncrementDecrementExpression_1_factory(Parser yyp) { return new IncrementDecrementExpression_1(yyp); }
public static object IncrementDecrementExpression_3_factory(Parser yyp) { return new IncrementDecrementExpression_3(yyp); }
public static object IncrementDecrementExpression_4_factory(Parser yyp) { return new IncrementDecrementExpression_4(yyp); }
public static object IncrementDecrementExpression_6_factory(Parser yyp) { return new IncrementDecrementExpression_6(yyp); }
public static object StateEvent_factory(Parser yyp) { return new StateEvent(yyp); }
public static object Event_20_factory(Parser yyp) { return new Event_20(yyp); }
public static object Event_23_factory(Parser yyp) { return new Event_23(yyp); }
public static object Event_24_factory(Parser yyp) { return new Event_24(yyp); }
public static object Event_26_factory(Parser yyp) { return new Event_26(yyp); }
public static object SimpleAssignment_10_factory(Parser yyp) { return new SimpleAssignment_10(yyp); }
public static object Event_factory(Parser yyp) { return new Event(yyp); }
public static object SimpleAssignment_14_factory(Parser yyp) { return new SimpleAssignment_14(yyp); }
public static object SimpleAssignment_16_factory(Parser yyp) { return new SimpleAssignment_16(yyp); }
public static object Statement_10_factory(Parser yyp) { return new Statement_10(yyp); }
public static object Statement_11_factory(Parser yyp) { return new Statement_11(yyp); }
public static object SimpleAssignment_factory(Parser yyp) { return new SimpleAssignment(yyp); }
public static object Statement_13_factory(Parser yyp) { return new Statement_13(yyp); }
public static object Event_15_factory(Parser yyp) { return new Event_15(yyp); }
public static object Event_16_factory(Parser yyp) { return new Event_16(yyp); }
public static object Event_32_factory(Parser yyp) { return new Event_32(yyp); }
public static object Event_34_factory(Parser yyp) { return new Event_34(yyp); }
public static object SimpleAssignment_20_factory(Parser yyp) { return new SimpleAssignment_20(yyp); }
public static object SimpleAssignment_24_factory(Parser yyp) { return new SimpleAssignment_24(yyp); }
public static object SimpleAssignment_1_factory(Parser yyp) { return new SimpleAssignment_1(yyp); }
public static object SimpleAssignment_2_factory(Parser yyp) { return new SimpleAssignment_2(yyp); }
public static object BinaryExpression_factory(Parser yyp) { return new BinaryExpression(yyp); }
public static object FunctionCallExpression_factory(Parser yyp) { return new FunctionCallExpression(yyp); }
public static object SimpleAssignment_6_factory(Parser yyp) { return new SimpleAssignment_6(yyp); }
public static object StateBody_1_factory(Parser yyp) { return new StateBody_1(yyp); }
public static object StatementList_2_factory(Parser yyp) { return new StatementList_2(yyp); }
public static object SimpleAssignment_9_factory(Parser yyp) { return new SimpleAssignment_9(yyp); }
public static object BinaryExpression_15_factory(Parser yyp) { return new BinaryExpression_15(yyp); }
public static object BinaryExpression_16_factory(Parser yyp) { return new BinaryExpression_16(yyp); }
public static object BinaryExpression_17_factory(Parser yyp) { return new BinaryExpression_17(yyp); }
public static object BinaryExpression_18_factory(Parser yyp) { return new BinaryExpression_18(yyp); }
public static object Event_25_factory(Parser yyp) { return new Event_25(yyp); }
public static object Event_9_factory(Parser yyp) { return new Event_9(yyp); }
public static object Statement_factory(Parser yyp) { return new Statement(yyp); }
public static object JumpStatement_factory(Parser yyp) { return new JumpStatement(yyp); }
public static object BinaryExpression_11_factory(Parser yyp) { return new BinaryExpression_11(yyp); }
public static object BinaryExpression_12_factory(Parser yyp) { return new BinaryExpression_12(yyp); }
public static object BinaryExpression_13_factory(Parser yyp) { return new BinaryExpression_13(yyp); }
public static object BinaryExpression_14_factory(Parser yyp) { return new BinaryExpression_14(yyp); }
public static object BinaryExpression_6_factory(Parser yyp) { return new BinaryExpression_6(yyp); }
public static object BinaryExpression_7_factory(Parser yyp) { return new BinaryExpression_7(yyp); }
public static object ArgumentList_factory(Parser yyp) { return new ArgumentList(yyp); }
public static object Event_10_factory(Parser yyp) { return new Event_10(yyp); }
public static object ConstantExpression_1_factory(Parser yyp) { return new ConstantExpression_1(yyp); }
public static object Event_12_factory(Parser yyp) { return new Event_12(yyp); }
public static object Event_14_factory(Parser yyp) { return new Event_14(yyp); }
public static object Event_17_factory(Parser yyp) { return new Event_17(yyp); }
public static object Event_18_factory(Parser yyp) { return new Event_18(yyp); }
public static object Event_19_factory(Parser yyp) { return new Event_19(yyp); }
public static object BinaryExpression_10_factory(Parser yyp) { return new BinaryExpression_10(yyp); }
public static object StateEvent_1_factory(Parser yyp) { return new StateEvent_1(yyp); }
public static object VectorConstant_factory(Parser yyp) { return new VectorConstant(yyp); }
public static object EmptyStatement_1_factory(Parser yyp) { return new EmptyStatement_1(yyp); }
public static object TypecastExpression_4_factory(Parser yyp) { return new TypecastExpression_4(yyp); }
public static object TypecastExpression_6_factory(Parser yyp) { return new TypecastExpression_6(yyp); }
public static object TypecastExpression_7_factory(Parser yyp) { return new TypecastExpression_7(yyp); }
public static object FunctionCall_factory(Parser yyp) { return new FunctionCall(yyp); }
public static object Event_27_factory(Parser yyp) { return new Event_27(yyp); }
public static object Event_28_factory(Parser yyp) { return new Event_28(yyp); }
public static object Event_29_factory(Parser yyp) { return new Event_29(yyp); }
public static object ListConstant_1_factory(Parser yyp) { return new ListConstant_1(yyp); }
public static object Event_6_factory(Parser yyp) { return new Event_6(yyp); }
public static object Declaration_1_factory(Parser yyp) { return new Declaration_1(yyp); }
public static object SimpleAssignment_7_factory(Parser yyp) { return new SimpleAssignment_7(yyp); }
public static object ForLoop_factory(Parser yyp) { return new ForLoop(yyp); }
public static object Event_30_factory(Parser yyp) { return new Event_30(yyp); }
public static object Event_31_factory(Parser yyp) { return new Event_31(yyp); }
public static object Event_33_factory(Parser yyp) { return new Event_33(yyp); }
public static object GlobalFunctionDefinition_1_factory(Parser yyp) { return new GlobalFunctionDefinition_1(yyp); }
public static object JumpLabel_1_factory(Parser yyp) { return new JumpLabel_1(yyp); }
public static object IfStatement_factory(Parser yyp) { return new IfStatement(yyp); }
public static object ForLoopStatement_1_factory(Parser yyp) { return new ForLoopStatement_1(yyp); }
public static object ForLoopStatement_2_factory(Parser yyp) { return new ForLoopStatement_2(yyp); }
public static object ForLoopStatement_3_factory(Parser yyp) { return new ForLoopStatement_3(yyp); }
public static object ArgumentDeclarationList_4_factory(Parser yyp) { return new ArgumentDeclarationList_4(yyp); }
public static object ArgumentDeclarationList_5_factory(Parser yyp) { return new ArgumentDeclarationList_5(yyp); }
public static object EmptyStatement_factory(Parser yyp) { return new EmptyStatement(yyp); }
public static object WhileStatement_factory(Parser yyp) { return new WhileStatement(yyp); }
public static object ForLoop_1_factory(Parser yyp) { return new ForLoop_1(yyp); }
public static object Constant_2_factory(Parser yyp) { return new Constant_2(yyp); }
public static object StatementList_factory(Parser yyp) { return new StatementList(yyp); }
public static object StateBody_2_factory(Parser yyp) { return new StateBody_2(yyp); }
public static object WhileStatement_2_factory(Parser yyp) { return new WhileStatement_2(yyp); }
public static object IdentExpression_1_factory(Parser yyp) { return new IdentExpression_1(yyp); }
public static object States_factory(Parser yyp) { return new States(yyp); }
}
public class LSLSyntax
: Parser {
public LSLSyntax
():base(new yyLSLSyntax
(),new LSLTokens()) {}
public LSLSyntax
(YyParser syms):base(syms,new LSLTokens()) {}
public LSLSyntax
(YyParser syms,ErrorHandler erh):base(syms,new LSLTokens(erh)) {}

 }
}
